# Программисты постоянно гуглят ошибки и ищут уже готовый код, который можно использовать
# для своей программы, чтобы не изобретать велосипед.
# Андрей поступил также и нашёл для своего проекта код,
# который должен находить минимальное и максимальное числа в списке.
# Вот этот код:

nums_list = []
N = int(input('Кол-во чисел в списке: '))

for _ in range(N):
    num = int(input('Очередное число: '))
    nums_list.append(num)

maximum = -1
minimum = 1

for i in nums_list:
    if maximum < i:
        maximum = i
    if minimum > i:
        minimum = i

print('Максимальное число в списке:', maximum)
print('Минимальное число в списке:', minimum)

********************************************************************************

worker = int(input('Кол-во сотрудников в офисе: '))
worker_ID = []

for _ in range(worker):
    id = int(input('ID сотрудника: '))
    worker_ID.append(id)
search_ID = int(input('Какой ID ищем? '))

if search_ID in worker_ID:
    print('Сотрудник на месте')
else:
    print('Сотрудник не работает!')

********************************************************************************

# Пользователь вводит список из N чисел и число K.
# Напишите код, выводящий на экран сумму индексов элементов списка, которые кратны K.

numbers_count = int(input('Введите кол-во чисел: '))
numbers = []

for number in range(numbers_count):
    print('Введите', number + 1, 'число: ', end = '')
    number_input = int(input())
    numbers.append(number_input)

divider = int(input('Введите делитель: '))

sum_index = 0
for n in numbers:
    if n % divider == 0:
        print('Индекс числа', n, ':', numbers.index(n) )
        sum_index += numbers.index(n)
print('Сумма индексов:', sum_index)






********************************************************************************

numbers = []
for n in range(101):
    numbers.append(n)
print(numbers)


********************************************************************************

# В собачьих бегах участвует N собак, у каждой из них есть определённое количество очков за сезон.
# На огромном табло выводятся очки каждой собаки.
# Однако при выводе был обнаружен баг: собаки с наибольшим и наименьшим количеством очков поменялись местами!
# Нужно это исправить.
#
# Дан список очков из N собак. Напишите программу, которая меняет местами наибольший и наименьший элементы в списке.

total_dogs = int(input('Введите кол-во собак: '))
dogs_list = []
for dog in range(total_dogs):
    print('Сколько очков у', dog + 1, 'собаки:', end=' ')
    dog_score = int(input())
    dogs_list.append(dog_score)

min = dogs_list[0]
max = dogs_list[0]

min_index = 0
max_index = 0


for i_dogs in range(total_dogs):
    if dogs_list[i_dogs] < min:
        min = dogs_list[i_dogs]
        min_index = i_dogs

    if dogs_list[i_dogs] > max:
        max = dogs_list[i_dogs]
        max_index = i_dogs

print('мин число:', min)
print('макс число:', max)
print(dogs_list)
dogs_list[min_index], dogs_list[max_index] = dogs_list[max_index], dogs_list[min_index]
print(dogs_list)

********************************************************************************

# Дана строка S и номер позиции символа в строке.
# Напишите программу, которая выводит соседей этого символа и сообщение о количестве таких же символов
# среди этих соседей: их нет, есть ровно один или есть два таких же.

user_str = input('Введите строку: ') # abcd
user_index = int(input('Номер символа: ')) - 1

user_str = list(user_str)
count = 0
if user_index > 0:
    print('Символ слева:', user_str[user_index - 1])
    if user_str[user_index - 1] == user_str[user_index]:
        count += 1
if user_index < len(user_str)-1:
    print('Символ справа:', user_str[user_index + 1])
    if user_str[user_index + 1] == user_str[user_index]:
        count += 1

if count == 2:
     print('Рядом есть два таких же символа')
elif count == 1:
    print('Рядом есть такойже символ')
elif count == 0:
    print('Рядом таких же символов нет')


********************************************************************************

numbers = [3, 7, 5]

while True:
    number = int(input('Новое число: '))
    numbers.append(number)
    print('Текущий список чисел:', numbers)

    for i in numbers:
        print(i ** 2, i ** 3, i ** 4)

print()


********************************************************************************

# Мы продолжаем участвовать в разработке нового текстового редактора и делать жизнь обычных пользователей чуть лучше.
# В этот раз у нас стоит задача сделать фишку с поиском и заменой символов в выделенной строчке.
# Например, человек что-то перечислял в тексте, но ошибся и вместо точек с запятой использовал двоеточия.
# Лингвисты негодуют.
#
# Пользователь вводит строку S.
# Напишите программу, которая заменяет в строке все двоеточия (:) на точки с запятой (;).
# Также подсчитайте количество замен и выведите ответ на экран (и новую строку тоже).
# Для решения используйте список.
#
# Пример:
# Введите строку: гвозди:шурупы: гайки
# Исправленная строка: гвозди; шурупы; гайки
# Кол - во замен: 2

words = input('Введите строку: ')
words_list = list(words)
count = 0
for index, letter in enumerate(words_list):
    if letter == ':':
        words_list[index] = ';'
        count += 1
print('Измененная строка:', end=' ')
for i in words_list:
    print(i, end='')

print('\nКоличество замен:', count)


********************************************************************************

# Мы уже писали программу для лингвистов, которая считала количество определённых букв в тексте.
# Теперь эту программу нужно улучшить. Есть список из трёх слов, которые вводит пользователь.
# Затем вводится сам текст произведения строго по словам. Текст вводится до тех пор, пока не встретится слово end.
# Напишите программу, которая посчитает, сколько раз слова пользователя встречаются в тексте.

words_list = []
count = [0, 0, 0]
for i in range(3):
    print('Введите', i + 1, 'слово:', end=' ')
    word = input()
    words_list.append(word)

user_word = input('Слово из текста: ')
while user_word != 'end':
    for index in range(3):
        if words_list[index] == user_word:
            count[index] += 1
    user_word = input('Слово из текста: ')

print('Подсчет слов в тексте:\n')
for i in range(3):
    print(words_list[i], ':', count[i])


********************************************************************************

# Гера решил попрактиковаться в программировании и захотел написать небольшой скрипт,
# который после двух сообщений отправляет ещё одно на основе первых двух.
# Пользователь вводит две строки. В каждой из них есть какое-то количество специальных символов ! и ?.
# Напишите программу, которая считает количество этих символов отдельно в первой строке и отдельно во второй.
# Если в первой строке их больше, чем во второй, то на экран выводится первая строчка, объединённая со второй, а иначе — вторая с первой.
# При равном количестве символов в строках выводится «Ой».


first_question = input('Первое сообщение: ')
second_question = input('Второе сообщение: ')

first_count = first_question.count('!') + first_question.count('?')
second_count = second_question.count('!') + second_question.count('?')

if first_count > second_count:
    print('Третье сообщение:', first_question, second_question)
elif second_count > first_count:
    print('Третье сообщение:', second_question, first_question)
else:
    print('Ой!')


********************************************************************************

# Одна IT-компания решила расшириться и взяла под своё крыло ещё три таких же, но поменьше.
# Конечно же, все выполненные и невыполненные задачи этих компаний перетекли в основную компанию.
# Даны четыре списка компаний, в которых для каждой задачи написано, выполнена (1) она или нет (0):
#
# main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
# first_company = [0, 0, 0]
# second_company = [1, 0, 0, 1, 1]
# third_company = [1, 1, 1, 0, 1]
#
# Напишите программу, которая расширяет список main элементами остальных списков, выведите итоговый список, а также выведите количество невыполненных задач.

main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
first_company = [0, 0, 0]
second_company = [1, 0, 0, 1, 1]
third_company = [1, 1, 1, 0, 1]

main.extend(first_company)
main.extend(second_company)
main.extend(third_company)

print('Общий список задач:', main)
print('Кол-во невыполненных задач:', main.count(0))


********************************************************************************

# В маленьком зоопарке каждое животное сидит в отдельной клетке, всего этих животных четверо: лев, кенгуру, слон и обезьяна.
# В базе данных они хранятся в виде вот такого списка:
#
# zoo = ['lion', 'kangaroo', 'elephant', 'monkey']
#
# Сегодня в зоопарк завезли медведя (bear) и посадили его между львом и кенгуру.В итоге животных стало пять.
# А через неделю слона перевезли в другое место и в списке снова стало четверо животных.
# Реализуйте эти действия в коде программы и выведите в консоль итоговый список животных, а также покажите,
# в какой клетке сидят лев и обезьяна. Для этого используйте методы списков.
#
# Результат работы программы:
# # Зоопарк: ['lion', 'bear', 'kangaroo', 'monkey']
# # Лев сидит в клетке номер 1
# Обезьяна сидит в клетке номер 4

zoo = ['lion', 'kangaroo', 'elephant', 'monkey']

zoo.insert(1, 'bear')
zoo.remove('elephant')

print('Зоопарк:', zoo)
print('Лев сидит в клетке номер', zoo.index('lion') + 1)
print('Обезьяна сидит в клетке номер', zoo.index('monkey') + 1)


********************************************************************************

# Мы поддерживаем свой киносайт и хотим сделать так, чтобы пользователи после регистрации могли создать
# собственный рейтинг фильмов из тех, которые есть на сайте.

def chek_film(film, films):
    for i_film in films:
        if i_film == film:
            return True
    else:
        return False


films = [
    'Крепкий орешек', 'Назад в будущее', 'Таксист',
    'Леон', 'Богемская рапсодия', 'Город грехов',
    'Мементо', 'Отступники', 'Деревня',
    'Проклятый остров', 'Начало', 'Матрица', 'Не грози южному централу'
]
user_films = []

while True:
    print('Ваш текущий топ фильмов:', user_films)
    print('\nНазвание фильма: ', end='')
    film = input()
    if chek_film(film, films):
        print('Команды: добавить, вставить, удалить')
        user_comand = input('Введите команду: ')
        if user_comand == 'добавить':
            if chek_film(film, user_films):
                print('Этот фильм уже есть в вашем списке.')
            else:
                user_films.append(film)
        if user_comand == 'вставить':
            if chek_film(film, user_films):
                print('Этот фильм уже есть в вашем списке.')
            else:
                user_index = int(input('На какое место: '))
                user_films.insert(user_index - 1, film)
        if user_comand == 'удалить':
            user_films.remove(film)
        else:
            print('Вы ввели неверную команду!')
    else:
        print('Такого фильма на сайте нет')


********************************************************************************

# В небольшой фруктовой лавке у каждого фрукта есть название и цена. Эта информация хранится в одном большом списке, вот так:
#
# goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]
#
# Недавно в лавку привезли новый fruit_name по цене price, а после этого случилось ужасное:
# повысили налоги. А значит, повысились и цены на фрукты, на целых 8%!
#
# Реализуйте код, который добавляет в список goods ещё один список с новым фруктом и ценой (это запрашивается у пользователя),
# а затем увеличивает цены всех фруктов на 8%.

goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]

fruit_name = input('Новый фрукт: ')
price = int(input('Цена: '))

goods.append([fruit_name, price])
print('Новый ассортимент:', goods)

for good in goods:
    good[1] = round(good[1] * 1.08, 2)

print('Новый ассортимент с увеличенной ценой:', goods)




********************************************************************************

# Дан вот такой список со списками:
# matrix = [[1, 2 ,3], [4, 5, 6], [7, 8, 9]]
# Реализуйте программу, которая выводит элементы этого списка в виде привычной нам матрицы.
#
# Результат работы программы:
#
# 1 2 3
# 4 5 6
# 7 8 9

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
for i in matrix:
    for num in i:
        print(num, end=' ')
    print()


********************************************************************************

# В олимпиаде по программированию участвует N человек, в списке участников они обозначаются под номерами 1, 2, 3, 4
# и так далее до N.Эти участники поделены на команды по  K человек. Напишите программу, которая принимает
# на вход количество участников и количество человек в каждой команде, затем генерирует список таких команд и
# выводит его на экран.
# Обеспечьте контроль ввода: в каждой команде должно быть ровно по K человек.
#
# Пример 1:
# Кол - во участников: 12
# Кол - во человек в команде: 4
#
# Общий список команд: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
#
# Пример 2:
# Кол - во участников: 12
# Кол - во человек в команде: 5
#
# 12 участников невозможно поделить на команды по 5 человек!

all_members = int(input('Кол-во участников: '))
team_members = int(input('Кол-во человек в команде: '))
team_list = []
teams = all_members % team_members

if teams == 0:
    flag = True
else:
    print(all_members, 'участников невозможно поделить на команды по', team_members, 'человек!')


if flag:
    num = 1
    for _ in range(all_members // team_members):
        team_list.append(list(range(num, team_members + num)))
        num += team_members
    print('Общий список команд: ', team_list)


********************************************************************************

# При работе с сервером мы кодируем сообщение и отправляем его в виде пакетов информации.
# Их количество равно N. Допустим, каждый пакет содержит четыре числа, каждое из которых равно нулю или единице.
# Эти числа называются битами. Иногда в кодировке сообщения встречаются ошибки, и в пакете эта ошибка обозначается числом -1.
# Если таких ошибок не больше одной, то этот пакет мы целиком добавляем в список для декодирования, а иначе отбрасываем.
#
# Напишите программу, которая будет обрабатывать полученные пакеты и выведет на экран итоговое сообщение для декодирования,
# а также количество ошибок в нём и количество необработанных пакетов.

all_packets = int(input('Количество пакетов: '))

packets_list = []
lost_packets = 0
for packet in range(all_packets):
    temp = []
    print('\nПакет номер', packet + 1)
    for byte in range(4):
        print(byte + 1, 'бит: ', end='')
        byte_input = int(input())
        temp.append(byte_input)
    if temp.count(-1) <= 1:
        packets_list.extend(temp)
    else:
        print('Много ошибок в пакете!')
        lost_packets += 1

print('Полученное сообщение:', packets_list)
print('Количество ошибок в сообщении:', packets_list.count(-1))
print('Количество потерянных пакетов:', lost_packets)


********************************************************************************

# В одной компании наступили «тёмные времена», и сотрудников стали сокращать.
# Зарплаты сотрудников хранятся в списке из N этих самых зарплат.
# Зарплаты уже уволенных сотрудников обозначаются в списке числом 0.
#
# Напишите программу, которая запрашивает у пользователя количество сотрудников и их зарплаты,
# затем удаляет все элементы списка со значением 0 и выводит в консоль, сколько сотрудников осталось, а также их зарплаты.
# Дополнительный список использовать нельзя.

workers = int(input('Количество сотрудников: '))
salary_list = []

for worker in range(1, workers + 1):
    print('Зарплата', worker, 'сотрудника: ', end='')
    salary = int(input())
    salary_list.append(salary)

salary_list.remove(0)
print('Осталось сотрудников:', len(salary_list), '\nЗарплаты:', salary_list)
print('Максимальная зарплата:', max(salary_list))
print('Минимальная зарплата:', min(salary_list))


********************************************************************************

nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]],
             [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

result = [j for i_num in range(len(nice_list))
              for i in range(len(nice_list[i_num]))
              for j in nice_list[i_num][i]]

print('Ответ:', result)


********************************************************************************

# Нашему другу заказали написать программу, которая анализирует цены на бирже.
# Она получает этот пакет данных, но делать что-либо с ним нельзя.
# Для нормальной работы аналитической программы берётся новый список, который равен тому, что пришло.
# Затем идёт работа с новым списком: если есть отрицательные цены, то программа их зануляет и в конце выводит на экран,
# сколько денег мы по итогу потеряли. Получился вот такой код:
#
# original_prices = [-12, 3, 5, -2, 1]
# new_prices = original_prices
# for i in range(len(original_prices)):
#     if new_prices[i] < 0:
#         new_prices[i] = 0
#
# print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))
#
# Однако при таких входных данных программа почему-то работает неправильно: она выводит ответ 0, когда правильный ответ 14.
# Помогите другу исправить программу, а также сделайте так, чтобы список цен генерировался случайно (диапазон можно выбрать любой).

import random

original_prices = [random.randint(-5, 5) for _ in range(random.randint(1, 10))]
# original_prices = [-12, 3, 5, -2, 1]

new_prices = original_prices[:]
for i in range(len(original_prices)):
    if new_prices[i] < 0:
        new_prices[i] = 0

print('Оригинальные цены', original_prices)
print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))


********************************************************************************

# вытащить вложенные списки в один общий список

nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

# списковая сборка:
output = [j for each_list in nice_list for each_list2 in each_list for j in each_list2]

# обычный цикл:
# for i_num in range(len(nice_list)):
#     for i in range(len(nice_list[i_num])):
#         for j in nice_list[i_num][i]:
#             nice_list3.append(j)


print('Итог:', output)



********************************************************************************

# Задача 1. Гласные буквы
# Что нужно сделать
#
# Команде лингвистов понравилось качество ваших программ, и они решили заказать у вас функцию для анализатора текста,
# которая создавала бы список гласных букв текста, а заодно считала бы их количество.
# Напишите программу, которая запрашивает у пользователя текст и генерирует список из гласных букв этого текста
# (сама строка вводится на русском языке). Выведите в консоль сам список и его длину.
#
# Пример:
# Введите текст: Нужно отнести кольцо в Мордор!
#
# Список гласных букв: ['у', 'о', 'о', 'е', 'и', 'о', 'о', 'о', 'о']
# Длина списка: 9

def vowels(words):
    words_list = ['а', 'у', 'о', 'ы', 'и', 'э', 'я', 'ю', 'ё', 'е', 'А', 'У', 'О', 'Ы', 'И', 'Э', 'Я', 'Ю', 'Ё', 'Е']
    result = [i_words for i_words in words if i_words in words_list] #  символ для символа в тексте (words) если
                                                                     # символ встречается в списке (words_list) то добавить в список result
    return result


words = [word for word in input('Введите текст: ')]
print(vowels(words))


********************************************************************************

# Пользователь вводит целое число N. Напишите программу, которая генерирует список из N чисел,
# на чётных местах в нём стоят единицы, а на нечётных — числа, равные остатку от деления своего номера на 5.
#
# Пример:
# Введите длину списка: 10
# Результат: [1, 1, 1, 3, 1, 0, 1, 2, 1, 4]
# numbers = [1 if num % 2 == 0 else num % 5 for num in range(len_numbers)]
#  если индекс числа четный, то равен 1, иначе индекс числа % 5 в длине списка 1, 10

len_numbers = int(input('Введите длину списка: '))
numbers = [1 if num % 2 == 0
           else num % 5
           for num in range(len_numbers)]

print(numbers)


********************************************************************************

# Пользователь вводит числа A и B. Напишите программу, которая генерирует два списка:
# в первом лежат кубы чисел в диапазоне от А до В, во втором — квадраты чисел в этом же диапазоне.
# Выведите списки на экран. Для генерации используйте list comprehensions (как и в следующих задачах).
#
# Пример:
#
# Левая граница: 5
# Правая граница: 10
#
# Список кубов чисел в диапазоне от 5 до 10: [125, 216, 343, 512, 729, 1000]
# Список квадратов чисел в диапазоне от 5 до 10: [25, 36, 49, 64, 81, 100]

start = int(input('Левая граница: '))
stop = int(input('Правая граница: '))

cube_list = [x ** 3 for x in range(start, stop + 1)]
square_list = [x ** 2 for x in range(start, stop + 1)]

print('Список кубов чисел в диапазоне от', start, 'до', stop, cube_list)
print('Список квадратов чисел в диапазоне от', start, 'до', stop, square_list)


********************************************************************************

# У нас есть вот такой список цен на некоторые товары из магазина:
# original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
#
# В этом списке также хранятся цены на товары, которые уже давно не продаются.
# По какой-то причине система, вместо того чтобы их занулить, просто приписала к ним минус. Нам нужно это исправить.
# Напишите программу, которая генерирует новый список из первого списка, заменяя все отрицательные числа на ноль.
#
# Результат:
# [1.25, 0, 10.22, 3.78, 0, 1.16]

original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]

new_prices = [(i_num if i_num > 0 else 0)
              for i_num in original_prices]

print(new_prices)


********************************************************************************

# как найти индекс символа из списка!

result = input('Введите строку: ')

# result = ['g', 'h', 'b', 'd', 'h', 'n', 'h']
answer = [i_words for i_words in range(len(result)) if result[i_words] == 'h']

print('Развернутая последовательность между первым и последним h:', result[max(answer) - 1:min(answer):-1])


********************************************************************************

# Мы продолжаем пробовать себя в качестве разработчика игр. Теперь нужно написать небольшую логику поведения некоторых отрядов,
# а также их урон. Есть два отряда, в каждом по 10 монстров. В первом отряде у каждого монстра урон абсолютно случайный
# и колеблется от 50 до 80, а во втором — от 30 до 60. Оба отряда вместе напали на третий, также из 10 юнитов.
# Юнит третьего отряда погибает, если сумма урона от двух монстров больше 100.
#
# Напишите программу, которая генерирует случайные значения в первых двух списках в заданных диапазонах,
# а также генерирует список, состоящий из фраз «Погиб» или «Выжил». Выведите все списки на экран.
#
# Пример:
#
# Урон первого отряда: [77, 75, 76, 77, 76, 73, 57, 67, 76, 52]
# Урон второго отряда: [53, 51, 31, 60, 49, 37, 31, 60, 37, 47]
# Состояние третьего отряда: ['Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Выжил', 'Погиб', 'Погиб', 'Выжил']

import random

units_1 = [random.randint(50, 80) for _ in range(10)]
units_2 = [random.randint(30, 60) for _ in range(10)]
units_3_condition = [('Погиб' if units_1[i_damage] + units_2[i_damage] > 100
                      else 'Выжил')
                     for i_damage in range(10)]


print('Урон первого отряда:', units_1)
print('Урон Второго отряда:', units_2)
print('Состояние третьего отряда:', units_3_condition)

********************************************************************************

# Дан список цен на пять товаров с точностью до копейки. Так как экономика даёт о себе знать, мы спрогнозировали,
# что через год придётся повышать цены на X процентов, а ещё через один год — ещё на Y процентов.
# Напишите программу, которая получает на вход список цен на товары (вещественные числа,
# список генерируется также с помощью list comprehensions) и выводит в одну строку общую сумму стоимости товаров за каждый год.
#
# Пример:
# Цена на товар: 1.09
# Цена на товар: 23.56
# Цена на товар: 57.84
# Цена на товар: 4.56
# Цена на товар: 6.78
# Повышение на первый год: 0
# Повышение на второй год: 10
# Сумма цен за каждый год: 93.83 93.83 103.22

def get_percent_price(percent, price):
    return round(price * (1 + percent / 100), 2)


price_now = [float(input('Цена на товар:')) for _ in range(5)]

first_percent = int(input('Повышение на первый год: '))
second_percent = int(input('Повышение на второй год: '))

price_first = [get_percent_price(first_percent, i_price) for i_price in price_now]
price_second = [get_percent_price(second_percent, i_price) for i_price in price_first]

print('Сумма цен за каждый год:', round(sum(price_now), 2), round(sum(price_first), 2), round(sum(price_second), 2))


********************************************************************************

# улучшение кода

def is_palindrome(num_list):
    reverse_list = num_list[::-1]
    if num_list == reverse_list:
        return True
    else:
        return False

total_num = int(input('Кол-во чисел: '))
number_list = []
answer = []

for num in range(total_num):
    num = int(input('Число: '))
    number_list.append(num)

for i_num in range(0, len(number_list)):
    if is_palindrome(number_list[i_num:len(number_list)]):
        answer = number_list[:i_num]
        answer.reverse()
        print('Последовательность:', number_list)
        if len(answer) == 0:
            print('Уже является палиндромом!')
            break
        print('Нужно приписать чисел:', len(answer))
        print('Сами числа:', answer)
        break


********************************************************************************

# Илья решил безобидно подшутить над другом и написал программу для смартфона,
# которая при отправке сообщения удваивает каждый символ строки и заодно к каждому удвоенному добавляет ещё один дополнительный.
#
# Пользователь вводит строку и дополнительный символ. Напишите программу, которая генерирует два списка:
# в первом списке каждый элемент — удвоенная буква первой строки, во втором списке каждый элемент —
# конкатенация элемента первого списка и дополнительного символа.
#
# Пример:
# Введите строку: привет
# Введите дополнительный символ: !
#
# Список удвоенных символов: ['пп', 'рр', 'ии', 'вв', 'ее', 'тт']
# Склейка с дополнительным символом: ['пп!', 'рр!', 'ии!', 'вв!', 'ее!', 'тт!']

user_input = input('Введите строку: ')
new_symb = input('Введите дополнительный символ: ')

user_list = [x * 2 for x in user_input]
new_user_list = [x + new_symb for x in user_list]

print('Список удвоенных символов:', user_list)
print('Склейка с дополнительным символом:', new_user_list)


********************************************************************************

# user_list = [int(input('Введи число: ')) for _ in range(2)]

start = int(input('Левая граница: '))
stop = int(input('Правая граница: '))

result = [i_num for i_num in range(start, stop + 1) if i_num % 2 == 0]

print(result)


********************************************************************************

# Дан список чисел:
# nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]
#
# Напишите программу, которая выводит на экран шесть ответов:
# В первой строке выведите первые пять элементов списка.
# Во второй строке выведите весь список, кроме последних двух элементов.
# В третьей строке выведите все элементы с чётными индексами.
# В четвёртой строке выведите все элементы с нечётными индексами.
# В пятой строке выведите все элементы в обратном порядке.
# В шестой строке выведите все элементы списка через один в обратном порядке, начиная с последнего.
# Для решения используйте только срезы (и без функции len).
#
# Результат:
# [48, -10, 9, 38, 17]
# [48, -10, 9, 38, 17, 50, -5, 43]
# [48, 9, 17, -5, 46]
# [-10, 38, 50, 43, 12]
# [12, 46, 43, -5, 50, 17, 38, 9, -10, 48]
# [12, 43, 50, 38, -10]

nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]

print('Исходный список:', nums, '\n')
print('Первые пять элементов списка:', nums[:5])
print('Список без последних двух элементов:', nums[0:8])
print('Элементы с четными индексами', nums[::2])
print('Элементы с нечетными индексами', nums[1::2])
print('Элементы в обратном порядке:', nums[::-1])
print('Элементы в обратном порядке через один:', nums[::-2])


********************************************************************************

# Дан список из N чисел, а также числа А и В (можно сгенерировать случайно, при этом А < B).
# Напишите программу, которая удаляет элементы списка с индексами от А до В.
# Не используйте дополнительные переменные и методы списков.

import random

numbers = [random.randint(1, 10) for _ in range(random.randint(5, 10))]
a = random.randint(0, len(numbers) - 2)
b = random.randint(a + 1, len(numbers) - 1)

print('Список', numbers, 'Удаляем элементы с индексами от', a, 'до', b)
numbers[a:b + 1] = []

print(numbers)


********************************************************************************

def caesar_cipher(string, shift):
    char_list = [(alphabet[(alphabet.index(sym) + shift) % 33] if sym != ' ' else ' ') for sym in string]
    new_str = ''
    for i_char in char_list:
        new_str += i_char
    return new_str


alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
user_list = input('Введите сообщение: ')
shift = int(input('Введите сдвиг: '))

result = caesar_cipher(user_list, shift)
print('Зашифрованное сообщение:', result)


********************************************************************************

# Задача 1. Заказ
# После того, как человек сделал заказ в интернет-магазине, ему на почту приходит оповещение с его именем и номером заказа.
# Напишите программу, которая получает на вход имя и код заказа, а затем выводит на экран соответствующее сообщение.
# Для решения используйте строковый метод format.
#
# Пример:
# Имя: Иван
# Номер заказа: 10948
#
# Здравствуйте, Иван! Ваш номер заказа: 10948. Приятного дня!

user_name = input('Имя клиента: ')
order_number = int(input('Номер заказа: '))

print('Здравствуйте, {name}! Ваш номер заказа: {order}. Приятного дня!'.format(name=user_name, order=order_number))
# или
print('Здравствуйте, {0}! Ваш номер заказа: {1}. Приятного дня!'.format(user_name, order_number))


********************************************************************************

# Задача 1. Улучшенная лингвистика 2
# Усовершенствуйте старую программу:
# У нас есть список из трёх слов, которые вводит пользователь. Затем вводится сам текст произведения,
# который вводится уже в одну строку. Напишите программу, которая посчитает,
# сколько раз слова пользователя встречаются в тексте.

# count = [0, 0, 0]
# user_input = input('Введите три слова через пробел: ')
# user_words = user_input.split()
# words = input('Введите текст произведения: ')
# words_list = words.split()
#
# for index in range(3):
#     for word in words_list:
#         if user_words[index] == word:
#             count[index] += 1
#
# print('Подсчет слов в тексте:\n')
# for i in range(3):
#     print(user_words[i], ':', count[i])

# как надо было сделать
words = [input("Введите слово: ") for _ in range(3)]
text = input("Введите текст: ")
words_count = [text.count(word) for word in words]

print(words_count)


********************************************************************************

# Задача 1. Шифр Цезаря 2
# Мы уже писали программу, которая шифрует строку с помощью шифра Цезаря.
# Напомним, что в таком способе шифрования каждая буква заменяется на следующую по алфавиту через K позиций по кругу.
# Напишите (модифицируйте) программу, которая реализует этот алгоритм шифрования. Не используйте конкатенацию и сделайте так,
# чтобы текст был в одном регистре.

def caesar_cipher(string, shift):
    char_list = [(alphabet[(alphabet.index(sym) + shift) % 33] if sym != ' ' else ' ') for sym in string]
    new_str = ''.join(char_list)
    return new_str


alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
user_list = input('Введите сообщение: ').lower()
shift = int(input('Введите сдвиг: '))

result = caesar_cipher(user_list, shift)
print('Зашифрованное сообщение:', result)


# print(ord("а"), ord("я"), ord("ё"), chr(1104))
#
# text = input("Введите текст: ")
# delta = int(input("Введите сдвиг: "))
# alphabet = [chr(index) for index in range(ord("а"), ord("я") + 1)]  # заполняем список буквами алфавита
# # Думаем над структурой алгоритма: [вариант_1 если условие_1 иначе вариант_2 for буква in текст]
# new_text = [alphabet[(alphabet.index(letter) + delta) % len(alphabet)] if letter in alphabet else letter for letter in text.lower()]
# print(''.join(new_text))


********************************************************************************

# Задача 2. Бабушка
# У одной бабушки, когда та переписывается с внуком, постоянно залипает кнопка пробела.
# В итоге между словами получаются огромные расстояния. Внук не знает как это поправить в самом телефоне, поэтому обратился к вам за помощью.
#
# Пользователь вводит строку. Напишите программу, которая преобразовывает в этой строке все идущие подряд пробелы в один и выводит результат на экран.

grandma_input = input('Введите текст: ').split()

result = ' '.join(grandma_input)
print(result)


********************************************************************************

# Задача 2. Долги
# Один наш друг занял у нас определённую сумму денег и всё никак не может их вернуть.
# А деньги нам нужны. Поэтому мы решили написать небольшой скрипт-напоминалку, который, возможно, разбудит его совесть.
#
# Напишите программу, которая получает на вход имя и долг, а затем выводит на экран сообщение,
# где имя повторяется несколько раз (и долг, возможно, тоже). Используйте числа в названиях ключей.
#
# Пример:
# Введите имя: Том
# Введите долг: 100
# Том! Том, привет! Как дела, Том? Где мои 100 рублей? Том!


user_name = input('Введите имя: ')
user_debt = int(input('Введите долг: '))

print('{0}! {0}, привет! Как дела, {0}? Где мои бабки, '
      '{0}? Когда вернешь {1} рублей, пёс?'.format(user_name, user_debt))


********************************************************************************

# Задача 2. Путь к файлу
# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта
# часто используются абсолютные пути файлов, которые необходимо проверять.
# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные: диск и расширение файла.
# Напишите программу, которая проверяет корректность этого пути.
#
# Пример:
# Путь к файлу: C:/user/docs/folder/new_file.txt
# На каком диске должен лежать файл: C
# Требуемое расширение файла: .txt
# Путь корректен!

path = 'C:/user/docs/folder/new_file.txt'
print('Путь к файлу:', path)
disk_name = input('На каком диске должен лежать файл: ')
file_name = input('Требуемое расширение файла: ')



if not path.endswith(file_name):
    print('Ошибка расширения файла!')
elif not path.startswith(disk_name):
    print('Ошибка. Не верно указан диск!')
else:
    print('Путь корректен!')


********************************************************************************

# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта часто используются
# абсолютные пути файлов, которые необходимо проверять.
# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные:
# диск и расширение файла. Напишите программу, которая проверяет корректность этого пути.
#
# Пример:
# Путь к файлу: C:/user/docs/folder/new_file.txt
# На каком диске должен лежать файл: C
# Требуемое расширение файла: .txt
# Путь корректен!

user_name = input('Введите имя пользователя: ')
file_name = input('Введите имя файла: ')

path = 'C:/{user}/docs/folder/{new_file}'.format(
    user=user_name,
    new_file=file_name
)

if not path.endswith('.txt'):
    print('Ошибка расширения файла!')
elif not path.startswith('C:/'):
    print('Ошибка. Не верно указан диск!')
else:
    print('Путь к файлу:', path)


********************************************************************************

# Задача 3. IP-адрес
# IP-адрес компьютера состоит из 4 чисел, разделённых точкой. Каждое число находится в диапазоне от 0 до 255 (включительно).
#
# Пример правильного адреса: 192.168.1.0
# Пример неправильного адреса: 192.168.300.0
#
# Напишите программу, которая получает на вход 4 числа и выводит на экран IP-адрес.
# Используйте переменную ip_address в качестве шаблона. Обеспечьте контроль ввода.

# for num in range(4):
#     ip_address = ''
#     print('Ведите число: ')
#     num1 = int(input())
#     if num1 > 255:
#         print('Число не может быть больше "255"')
#         num = int(input())
#
#     num += 1
# print(ip_address)

ip_address = '{0}.{1}.{2}.{3}'
count = 0
numbers = []
while count < 4:
    new_number = int(input('Введите число:'))
    if 0 < new_number <= 255:
        numbers.append(new_number)
        count += 1
    else:
        print('Ошибка ввода! Цифра не может быть больше "255"')

print(ip_address.format(numbers[0], numbers[1], numbers[2], numbers[3]))


********************************************************************************

# Задача 3. Разделители символов
# Человек хочет сделать рассылку поздравлений для определённого списка людей. Поздравления для разных людей он хочет написать по-разному.
#
# Напишите программу, которая запрашивает у пользователя:
# Шаблон поздравления (туда вставляется ФИ и возраст)
# ФИ людей (в одну строку, разделяются запятой)
# Возраст каждого человека (в одну строку через пробел)
# В конце  программа выводит поздравления и всех именинников в одну строку вместе с их возрастом.
#
# Пример:
# Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: С днём рождения, {name}! С {age}-летием тебя!
# Список людей через запятую: Иван Иванов, Петя Петров, Лена Ленова
# Возраст людей через пробел: 20 30 18
#
# С днём рождения, Иван Иванов! С 20-летием тебя!
# С днём рождения, Петя Петров! С 30-летием тебя!
# С днём рождения, Лена Ленова! С 18-летием тебя!
## Именинники: Иван Иванов 20, Петя Петров 30, Лена Ленова 18

while True:
    greetings = input('Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: ')
    if '{name}' and '{age}' in greetings:
        break
    print('Отсутствует одна или две конструкции')

guests = input('Список людей через запятую: ').split(', ')
age = input('Возраст людей через пробел: ')
age_list = age.split()

for i_man in range(len(guests)):
    print(greetings.format(name=guests[i_man], age=age_list[i_man]))

# для вывода именинников в одну строку
people = [
    ' '.join([guests[i_man], age_list[i_man]])
    for i_man in range(len(guests))
]

people_str = ', '.join(people)
print('Именинники:', people_str)


********************************************************************************

# Дана структура, которая содержит описание одного из членов семьи (имя, фамилия, хобби, сколько лет и дети):
# family_member = {
#     "name": "Jane",
#     "surname": "Doe",
#     "hobbies": ["running", "sky diving", "singing"],
#     "age": 35,
#     "children": [
#         {
#             "name": "Alice",
#             "age": 6
#         },
#         {
#             "name": "Bob",
#             "age": 8
#         }
#     ]
# }
# # Напишите программу, которая реализует такую структуру: имя, фамилия, хобби, кол-во лет и дети.
# Затем, с помощью метода get и установки значения по умолчанию, проверьте есть ли ребёнок с именем Bob.
# Затем в отдельную переменную получите фамилию этого ребёнка и выведите её на экран. Если у него нет фамилии, то получите значение ‘Nosurname’.

family_member = {
    "name": "Jane",
    "surname": "Doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "name": "Alice",
            "age": 6
        },
        {
            "name": "Bob",
            "age": 8
        }
    ]
}


children_dict = dict()
for child in family_member['children']:
    children_dict[child['name']] = child['age']

search_bob = children_dict.get('Bob', {})
if search_bob:
    print('Bob найден')
else:
    print('Bob-a нет!')

surname = children_dict.get('surname', {})
if surname:
    print(surname)
else:
    print('Nosurname')


********************************************************************************

a = [[1, 2, [3]], [1], 3]
l = [x for lst in a for x in lst]
print(l)

********************************************************************************

# Напишите программу, которая считает количество знаков пунктуации в символьной строке.
# К знакам пунктуации относятся символы из набора ".,;:!?". Набор должен храниться в виде множества.
#
# Пример:
# Введите строку: Я! Есть. Грут?! Я, Грут и Есть.
# Количество знаков пунктуации: 6

text = input('Введите строку: ')
punct = set(".,;:!?")

count = 0
for i in text:
    if i in punct:
        count += 1
print('Количество знаков пунктуации:', count)
print(punct)

********************************************************************************

# У мебельного магазина есть два склада, на которых хранятся разные категории товаров по парам «название — количество»:
#
# small_storage = {
#     'гвозди': 5000,
#     'шурупы': 3040,
#     'саморезы': 2000
# }
#
# big_storage = {
#     'доски': 1000,
#     'балки': 150,
#     'рейки': 600
# }
#
# Магазин решил сократить аренду и скинуть все товары в большой склад (big_storage). После этого нас попросили реализовать поиск по товарам.
# Напишите программу, которая объединяет оба словаря в один (в big_storage), затем запрашивает у пользователя название товара и выводит
# на экран его количество. Если такого товара нет, то выводит об этом ошибку. Для получения значения используйте метод get.

small_storage = {
    'гвозди': 5000,
    'шурупы': 3040,
    'саморезы': 2000
}

big_storage = {
    'доски': 1000,
    'балки': 150,
    'рейки': 600
}

big_storage.update(small_storage)

while True:
    input_item = input('Введите название товара: ')
    for item in big_storage.keys():
        if item == input_item:
            print('Количество товара', item, '-', big_storage.get(item))
            break
    else:
        print('Ошибка! Такого товара в базе нет!')


# решение от курса:
# big_storage.update(small_storage)
#
# user_item = input("Введите название нужного товара: ")
# if big_storage.get(user_item, None):
#     print(big_storage[user_item])
# else:
#     print("Такого товара нет!")


********************************************************************************

# На вход программе поступает целое число num. Напишите программу создания словаря,
# который включает в себя ключи от 1 до num, а значениями соответствующего ключа будет значение ключа в квадрате.
#
# Пример:
# Введите целое число: 5
#
# Результат: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

num = int(input('Введите целое число: '))

num_dict = dict()

for numb in range(1, num + 1):
    num_dict[numb] = numb ** 2

print(num_dict)


********************************************************************************

# Дана структура, которая содержит описание одного из членов семьи (имя, фамилия, хобби, сколько лет и дети):
# family_member = {
#     "name": "Jane",
#     "surname": "Doe",
#     "hobbies": ["running", "sky diving", "singing"],
#     "age": 35,
#     "children": [
#         {
#             "name": "Alice",
#             "age": 6
#         },
#         {
#             "name": "Bob",
#             "age": 8
#         }
#     ]
# }
# # Напишите программу, которая реализует такую структуру: имя, фамилия, хобби, кол-во лет и дети.
# Затем, с помощью метода get и установки значения по умолчанию, проверьте есть ли ребёнок с именем Bob.
# Затем в отдельную переменную получите фамилию этого ребёнка и выведите её на экран. Если у него нет фамилии, то получите значение ‘Nosurname’.

family_member = {
    "name": "Jane",
    "surname": "Doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "name": "Alice",
            "age": 6
        },
        {
            "name": "Bob",
            "age": 8
        }
    ]
}


children_dict = dict()
for child in family_member['children']:
    children_dict[child['name']] = child['age']

search_bob = children_dict.get('Bob', {})
if search_bob:
    print('Bob найден')
else:
    print('Bob-a нет!')

surname = children_dict.get('surname', {})
if surname:
    print(surname)
else:
    print('Nosurname')


********************************************************************************

# Есть готовый словарь игроков, у каждого игрока есть имя, команда, в которой он играет, а также его текущий статус,
# в котором указано, отдыхает он, тренируется или путешествует:
#
# players_dict = {
#     1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
#     2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
#     3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
#     4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
#     5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
#     6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
#     7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
#     8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
# }
#
# Напишите программу, которая выводит на экран вот такие данные в разных строчках:
# Все члены команды из команды А, которые отдыхают.
# Все члены команды из группы B, которые тренируются.
# Все члены команды из команды C, которые путешествуют.

players_dict = {
    1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
    2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
    3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
    4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
    5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
    6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
    7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
    8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
}

rest_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'A' and player['status'] == 'Rest'
]

traning_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'B' and player['status'] == 'Training'
]

travel_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'C' and player['status'] == 'Travel'
]

print(rest_players)
print(traning_players)
print(travel_players)


********************************************************************************

# Мы работаем в одной небольшой торговой компании, где все данные о продажах фруктов за год сохранены в словаре в виде пар «название фрукта — доход»:
#
# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'grapefruit': 300.40,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,
# }
#
# В компании наступил небольшой кризис, и нам поручено провести небольшой анализ дохода.
# Напишите программу, которая находит общий доход, затем выводит фрукт с минимальным доходом и удаляет его из словаря. Выведите итоговый словарь на экран.
# Результат работы программы:
# Общий доход за год составил 35419.34 рублей
# Самый маленький доход у grapefruit. Он составляет 300.4 рублей
# Итоговый словарь: {'apple': 5600.2, 'orange': 3500.45, 'banana': 5000.0, 'bergamot': 3700.56, 'durian': 5987.23, 'peach': 10000.5, 'pear': 1020.0, 'persimmon': 310.0}

incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'grapefruit': 300.40,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00,
}

min_value = min(incomes.values())
min_key = ''
for val in incomes:
    if incomes[val] == min_value:
        min_key = val

print('Оющий доход за год составил', sum(incomes.values()), 'рублей')
incomes.pop(min_key)
print('Самый маленький доход у', min_key, '. Он составляет', min_value, 'рублей')
print('Итоговый словарь:', incomes)


********************************************************************************

# На одном семинаре по теории множеств нужно показать наглядный пример, как эти множества работают. Для начала было сгенерировано два набора чисел:
# nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
# nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]
#
# Вас попросили написать программу, которая будет наглядно демонстрировать работу со множествами с помощью этих чисел.
# Напишите программу, которая преобразует списки во множества и убирает повторяющиеся элементы.
# Затем удаляет минимальный элемент из каждого множества и добавляет туда случайное число в диапазоне от 100 до 200. Затем выполните следующие действия со множествами:
#
# Вывести все элементы множеств (объединение).
# Вывести только общие элементы (пересечение).
# Вывести элементы, входящие в nums_2, но не входящие в nums_1.
#
# Пример результата:
# 1-е множество: {1, 2, 3, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 26, 27, 29}
# 2-е множество: {1, 5, 7, 8, 9, 11, 12, 13, 15, 16, 19, 21, 22, 23, 24, 29, 30}
#
# Минимальный элемент 1-го множества: 1
# Минимальный элемент 2-го множества: 1
#
# Случайное число для 1-го множества: 126
# Случайное число для 2-го множества: 169
#
# Объединение множеств: {2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 169, 126}
# Пересечение множеств: {7, 8, 11, 12, 13, 15, 16, 19, 21, 22, 24, 29}
# Элементы, входящие в nums_2, но не входящие в nums_1: {5, 9, 169, 23, 30}
import random

nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]

nums_1 = set(nums_1)
nums_2 = set(nums_2)
min_nums_1 = min(nums_1)
min_nums_2 = min(nums_2)
random_min_nums_1 = random.randint(100, 200)
random_min_nums_2 = random.randint(100, 200)

print('Первое множество:', nums_1)
print('Второе множество:', nums_2)
print()
print('Минимальный элемент 1-го множества:', min_nums_1)
print('Минимальный элемент 2-го множества:', min_nums_2)
print()
print('Случайное число для 1-го множества:', random_min_nums_1)
print('Случайное число для 2го множества:', random_min_nums_2)

nums_1.remove(min_nums_1)
nums_2.remove(min_nums_2)
nums_1.add(random_min_nums_1)
nums_2.add(random_min_nums_2)
print('Объединение множеств:', nums_1 | nums_2)
print('Пересечение множеств:', nums_1 & nums_2)
print('Элементы, входящие в nums_2, но не входящие в nums_1:', nums_2 - nums_1)


********************************************************************************

# Пользователь вводит фамилию, имя студента, город проживания, вуз, в котором он учится, и все его оценки.
# Всё вводится в одну строку через пробел. Напишите программу, которая по этой информации составит словарь и выведет его на экран.
#
# Пример:
# Введите информацию о студенте через пробел (имя, фамилия, город, место учёбы, оценки): Илья Иванов Москва МГУ 5 4 4 4 5
#
# Результат:
# Имя - Илья
# Фамилия - Иванов
# Город - Москва
# Место учёбы - МГУ
# Оценки - [5, 4, 4, 4, 5]

student = input(
    'Введите информацию о студенте через пробел\n'
    '(имя, фамилия, город, место учебы, оценки): '
)

student_list = student.split()

student_dict = dict()

for i_list in student_list:
    student_dict['Имя'] = student_list[0]
    student_dict['Фамилия'] = student_list[1]
    student_dict['Город'] = student_list[2]
    student_dict['Место учебы'] = student_list[3]
    student_dict['Оценки'] = []
for i_grade in student_list[4:]:
    student_dict['Оценки'].append(int(i_grade))

for i_info in student_dict:
    print(i_info, '-', student_dict[i_info])


********************************************************************************

# Лингвистам нужно собрать данные о частоте букв в тексте, исходя из этих данных будет строиться гистограмма частоты букв.
# Напишите программу, которая получает сам текст и считает, сколько раз в строке встречается каждый символ.
# На экран нужно вывести содержимое в виде таблицы, отсортированное по алфавиту, а также максимальное значение частоты.
#
# Пример:
# Введите текст: Здесь что-то написано
#   : 2
# - : 1
# З : 1
# а : 2
# д : 1
# е : 1
# и : 1
# н : 2
# о : 3
# п : 1
# с : 2
# т : 2
# ч : 1
# ь : 1
# Максимальная частота: 3

def histograme(string):
    text_dict = dict()
    for symbol in string:
        if symbol in text_dict.keys():
            text_dict[symbol] += 1
        else:
            text_dict[symbol] = 1

    return text_dict


text = input('Введите текст: ').lower()
hist = histograme(text)

for key in sorted(hist.keys()):
    print(key, ':', hist[key])

print('Максимальная частота', max(hist.values()))  # метод



********************************************************************************

# Энтузиаст Степан, купив новый телефон, решил написать для него свою собственную операционную систему.
# И, конечно же, первое, что он захотел в ней реализовать, — это телефонная книга.
#
# Напишите программу, которая запрашивает у пользователя имя контакта и номер телефона, добавляет их в словарь и выводит
# на экран текущий словарь контактов. Запрос на добавление идёт бесконечно (но можно задать своё условие для завершения программы).
# Обеспечьте контроль ввода: если это имя уже есть в словаре, то выведите соответствующее сообщение.
#
# Пример:
# Текущие контакты на телефоне:
# <Пусто>
#
# Введите имя: Иван
# Введите номер телефона: 100200300
# # Текущие контакты на телефоне:
# Иван  100200300
#
# Введите имя: Лена
# Введите номер телефона: 8005555522
# # Текущие контакты на телефоне:
# Иван  100200300
# Лена  8005555522
#
# Введите имя: Иван
# Ошибка: такое имя уже существует.
# ...


contacts_dict = {}

while True:
    print('Текущие контакты на телефоне:')
    for i_cont in contacts_dict:
        print(i_cont, contacts_dict[i_cont])
    input_name = input('\nВведите имя: ')
    if input_name in contacts_dict:
        print('Ошибка: такое имя уже существует.')
    else:
        input_number = int(input('Введите номер телефона: '))
        contacts_dict[input_name] = input_number



********************************************************************************

# Напишите программу, которая находит все различные цифры в символьной строке.
# Для решения используйте множество (цифры будут различные, и поиск во множестве намного быстрее, чем в списке).
# Подсказка: можно использовать вот такое сравнение '0'<=x<='9'
#
# Пример:
# Введите строку: ab1n32kz2
# Различные цифры строки: 123

user_input = set(input('Введите строку: '))
numbers = set()

for symb in user_input:
    if '0'<= symb <='9':
        numbers.add(symb)

print(''.join(numbers))


********************************************************************************

# Заполните один кортеж десятью случайными целыми числами от 0 до 5 включительно.
# Также заполните второй кортеж числами от −5 до 0. Объедините два кортежа, создав тем самым третий кортеж.
# С помощью метода кортежа определите в нём количество нулей. Выведите на экран третий кортеж и количество нулей в нём.
words = ('нулей', 'ноль', 'нуля', 'нуля', 'нуля', 'нулей', 'нулей', 'нулей', 'нулей', 'нулей', 'нулей')

import random

numbers = (0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5)
negative_numbers = (-5, -4, -3, -2, -1, 0, -5, -4, -3, -2, -1, 0,)
one_tuple = tuple(random.sample(numbers, 10))
two_tuple = tuple(random.sample(negative_numbers, 10))
result_tuple = one_tuple + two_tuple

print('Первый кортеж', one_tuple)
print('Второй кортеж', two_tuple)
print('Третий кортеж {} \nв нем: {} {}'.format(result_tuple, result_tuple.count(0), words[result_tuple.count(0)]))


********************************************************************************

# Какой-то нехороший человек решил подпортить жизнь frontend-разработчикам и добавил в код сайта символ ~ (тильда).
# Но программисты быстро решили эту проблему, пройдясь по всему коду маленькой программой.
#
# Пользователь вводит строку. Напишите программу, которая проходит по строке и выводит в консоль индексы символа ~.
# Для решения этой задачи (и остальных тоже) используйте функцию enumerate.
#
# Пример:
# Строка: so~mec~od~e
# Ответ: 2 6 9

str_input = input('Строка:')

for i_sym, sym in enumerate(str_input):
    if sym == '~':
        print(i_sym, end=' ')

# решение с list comprehension
result = [str(i_sym) for i_sym, sym in enumerate(str_input) if sym == '~']
print(('Ответ:'), ' '.join(result))

# решение с использованием функции (выводим индекс необходимого символа)
def get_indexes(where_to_search, what_to_search):
    return [str(index) for index, letter in enumerate(where_to_search) if letter == what_to_search]

# генератор кортежа из случайных чисел
def create_random_tuple(a, b, n):
    return tuple([random.randint(a, b) for _ in range(n)])
#  first = create_random_tuple(0, 5, 10) - создать кортеж из 10 случайных чисел от 0 до 5

print(('Ответ:'), ' '.join(get_indexes(str_input, '~')))


********************************************************************************

# Задача 1. Кризис миновал
# Закупки грейпфрутов прекратились, и кризис в торговой компании закончился. И теперь можно вернуться к обыденным делам.
# Однако внезапно вы обнаружили, что старый скрипт, который выводит данные о фруктах, куда-то потерялся.
# Необходимо его восстановить.
#
# Дан словарь с парами «название фрукта — цена»:
# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,
# }
#
# Вывести на экран словарь в следующем виде:
# apple -- 5600.2
# orange -- 3500.45
# banana -- 5000.0
# bergamot -- 3700.56
# durian -- 5987.23
# peach -- 10000.5
# pear -- 1020.0
# persimmon -- 310.0
# Не используйте обращение по ключу словаря.

incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00,
}

for i_name, i_price in incomes.items():
   print('{name} -- {price}'.format(name=i_name, price=i_price))


********************************************************************************

# В базе данных поликлиники хранятся паспортные данные людей. Хранение реализовано с помощью словаря,
# состоящего из пар «Серия и номер паспорта — фамилия и имя». Серия и номер — составной ключ,
# а фамилия и имя — составное значение.
#
# data = {
#     (5000, 123456): ('Иванов', 'Василий'),
#     (6000, 111111): ('Иванов', 'Петр'),
#     (7000, 222222): ('Медведев', 'Алексей'),
#     (8000, 333333): ('Алексеев', 'Георгий'),
#     (9000, 444444): ('Георгиева', 'Мария')
# }
#
# Реализуйте функцию, которая по номеру и серии паспорта выдаёт имя и фамилию человека.

data = {
    (5000, 123456): ('Иванов', 'Василий'),
    (6000, 111111): ('Иванов', 'Петр'),
    (7000, 222222): ('Медведев', 'Алексей'),
    (8000, 333333): ('Алексеев', 'Георгий'),
    (9000, 444444): ('Георгиева', 'Мария')
}

serial = int(input('Введите серию: '))
number = int(input('Введите номер: '))

passport = (serial, number)

if passport in data:
    print(data[passport])
else:
    print('Такого человека нет')


********************************************************************************

# Андрей однажды уже писал функции для расчёта площади сферы и объёма шара.
# И теперь для своей курсовой работы ему пришлось связаться с цилиндрами.
#
# Пользователь вводит два значения: радиус и высоту. Напишите функцию для расчёта площади
# боковой поверхности цилиндра и его полной площади. Функция должна возвращать два эти значения.
# После этого в основной программе выводятся оба ответа в две строки.
#
# Площадь боковой поверхности (r — радиус, h — высота):
# side = 2pi * r * h
# Полная площадь (S — площадь круга):
# full = side + 2 * S
import math

def cylinder_s (r, h):
    r_side = 2 * math.pi * r * h
    r_full = r + 2 * math.pi * r ** 2

    return r_side, r_full


radius = float(input('Введите радиус: '))
height = float(input('Введите высоту: '))

r_side, r_full = cylinder_s(radius, height)

print('Площадь боковой поверхности:', round(r_side, 2))
print('Полная площадь:', round(r_full, 2))


********************************************************************************

# Создайте два списка, в каждом из которых лежит 10 случайных букв алфавита (могут повторяться).
# Затем для каждого списка создайте словарь из пар «индекс — значение» и выведите оба словаря на экран.
#
# Подсказка: random
#
# Пример:
# Первый список: ['й', 'р', 'с', 'г', 'а', 'а', 'т', 'ж', 'е', 'к']
# Второй список: ['д', 'а', 'а', 'в', 'т', 'ж', 'р', 'б', 'й', 'р']
#
# Первый словарь: {0: 'й', 1: 'р', 2: 'с', 3: 'г', 4: 'а', 5: 'а', 6: 'т', 7: 'ж', 8: 'е', 9: 'к'}
# Второй словарь: {0: 'д', 1: 'а', 2: 'а', 3: 'в', 4: 'т', 5: 'ж', 6: 'р', 7: 'б', 8: 'й', 9: 'р'}

import random

def random_generator (symb, how_symb):
    result = list()
    for i in range(how_symb):
        result.append(random.choice(symb))
    return result


def get_index(text):
    result = dict()
    for index, sym in enumerate(text):
        result.update({index: sym})
    return result


symb = (
    'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о',
    'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я'
)

first_list = random_generator(symb, 10)
second_list = random_generator(symb, 10)
first_tuple = get_index(first_list)
second_tuple = get_index(second_list)

print('Первый список:', first_list)
print('Второй список:', second_list)
print('\nПервый словарь:', first_tuple)
print('Второй словарь:', second_tuple)


********************************************************************************

# Задача 2. Сервер
# У вас есть данные о сервере, которые хранятся в виде вот такого словаря:
## server_data = {
#     "server": {
#         "host": "127.0.0.1",
#         "port": "10"
#     },
#     "configuration": {
#         "access": "true",
#         "login": "Ivan",
#         "password": "qwerty"
#     }
# }
## Напишите программу, которая выводит для пользователя эти данные так же красиво и понятно, как они представлены в словаре.
# Результат работы программы:
# server:
#     host: 127.0.0.1
#     port: 10
# configuration:
#     access: true
#     login: Ivan
#     password: qwerty

server_data = {
    "server": {
        "host": "127.0.0.1",
        "port": "10"
    },
    "configuration": {
        "access": "true",
        "login": "Ivan",
        "password": "qwerty"
    }
}

for i_keys, i_values in server_data.items():
    print('{key}:'.format(key=i_keys), end='\n')
    for j_keys, j_values in i_values.items():  # вместо "server_data[i_keys].items()" можно обратится напрямую к значению
        print('\t{j_keys}: {j_values}'.format(j_keys=j_keys, j_values=j_values))



********************************************************************************

# Мы уже реализовывали телефонную книгу для Степана, однако её проблема была в том,
# что туда нельзя было добавить людей с одинаковыми именами. Надо это исправить.
#
# Напишите программу, которая запрашивает у пользователя имя контакта, фамилию и номер телефона,
# добавляет их в словарь и выводит на экран текущий словарь контактов. Словарь состоит из пар «Ф. И. — телефон»,
# где Ф. И. — это составной ключ. Запрос на добавление идёт бесконечно
# (но можно задать своё условие для завершения программы).
# Обеспечьте контроль ввода: если этот человек уже есть в словаре, то выведите соответствующее сообщение.

def print_phonebook(data):
    print('\nТелефонная книга:')
    for user in data:
        print(f'{user[0]} {user[1]}: {data[user]}')

phonebook = dict()
while True:
    first_name = input('\nВведите фамилию ("выход" чтобы закончить): ')
    if first_name != 'выход':
        second_name = input('Введите имя: ')
        contact = (first_name, second_name)
        user_number = int(input('Введите номер телефона: '))
        if contact not in phonebook:
            phonebook.update({contact: user_number})
            print_phonebook(phonebook)
        else:
            print('Такой контакт уже есть!')
    else:
        break

# решение от курса:
# contacts = {}
#
# while True:
#     name = input("Введите имя: ")
#     surname = input("Введите фамилию: ")
#     name_n_surname = (name, surname)
#     if name_n_surname not in contacts:
#         contacts[name_n_surname] = int(input("Введите номер телефона: "))
#     else:
#         print("Такой контакт уже есть!")
#     print(contacts)


********************************************************************************

# Дан код, в котором должно происходить следующее: изначально есть кортеж из пяти чисел.
# Затем вызывается функция, которая получает на вход кортеж чисел, генерирует случайный индекс и случайное значение,
# а затем по этим индексу и значению меняет сам кортеж. Функция должна возвращать кортеж и случайное значение.
#
# В основном коде функция используется два раза, и на экран два раза выводится новый кортеж и случайное значение.
# Причём второй раз выводится сумма первого случайного значения и второго.
## Однако код, который вам дали, оказался нерабочим. Исправьте его в соответствии с описанием.
import random

def change(nums):
    index = random.randint(0, 4)
    value = random.randint(100, 1000)
    nums = list(nums)
    nums[index] = value
    return tuple(nums), value


my_nums = (1, 2, 3, 4, 5)
my_nums, rand_val = change(my_nums)
new_nums, new_rand_val = change(my_nums)

print(my_nums, rand_val)
print(new_nums, new_rand_val + rand_val)



********************************************************************************

# Нашему другу дали задачу: «Есть словарь, в котором ключи — это числа от 0 до 4,
# а значения ключей — числа 0, 100, 144, 20 и 19 соответственно.
# Нужно написать программу, которая выводит список тех значений, # у которых ключ делится на 2.
# Причём программа должна быть в одну строчку.» Программа у друга работает,
# но её не приняли, так как в ней не используется правило «не повторяйся» — это когда части кода не повторяются.
# Помогите другу исправить решение задачи так, чтобы код в строчке не повторялся.
#
# Решение друга:
# print([{0: 0, 1: 100, 2: 144, 3: 20, 4: 19}[i_key] for i_key in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19} if i_key % 2 == 0])
# [0, 144, 19]

print([i_value for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items() if i_key % 2 == 0])

# result = list()
# for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items():
#     if i_key % 2 == 0:
#         result.append(i_value)
# print(result)


********************************************************************************

# Один заказчик попросил нас написать небольшой скрипт для своих криптографических нужд.
# При этом он заранее предупредил, что скрипт должен уметь работать с любым итерируемым типом данных.
# Напишите функцию, которая возвращает список из элементов итерируемого объекта
# (кортежа, строки, списка, словаря), у которых индекс чётный.
#
# Пример 1:
# Допустим, есть такая строка: 'О Дивный Новый мир!'
# Результат: ['О', 'Д', 'в', 'ы', ' ', 'о', 'ы', ' ', 'и', '!']
#
# Пример 2:
# Допустим, есть такой список: [100, 200, 300, 'буква', 0, 2, 'а']
# Результат: [100, 300, 0, 'а']
#
# Примечание: для проверки типа можно использовать функцию isinstance(<элемент>, <тип данных>),
# которая возвращает True, если элемент принадлежит к этому типу данных, и возвращает False в противном случае.

def even_index(object):
    result = [symb for index, symb in enumerate(object) if index % 2 == 0]
    return result


text_list = ['О', 'Дивный', 'Новый мир!']  # список
text_set = {'дрыхнуть', 'спать', 'кемарить', 'тусить', 'гонять'}  # множество
text_dict = {'веселиться: грустить', 'стоять: сидеть', 'моргать: зевать', 'идти: бежать'}  # словарь
text = 'О дивный новый мир'  # строка
text_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)  # кортеж


print('Такой список: ', text_list)
print('Результат: ', even_index(text_list))

print('\nТакое множество: ', text_set)
print('Результат: ', even_index(text_set))

print('\nТакой словарь: ', text_dict)
print('Результат: ', even_index(text_dict))

print('\nТакая строка: ', text)
print('Результат: ', even_index(text))

print('\nТакой кортеж: ', text_tuple)
print('Результат: ', even_index(text_tuple))





********************************************************************************

site = {
    'html': {
        'head': {
            'title': 'Куплю/продам телефон недорого'
        },
        'body': {
            'h2': 'У нас самая низкая цена на iphone',
            'div': 'Купить',
            'p': 'продать'
        }
    }
}

# TODO здесь писать код
import copy


def display_struct(struct, spaces=1):
    for key, value in struct.items():
        if isinstance(value, dict):
            print(' ' * spaces, key)
            display_struct(value, spaces + 3)
        else:
            print('{}{} : {}'.format(' ' * spaces, key, value))


def create_site(site, total, phone=None, copy_site={}):
    if total == 0:
        return
    phone = input('Введите название продукта для нового сайта: ')
    total -= 1

    site['html']['head']['title'] = 'Куплю/продам {} недорого'.format(phone)
    site['html']['body']['h2'] = 'У нас самая низкая цена на {}'.format(phone)
    new_site = copy.deepcopy(site)
    copy_site.update({'\nСайт для {}:'.format(phone): site})
    display_struct(copy_site)
    create_site(new_site, total)
    return


total_site = int(input('Сколько сайтов: '))
create_site(site, total_site)
# задача оказалась для меня сложной, с выводом как в примере так и не справился...

********************************************************************************

# Обычно программисты любят, когда всё просто и понятно. Но Антон не из таких.
# Он любит устраивать себе челлендж, развиваться и сразу применять на практике то, что только что узнал.
# И в этот раз он подумал реализовать подсчёт факториала без использования циклов.
#
# Напишите функцию, которая считает факториал числа с помощью рекурсии.
#
# Кстати, в Python есть ограничение на количество рекурсивных вызовов.
# Попробуйте передать своей функции, например, число 1000 и посмотрите, что будет.
def factorial(num):
    if num == 1:
        return num
    return num * factorial(num - 1)


print(factorial(5))


********************************************************************************

# В одном проекте на 10 000 строк кода произошла критическая ошибка.
# Хорошо, что старший разработчик быстро её нашёл и исправил. Он решил проверить, смогли бы вы её исправить,
# если бы его не было на месте. Поэтому он написал для вас код с аналогичной ошибкой:

import random

def change_dict(dct):
    num = random.randint(1, 100)
    for i_key, i_value in dct.items():
        if isinstance(i_value, list):
            i_value.append(num)
        if isinstance(i_value, dict):
            i_value[num] = i_key
        if isinstance(i_value, set):
            i_value.add(num)


nums_list = [1, 2, 3]
some_dict = {1: 'text', 2: 'another text'}
uniq_nums = {1, 2, 3}
common_dict = {1: nums_list.copy(), 2: some_dict.copy(), 3: uniq_nums.copy(), 4: (10, 20, 30)}

change_dict(common_dict)
print(common_dict)
# Суть кода в том, что у вас есть общий словарь из нескольких ключей, значения которых равны ранее объявленным переменным.
# Затем вызывается функция, которая должна изменять значения словаря, добавляя к значениям случайное число,
# в зависимости от типа данных. Но при этом меняются и ранее объявленные переменные.
# Исправьте эту ошибку и убедитесь, что nums_list, some_dict и uniq_nums не меняются.
print(nums_list, some_dict, uniq_nums)

# Либо мы можем применить вспомогательную функцию, которая сделает это за нас:
import copy

common_dict = {1: nums_list, 2: some_dict, 3: uniq_nums, 4: (10, 20, 30)}
common_dict_2 = copy.deepcopy(common_dict)  # Она будет особенно полезна в структурах, в которых множество вложенных переменных
change_dict(common_dict_2)
print(common_dict_2)
print(nums_list, some_dict, uniq_nums)


********************************************************************************

# Вы пишете небольшое приложение для работы с файлами. Реализуйте функцию, которая может принимать на вход три аргумента:
# вопрос пользователю (на который нужно ответить да или нет), сообщение о неправильном вводе и количество попыток.
# Вопрос — обязательный позиционный аргумент, остальные — со значениями по умолчанию.
# При корректном ответе функция может возвращать что угодно — например, число 1 при ответе «да» или 0 при ответе «нет».
#
# В основной программе вызовите функцию минимум три раза:
# только с вопросом, с вопросом и сообщением об ошибке, с вопросом и количеством попыток.
#
# Пример работы программы:
# Вы действительно хотите выйти? что
# Неверный ввод. Пожалуйста, введите 'да' или 'нет'.
# Осталось попыток: 3
# Вы действительно хотите выйти? да
# Удалить файл? не знаю
# Так удалить или нет?
# Осталось попыток: 3
# Удалить файл? нет
# Записать файл? ага
# Неверный ввод. Пожалуйста, введите 'да' или 'нет'.
# Осталось попыток: 1
# Записать файл? да

def func(question,
         message='Неверный ввод. Пожалуйста введите "да" или "нет".',
         count=4):
    while True:
        user_input = input(question).lower()
        if user_input == 'да':
            return 1
        if user_input == 'нет':
            return 0
        count -= 1
        if count == 0:
            print('Попытки закончились!')
            break
        print(message)
        print('Осталось попыток:', count)


print(func('Сохранить файл? '))
print(func('Удалить файл? ', 'Да или нет?'))
print(func('Удалить файл? ', message='Так удалить или нет?'))
print(func('Записать файл? ', count=2))


********************************************************************************

# На одном из форумов, посвящённых программированию, пользователь выложил такой код
# для расчёта степени числа без использования циклов, ** и функции math.pow():

def power(num, degree):
    if degree <= 0:
        return 1
    return num * power(num, degree - 1)

float_num = float(input('Введите вещественное число: '))
int_num = int(input('Введите степень числа: '))
print(float_num, '**', int_num, '=', power(float_num, int_num))

# Другие пользователи отметили, что это решение нерабочее и в нём есть ошибки. Исправьте это решение,
# не используя циклы, возведение в степень через ** и функцию math.pow()
#
# Правильный результат:
# Введите вещественное число: 1.5
# Введите степень числа: 5
# 1.5 ** 5 = 7.59375

********************************************************************************

# Друг никак не может понять эту тему с изменяемыми и неизменяемыми типами, ссылками, объектами и их id.
# Видя, как он мучается, вы решили помочь ему и объяснить эту тему наглядно.
# Пользователь вводит любой объект. Напишите программу, которая выводит на экран тип введённых данных,
# информацию о его изменяемости, а также id этого объекта.
#
# Пример 1:
# Введите данные: привет
#
# Тип данных: str (строка)
# Неизменяемый (immutable)
# Id объекта: 1705156583984
#
# Пример 2:
# Введите данные: {‘a’: 10, ‘b’: 20}
#
# Тип данных: dict (словарь)
# Изменяемый (mutable)
# Id объекта: 1705205308536

# if type(data) in (int, float, str, tuple, bool):
#     print('Неизменяемый (immutable)')
# elif type(data) in (str, set, dict):
#     print('Изменяемый (mutable)')

data_names_dict = {
    "<class 'str'>": "строка",
    "<class 'dict'>": "словарь",
    "<class 'list'>": "список",
    "<class 'set'>": "множество",
    "<class 'int'>": 'число',
    "<class 'bool'>": 'булево'
}

mutable_check_helper = {
    "mutable": ("словарь(dict)", "список(list)", "множество(set)"),
    "immutable": ("число(int)", "число с плавающей точкой(float)", "строка(str)", "кортеж(tuple)", "булево(bool)")
}


def check_info(data):
    type_of_data = type(data)
    name_of_data = ""
    if str(type_of_data) in data_names_dict:
        name_of_data = data_names_dict[str(type_of_data)]

    if name_of_data in mutable_check_helper["mutable"]:
        property_of_data = "Изменяемый (mutable)"
    else:
        property_of_data = "Неизменяемый (immutable)"

    print(f"Тип данных: {type_of_data} ({name_of_data})")
    print(property_of_data)
    print("Id объекта:", id(data))


data_in = True
check_info(data_in)


********************************************************************************

# При работе со значениями по умолчанию и изменяемыми типами данных нужно знать и остерегаться ещё одной интересной штуки.
# Напишите функцию с двумя аргументами: первый — число num, позиционный аргумент;
# второй — список lst, по умолчанию он пустой.
# В теле функции в список добавляется число num и сам список выводится на экран.
#
# В основной программе вызовите функции три раза только с одним аргументом (числом), например так:
# add_num(5)
# add_num(10)
# add_num(15)
#
# И посмотрите, что произойдёт.
# После этого сделайте значение lst по умолчанию None и поправьте функцию, чтобы она работала правильно.

def add_num(num, lst=None):
    lst = lst or []
    if not lst:
        lst = []
    lst.append(num)
    print(lst)


add_num(5)
add_num(10)
add_num(15)


********************************************************************************

# Когда мы работаем с большой многоуровневой структурой, нам нередко необходимо пройтись по ней и найти нужный элемент.
# Для этого в программировании используются специальные алгоритмы поиска.
# Напишите функцию, которая находит заданный пользователем ключ в словаре и выдаёт значение этого ключа на экран.
# В качестве примера можно использовать такой словарь:
#
# site = {
#     'html': {
#         'head': {
#             'title': 'Мой сайт'
#         },
#         'body': {
#             'h2': 'Здесь будет мой заголовок',
#             'div': 'Тут, наверное, какой-то блок',
#             'p': 'А вот здесь новый абзац'
#         }
#     }
# }
#
# Пример 1:
# Искомый ключ: h2
# Значение: Здесь будет мой заголовок
#
# Пример 2:
# Искомый ключ: abc
# Такого ключа в структуре сайта нет.
site = {
    'html': {
        'head': {
            'title': 'Мой сайт'
        },
        'body': {
            'h2': 'Здесь будет мой заголовок',
            'div': 'Тут, наверное, какой-то блок',
            'p': 'А вот здесь новый абзац'
        }
    }
}

def find_key(key, data):
    if key in data:
        return data[key]

    for i_key in data.values():
        if isinstance(i_key, dict):
            result = find_key(key, i_key)
            if result:
                break
    else:
        result = None

    return result



user_input = (input('Искомый ключ: '))
value = find_key(user_input, site)
if value:
    print('Значение:', value)
else:
    print('Такого ключа нет')



********************************************************************************

# Нашего друга попросили написать функцию, которая на вход принимает список всякого мусора.
# Ему нужно подготовить из этого списка список словарей, чтобы его коллеги смогли дальше продолжить обработку данных.
# Вот список правил, что нужно сделать с изначальным списком:
#
# Если в списке встретился словарь, то оставляем его.
# Если в списке встретилась строка, то из неё нужно сделать словарь и положить его в итоговый список,
# например  “abc” → {“abc”: “abc”}.
#
# С числами нужно сделать то же самое, что и со строками.
# Всё остальное выкидываем из нашего списка.
# Друг написал программу, но в ней ошибка, так как она что-то не то выводит :( Нужна ваша помощь, вот сама программа:

# def create_dict(data, template=dict()):
#     if isinstance(data, dict):
#         return data
#     if isinstance(data, int) or isinstance(data, float) or isinstance(data, str):
#         return template[data] = data
#
#
# def data_preparation(old_list):
#     new_list = []
#     for i_element in old_list:
#         new_list.append(create_dict(i_element))
#     return new_list
#
#
# data = [“sad”, {“sds”: 23}, {43}, [12, 42, 1], 2323]
# data = data_preparation(data)
# print(data)
# Исправьте программу и убедитесь, что всё работает верно.


def create_dict(data, template=None):
    if isinstance(data, dict):
        return data
    elif isinstance(data, (int, float, str)):
        template = template or dict()
        template[data] = data
        return template


def data_preparation(old_list):
    new_list = []
    for i_element in old_list:
        new_elem = (create_dict(i_element))
        if new_elem:
            new_list.append(new_elem)  # если есть новый элемент - добавляем его в список
    return new_list


data = ['sad', {'sds': 23}, {43}, [12, 42, 1], 2323]
print(data_preparation(data))


********************************************************************************

# Вы работаете системным администратором в одной компании. На диске каждого сотрудника компании
# в специальной папке access лежит файл admin.bat. Этот файл предназначен для вас, и вам нужен путь до этого файла,
# причём как относительный, так и абсолютный. Недолго думая, вы решили написать небольшой скрипт,
# который закинете по сети к этому файлу.
# Напишите программу, которая выводит на экран относительный и абсолютный пути до файла admin.bat.
#
# Пример результата:
# Абсолютный путь до файла: C:\Users\Roman\PycharmProjects\Skillbox\access\admin.bat
# Относительный путь до файла: Skillbox\access\admin.bat
import os


folder_name = 'access'
file_name = 'admin.bat'
rel_path = os.path.join('..', folder_name, file_name)
abs_path = os.path.abspath(rel_path)

print('Относительный путь до файла:', rel_path)
print('Абсолютный путь до файла:', abs_path)


********************************************************************************

# Андрей для себя хочет сделать экспериментальный сайт, где будет красиво отображаться вся структура его диска:
# папки одними иконками, файлы — другими. Поэтому ему нужен код, который поможет определить, какой тип иконки вставить.
#
# Напишите программу, которая по заданному абсолютному пути определяет, на что указывает этот путь
# (на директорию, файл, или же путь является ссылкой), и выведите соответствующее сообщение.
# Если путь указывает на файл, то также выведите его размер (сколько он весит в байтах).
# Обеспечьте контроль ввода: проверка пути на существование.
# Подсказка: для вывода размера файла поищите соответствующий метод.
#
# Пример 1:
# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py
# Это файл
# Размер файла: 605 байт
#
# Пример 2:
# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py
# Указанного пути не существует
import os

def find_file(file):
    print('Путь:', file)
    if os.path.exists(file):
        if os.path.isfile(file):
            print('Это файл')
            print('Размер файла:', os.path.getsize(file), 'байт')
        if os.path.isdir(file):
            print('Это папка')
            for i_elem in os.listdir(file):
                path = os.path.join(file, i_elem)
                print('Содержимое папки:', path)
    else:
        print('Указанного пути не существует')


file = 'Отряды.py'  # название файла

abs_path = os.path.abspath(os.path.join('..', 'lesson17', file))  # указываем правильный путь

find_file(abs_path)


********************************************************************************

# Одному программисту дали задачу для обработки неких результатов тестирования двух групп людей.
# Файл первой группы (group_1.txt) находится в папке task, файл второй группы (group_2.txt) — в папке Additional_info.
# Содержимое файла group_1.txt
# Бобровский Игорь 10
# Дронов Александр 20
# Жуков Виктор 30
#
# Содержимое файла group_2.txt
# Павленко Геннадий 20
# Щербаков Владимир 35
# Marley Bob 15
#
# На экран нужно было вывести сумму очков первой группы, затем разность очков опять же первой группы
# и напоследок — произведение очков уже второй группы.
# Программист оказался не очень опытным, писал код наобум и даже не стал его проверять. И оказалось,
# этот код просто не работает. Вот что он написал:
# file = open('E:\task\group_1.txt', 'read')
# summa = 0
# for i_line in file:
#     info = i_line.split()
#     summa += info[2]
# file = open('E:\task\group_1.txt', 'read')
# diff = 0
# for i_line in file:
#     info = i_line.split()
#     diff -= info[2]
# file_2 = open('E:\task\group_2.txt', 'read')
# compose = 0
# for i_line in file:
#     info = i_line.split()
#     compose *= info[2]
# print(summa)
# print(diff)
# print(compose)
#
# Исправьте код для решения поставленной задачи. Для проверки результата создайте необходимые папки
# (task, Additional_info, Dont touch me) на своём диске в соответствии с картинкой и также добавьте файлы
# group_1.txt и group_2.txt.
import os

print(os.listdir())
file = open('F:\\task\\group_1.txt', 'r', encoding='utf-8')

summa = 0
diff = 0
for i_line in file:
    info = i_line.split('\n')
    info = info[0].split(' ')
    summa += int(info[2])
    diff -= int(info[2])
file.close()

file_2 = open('F:\\task\\Additional_info\\group_2.txt', 'r', encoding='utf-8')
compose = 1
for i_line_2 in file_2:
    info_2 = i_line_2.split('\n')
    info_2 = info_2[0].split(' ')
    compose *= int(info_2[2])
    print(info_2[2])
file_2.close()

print(summa)
print(diff)
print(compose)


********************************************************************************

# Во входном файле numbers.txt записано N целых чисел, каждое в отдельной строке.
# Напишите программу, которая выводит их сумму в выходной файл answer.txt.
#
# Пример:
# Содержимое файла numbers.txt:
# 1
# 2
# 3
# 4
# 10
#
# Содержимое файла answer.txt
# 20

numbers = open('numbers.txt', 'r')
count = 0
for strin in numbers:
    count += int(strin)
print(count)
numbers.close()
result = open('answer.txt', 'a')
result.write(str(count))
result.write(', ')
result.close()


********************************************************************************

# Выберите любую директорию на своём диске и затем напишите программу,
# выводящую на экран абсолютные пути к файлам и папкам, которые находятся внутри этой директории.
#
# Результат программы на примере директории проекта python_basic:
# Содержимое каталога G:\PycharmProjects\python_basic
#     G:\PycharmProjects\python_basic\.git
#     G:\PycharmProjects\python_basic\.idea
#     G:\PycharmProjects\python_basic\Module14
import os


def print_dirs(project):
    print('Содержимое директории', project)
    if os.path.exists(project):
        for i_elem in os.listdir(project):
            path = os.path.join(project, i_elem)
            print('    ', path)
    else:
        print('Каталога проекта не существует.')

folder_name = 'lesson18'

abs_path = os.path.abspath(os.path.join('..', '..', folder_name))


print_dirs(abs_path)



# решение от курса:
# for path in os.listdir('..'):
#     print(os.path.join(os.path.abspath('..'), path))

********************************************************************************

# В уроке мы написали функцию, которая ищет нужный нам файл во всех подкаталогах указанной директории.
# Однако, как мы понимаем, файлов с таким названием может быть несколько.
# Напишите функцию, которая принимает на вход абсолютный путь до директории и имя файла,
# проходит по всем вложенным файлам и папкам и выводит на экран все абсолютные пути с этим именем.
#
# Пример:
# Ищем в: C:/Users/Roman/PycharmProjects/Skillbox
# Имя файла: lesson2
#
# Найдены следующие пути:
# C:/Users/Roman/PycharmProjects/Skillbox\Module15\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module16\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module17\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module18\lesson2.py
import os

def search_file(dir, file):
    print('переходим', dir)
    for i_elem in os.listdir(dir):
        path = os.path.join(dir, i_elem)
        # print(path)
        if i_elem == file:
            print(os.path.abspath(path))

        if os.path.isdir(path):
            result = search_file(path, file)
            if result:
                break



file_name = 'Задача 1. Склады.py'  # что ищем
abs_path = os.path.abspath(os.path.join('..'))  # где ищем

print('Найдены следующие пути:')
search_file(abs_path, file_name)


********************************************************************************

# Как мы помним, скрипты — это просто куча строк текста, хоть они и понятны только программисту.
# Таким образом, с ними можно работать точно так же, как и с обычными текстовыми файлами.
#
# Используя функцию поиска файла из предыдущего урока, реализуйте программу, которая находит внутри
# указанного пути все файлы с искомым названием и выводит на экран текст одного из них
# (выбор можно сгенерировать случайно).
#
# Подсказка: можно использовать, например, список для сохранения найденного пути.
import os
import random


def find_file(cur_path, file_name):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if file_name == i_elem:
            print('Найде файл')
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                all_paths.extend(result)

    return all_paths

def chek_file(path_to_file):
    file = open(path_to_file, 'r', encoding='utf8')
    for line in file:
        print(line)
    file.close()


all_paths = find_file('..', 'Задача 2. Кризис фруктов.py')
chek_file(random.choice(all_paths))



********************************************************************************

# Ваш друг, который тоже проходит курс Python Basic, поехал с ноутбуком в другой город, и там у него случилась беда:
# его диск пришлось отформатировать, а доступ в интернет отсутствует. Остался только телефон с мобильным интернетом.
# Так как со связью (и с памятью) проблемы, друг попросил вас скинуть одним файлом все решения и скрипты,
# которые у вас сейчас есть.
# Напишите программу, которая копирует код каждого скрипта в папке проекта python_basic в файл scripts.txt,
# разделяя код строкой из 40 символов *.
#
# Пример содержимого файла scripts.txt:
# import platform
# import sys
#
# info = 'OS info is \n{}\n\nPython version is {} {}'.format(
#     platform.uname(),
#     sys.version,
#     platform.architecture(),
# )
# print(info)
#
# with open('os_info.txt', 'w', encoding='utf8') as file:
#     file.write(info)
# ****************************************
# print("Введите первую точку")
# x1 = float(input('X: '))
# y1 = float(input('Y: '))
# print("\nВведите вторую точку")
# x2 = float(input('X: '))
# y2 = float(input('Y: '))
#
# print("Уравнение прямой, проходящей через эти точки:")
# x_diff = x1 - x2
# y_diff = y1 - y2
# if x_diff == 0:
#     print("x = ", x1)
# elif y_diff == 0:
#     print("y = ", y1)
# else:
#     k = y_diff / x_diff
#     b = y2 - k * x2
#     print("y = ", k, " * x + ", b)
# ****************************************
import os
#
#
# def find_file(cur_path, file_name):
#     all_paths = []
#     for i_elem in os.listdir(cur_path):
#         path = os.path.join(cur_path, i_elem)
#         if i_elem.endswith(file_name):
#             # print('Найден файл', i_elem)
#             all_paths.append(os.path.abspath(path))
#         elif os.path.isdir(path):
#             result = find_file(path, file_name)
#             if result:
#                 all_paths.extend(result)
#
#     return all_paths
#
# def chek_file(path_to_file):
#     for file in path_to_file:
#         files = open(file, 'r', encoding='utf8')
#         new_file = open('scripts.txt', 'a', encoding='utf8')
#         for line in files:
#             new_file.write(str(line))
#         new_file.write('\n' + '*'*40+'\n')
#         files.close()
#         new_file.close()
#
#
#
# all_path = find_file('..', '.py')
#
# files_list = chek_file(all_path)
# print(files_list)

# решение курса
def find_file(cur_path, ending):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if i_elem.endswith(ending):
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, ending)
            if result:
                all_paths.extend(result)

    return all_paths


def get_text_from_file(path_to_file):
    file = open(path_to_file, "r", encoding="utf8")
    result = ""
    for line in file:
        result += line
    return result


all_py_files = find_file('..', '.py')  # вместо ".." можно вставить путь до папки python_basic

file_result = open("scripts.txt", "w", encoding="utf8")

for file_path in all_py_files:
    file_result.write(get_text_from_file(file_path))
    file_result.write("\n" * 2 + "*" * 80 + "\n" * 2)


********************************************************************************

# Напишите программу, которая выводит на экран только корень диска, на котором запущен скрипт.
# Учтите, что скрипт может быть запущен где угодно и при любой вложенности папок.
#
# Результат программы на примере диска G:
# Корень диска: G:\\

import os


def print_dirs(project):
    for i_elem in os.listdir(project):
        path = os.path.join(project, i_elem)
        print(' ', path)

abs_path = os.path.abspath(os.path.join(os.path.sep))
print('Содержимое каталога', abs_path)
print_dirs(abs_path)



********************************************************************************

import random
def get_random_letter(n):
    return random.choices([chr(i) for i in range(ord('а'), ord('я'))], k=n)


print(get_random_letter(int(input('Сколько случайных букв желаешь: '))))


********************************************************************************

# Программисты постоянно гуглят ошибки и ищут уже готовый код, который можно использовать
# для своей программы, чтобы не изобретать велосипед.
# Андрей поступил также и нашёл для своего проекта код,
# который должен находить минимальное и максимальное числа в списке.
# Вот этот код:

nums_list = []
N = int(input('Кол-во чисел в списке: '))

for _ in range(N):
    num = int(input('Очередное число: '))
    nums_list.append(num)

maximum = -1
minimum = 1

for i in nums_list:
    if maximum < i:
        maximum = i
    if minimum > i:
        minimum = i

print('Максимальное число в списке:', maximum)
print('Минимальное число в списке:', minimum)
****************************************
worker = int(input('Кол-во сотрудников в офисе: '))
worker_ID = []

for _ in range(worker):
    id = int(input('ID сотрудника: '))
    worker_ID.append(id)
search_ID = int(input('Какой ID ищем? '))

if search_ID in worker_ID:
    print('Сотрудник на месте')
else:
    print('Сотрудник не работает!')
****************************************
# Пользователь вводит список из N чисел и число K.
# Напишите код, выводящий на экран сумму индексов элементов списка, которые кратны K.

numbers_count = int(input('Введите кол-во чисел: '))
numbers = []

for number in range(numbers_count):
    print('Введите', number + 1, 'число: ', end = '')
    number_input = int(input())
    numbers.append(number_input)

divider = int(input('Введите делитель: '))

sum_index = 0
for n in numbers:
    if n % divider == 0:
        print('Индекс числа', n, ':', numbers.index(n) )
        sum_index += numbers.index(n)
print('Сумма индексов:', sum_index)





****************************************
numbers = []
for n in range(101):
    numbers.append(n)
print(numbers)

****************************************
# В собачьих бегах участвует N собак, у каждой из них есть определённое количество очков за сезон.
# На огромном табло выводятся очки каждой собаки.
# Однако при выводе был обнаружен баг: собаки с наибольшим и наименьшим количеством очков поменялись местами!
# Нужно это исправить.
#
# Дан список очков из N собак. Напишите программу, которая меняет местами наибольший и наименьший элементы в списке.

total_dogs = int(input('Введите кол-во собак: '))
dogs_list = []
for dog in range(total_dogs):
    print('Сколько очков у', dog + 1, 'собаки:', end=' ')
    dog_score = int(input())
    dogs_list.append(dog_score)

min = dogs_list[0]
max = dogs_list[0]

min_index = 0
max_index = 0


for i_dogs in range(total_dogs):
    if dogs_list[i_dogs] < min:
        min = dogs_list[i_dogs]
        min_index = i_dogs

    if dogs_list[i_dogs] > max:
        max = dogs_list[i_dogs]
        max_index = i_dogs

print('мин число:', min)
print('макс число:', max)
print(dogs_list)
dogs_list[min_index], dogs_list[max_index] = dogs_list[max_index], dogs_list[min_index]
print(dogs_list)
****************************************
# Дана строка S и номер позиции символа в строке.
# Напишите программу, которая выводит соседей этого символа и сообщение о количестве таких же символов
# среди этих соседей: их нет, есть ровно один или есть два таких же.

user_str = input('Введите строку: ') # abcd
user_index = int(input('Номер символа: ')) - 1

user_str = list(user_str)
count = 0
if user_index > 0:
    print('Символ слева:', user_str[user_index - 1])
    if user_str[user_index - 1] == user_str[user_index]:
        count += 1
if user_index < len(user_str)-1:
    print('Символ справа:', user_str[user_index + 1])
    if user_str[user_index + 1] == user_str[user_index]:
        count += 1

if count == 2:
     print('Рядом есть два таких же символа')
elif count == 1:
    print('Рядом есть такойже символ')
elif count == 0:
    print('Рядом таких же символов нет')

****************************************
numbers = [3, 7, 5]

while True:
    number = int(input('Новое число: '))
    numbers.append(number)
    print('Текущий список чисел:', numbers)

    for i in numbers:
        print(i ** 2, i ** 3, i ** 4)

print()

****************************************
# Мы продолжаем участвовать в разработке нового текстового редактора и делать жизнь обычных пользователей чуть лучше.
# В этот раз у нас стоит задача сделать фишку с поиском и заменой символов в выделенной строчке.
# Например, человек что-то перечислял в тексте, но ошибся и вместо точек с запятой использовал двоеточия.
# Лингвисты негодуют.
#
# Пользователь вводит строку S.
# Напишите программу, которая заменяет в строке все двоеточия (:) на точки с запятой (;).
# Также подсчитайте количество замен и выведите ответ на экран (и новую строку тоже).
# Для решения используйте список.
#
# Пример:
# Введите строку: гвозди:шурупы: гайки
# Исправленная строка: гвозди; шурупы; гайки
# Кол - во замен: 2

words = input('Введите строку: ')
words_list = list(words)
count = 0
for index, letter in enumerate(words_list):
    if letter == ':':
        words_list[index] = ';'
        count += 1
print('Измененная строка:', end=' ')
for i in words_list:
    print(i, end='')

print('\nКоличество замен:', count)

****************************************
# Мы уже писали программу для лингвистов, которая считала количество определённых букв в тексте.
# Теперь эту программу нужно улучшить. Есть список из трёх слов, которые вводит пользователь.
# Затем вводится сам текст произведения строго по словам. Текст вводится до тех пор, пока не встретится слово end.
# Напишите программу, которая посчитает, сколько раз слова пользователя встречаются в тексте.

words_list = []
count = [0, 0, 0]
for i in range(3):
    print('Введите', i + 1, 'слово:', end=' ')
    word = input()
    words_list.append(word)

user_word = input('Слово из текста: ')
while user_word != 'end':
    for index in range(3):
        if words_list[index] == user_word:
            count[index] += 1
    user_word = input('Слово из текста: ')

print('Подсчет слов в тексте:\n')
for i in range(3):
    print(words_list[i], ':', count[i])

****************************************
# Гера решил попрактиковаться в программировании и захотел написать небольшой скрипт,
# который после двух сообщений отправляет ещё одно на основе первых двух.
# Пользователь вводит две строки. В каждой из них есть какое-то количество специальных символов ! и ?.
# Напишите программу, которая считает количество этих символов отдельно в первой строке и отдельно во второй.
# Если в первой строке их больше, чем во второй, то на экран выводится первая строчка, объединённая со второй, а иначе — вторая с первой.
# При равном количестве символов в строках выводится «Ой».


first_question = input('Первое сообщение: ')
second_question = input('Второе сообщение: ')

first_count = first_question.count('!') + first_question.count('?')
second_count = second_question.count('!') + second_question.count('?')

if first_count > second_count:
    print('Третье сообщение:', first_question, second_question)
elif second_count > first_count:
    print('Третье сообщение:', second_question, first_question)
else:
    print('Ой!')

****************************************
# Одна IT-компания решила расшириться и взяла под своё крыло ещё три таких же, но поменьше.
# Конечно же, все выполненные и невыполненные задачи этих компаний перетекли в основную компанию.
# Даны четыре списка компаний, в которых для каждой задачи написано, выполнена (1) она или нет (0):
#
# main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
# first_company = [0, 0, 0]
# second_company = [1, 0, 0, 1, 1]
# third_company = [1, 1, 1, 0, 1]
#
# Напишите программу, которая расширяет список main элементами остальных списков, выведите итоговый список, а также выведите количество невыполненных задач.

main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
first_company = [0, 0, 0]
second_company = [1, 0, 0, 1, 1]
third_company = [1, 1, 1, 0, 1]

main.extend(first_company)
main.extend(second_company)
main.extend(third_company)

print('Общий список задач:', main)
print('Кол-во невыполненных задач:', main.count(0))

****************************************
# В маленьком зоопарке каждое животное сидит в отдельной клетке, всего этих животных четверо: лев, кенгуру, слон и обезьяна.
# В базе данных они хранятся в виде вот такого списка:
#
# zoo = ['lion', 'kangaroo', 'elephant', 'monkey']
#
# Сегодня в зоопарк завезли медведя (bear) и посадили его между львом и кенгуру.В итоге животных стало пять.
# А через неделю слона перевезли в другое место и в списке снова стало четверо животных.
# Реализуйте эти действия в коде программы и выведите в консоль итоговый список животных, а также покажите,
# в какой клетке сидят лев и обезьяна. Для этого используйте методы списков.
#
# Результат работы программы:
# # Зоопарк: ['lion', 'bear', 'kangaroo', 'monkey']
# # Лев сидит в клетке номер 1
# Обезьяна сидит в клетке номер 4

zoo = ['lion', 'kangaroo', 'elephant', 'monkey']

zoo.insert(1, 'bear')
zoo.remove('elephant')

print('Зоопарк:', zoo)
print('Лев сидит в клетке номер', zoo.index('lion') + 1)
print('Обезьяна сидит в клетке номер', zoo.index('monkey') + 1)

****************************************
# Мы поддерживаем свой киносайт и хотим сделать так, чтобы пользователи после регистрации могли создать
# собственный рейтинг фильмов из тех, которые есть на сайте.

def chek_film(film, films):
    for i_film in films:
        if i_film == film:
            return True
    else:
        return False


films = [
    'Крепкий орешек', 'Назад в будущее', 'Таксист',
    'Леон', 'Богемская рапсодия', 'Город грехов',
    'Мементо', 'Отступники', 'Деревня',
    'Проклятый остров', 'Начало', 'Матрица', 'Не грози южному централу'
]
user_films = []

while True:
    print('Ваш текущий топ фильмов:', user_films)
    print('\nНазвание фильма: ', end='')
    film = input()
    if chek_film(film, films):
        print('Команды: добавить, вставить, удалить')
        user_comand = input('Введите команду: ')
        if user_comand == 'добавить':
            if chek_film(film, user_films):
                print('Этот фильм уже есть в вашем списке.')
            else:
                user_films.append(film)
        if user_comand == 'вставить':
            if chek_film(film, user_films):
                print('Этот фильм уже есть в вашем списке.')
            else:
                user_index = int(input('На какое место: '))
                user_films.insert(user_index - 1, film)
        if user_comand == 'удалить':
            user_films.remove(film)
        else:
            print('Вы ввели неверную команду!')
    else:
        print('Такого фильма на сайте нет')

****************************************
# В небольшой фруктовой лавке у каждого фрукта есть название и цена. Эта информация хранится в одном большом списке, вот так:
#
# goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]
#
# Недавно в лавку привезли новый fruit_name по цене price, а после этого случилось ужасное:
# повысили налоги. А значит, повысились и цены на фрукты, на целых 8%!
#
# Реализуйте код, который добавляет в список goods ещё один список с новым фруктом и ценой (это запрашивается у пользователя),
# а затем увеличивает цены всех фруктов на 8%.

goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]

fruit_name = input('Новый фрукт: ')
price = int(input('Цена: '))

goods.append([fruit_name, price])
print('Новый ассортимент:', goods)

for good in goods:
    good[1] = round(good[1] * 1.08, 2)

print('Новый ассортимент с увеличенной ценой:', goods)



****************************************
# Дан вот такой список со списками:
# matrix = [[1, 2 ,3], [4, 5, 6], [7, 8, 9]]
# Реализуйте программу, которая выводит элементы этого списка в виде привычной нам матрицы.
#
# Результат работы программы:
#
# 1 2 3
# 4 5 6
# 7 8 9

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
for i in matrix:
    for num in i:
        print(num, end=' ')
    print()

****************************************
# В олимпиаде по программированию участвует N человек, в списке участников они обозначаются под номерами 1, 2, 3, 4
# и так далее до N.Эти участники поделены на команды по  K человек. Напишите программу, которая принимает
# на вход количество участников и количество человек в каждой команде, затем генерирует список таких команд и
# выводит его на экран.
# Обеспечьте контроль ввода: в каждой команде должно быть ровно по K человек.
#
# Пример 1:
# Кол - во участников: 12
# Кол - во человек в команде: 4
#
# Общий список команд: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
#
# Пример 2:
# Кол - во участников: 12
# Кол - во человек в команде: 5
#
# 12 участников невозможно поделить на команды по 5 человек!

all_members = int(input('Кол-во участников: '))
team_members = int(input('Кол-во человек в команде: '))
team_list = []
teams = all_members % team_members

if teams == 0:
    flag = True
else:
    print(all_members, 'участников невозможно поделить на команды по', team_members, 'человек!')


if flag:
    num = 1
    for _ in range(all_members // team_members):
        team_list.append(list(range(num, team_members + num)))
        num += team_members
    print('Общий список команд: ', team_list)

****************************************
# При работе с сервером мы кодируем сообщение и отправляем его в виде пакетов информации.
# Их количество равно N. Допустим, каждый пакет содержит четыре числа, каждое из которых равно нулю или единице.
# Эти числа называются битами. Иногда в кодировке сообщения встречаются ошибки, и в пакете эта ошибка обозначается числом -1.
# Если таких ошибок не больше одной, то этот пакет мы целиком добавляем в список для декодирования, а иначе отбрасываем.
#
# Напишите программу, которая будет обрабатывать полученные пакеты и выведет на экран итоговое сообщение для декодирования,
# а также количество ошибок в нём и количество необработанных пакетов.

all_packets = int(input('Количество пакетов: '))

packets_list = []
lost_packets = 0
for packet in range(all_packets):
    temp = []
    print('\nПакет номер', packet + 1)
    for byte in range(4):
        print(byte + 1, 'бит: ', end='')
        byte_input = int(input())
        temp.append(byte_input)
    if temp.count(-1) <= 1:
        packets_list.extend(temp)
    else:
        print('Много ошибок в пакете!')
        lost_packets += 1

print('Полученное сообщение:', packets_list)
print('Количество ошибок в сообщении:', packets_list.count(-1))
print('Количество потерянных пакетов:', lost_packets)

****************************************
# В одной компании наступили «тёмные времена», и сотрудников стали сокращать.
# Зарплаты сотрудников хранятся в списке из N этих самых зарплат.
# Зарплаты уже уволенных сотрудников обозначаются в списке числом 0.
#
# Напишите программу, которая запрашивает у пользователя количество сотрудников и их зарплаты,
# затем удаляет все элементы списка со значением 0 и выводит в консоль, сколько сотрудников осталось, а также их зарплаты.
# Дополнительный список использовать нельзя.

workers = int(input('Количество сотрудников: '))
salary_list = []

for worker in range(1, workers + 1):
    print('Зарплата', worker, 'сотрудника: ', end='')
    salary = int(input())
    salary_list.append(salary)

salary_list.remove(0)
print('Осталось сотрудников:', len(salary_list), '\nЗарплаты:', salary_list)
print('Максимальная зарплата:', max(salary_list))
print('Минимальная зарплата:', min(salary_list))

****************************************
nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]],
             [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

result = [j for i_num in range(len(nice_list))
              for i in range(len(nice_list[i_num]))
              for j in nice_list[i_num][i]]

print('Ответ:', result)

****************************************
# Нашему другу заказали написать программу, которая анализирует цены на бирже.
# Она получает этот пакет данных, но делать что-либо с ним нельзя.
# Для нормальной работы аналитической программы берётся новый список, который равен тому, что пришло.
# Затем идёт работа с новым списком: если есть отрицательные цены, то программа их зануляет и в конце выводит на экран,
# сколько денег мы по итогу потеряли. Получился вот такой код:
#
# original_prices = [-12, 3, 5, -2, 1]
# new_prices = original_prices
# for i in range(len(original_prices)):
#     if new_prices[i] < 0:
#         new_prices[i] = 0
#
# print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))
#
# Однако при таких входных данных программа почему-то работает неправильно: она выводит ответ 0, когда правильный ответ 14.
# Помогите другу исправить программу, а также сделайте так, чтобы список цен генерировался случайно (диапазон можно выбрать любой).

import random

original_prices = [random.randint(-5, 5) for _ in range(random.randint(1, 10))]
# original_prices = [-12, 3, 5, -2, 1]

new_prices = original_prices[:]
for i in range(len(original_prices)):
    if new_prices[i] < 0:
        new_prices[i] = 0

print('Оригинальные цены', original_prices)
print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))

****************************************
# вытащить вложенные списки в один общий список

nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

# списковая сборка:
output = [j for each_list in nice_list for each_list2 in each_list for j in each_list2]

# обычный цикл:
# for i_num in range(len(nice_list)):
#     for i in range(len(nice_list[i_num])):
#         for j in nice_list[i_num][i]:
#             nice_list3.append(j)


print('Итог:', output)


****************************************
# Задача 1. Гласные буквы
# Что нужно сделать
#
# Команде лингвистов понравилось качество ваших программ, и они решили заказать у вас функцию для анализатора текста,
# которая создавала бы список гласных букв текста, а заодно считала бы их количество.
# Напишите программу, которая запрашивает у пользователя текст и генерирует список из гласных букв этого текста
# (сама строка вводится на русском языке). Выведите в консоль сам список и его длину.
#
# Пример:
# Введите текст: Нужно отнести кольцо в Мордор!
#
# Список гласных букв: ['у', 'о', 'о', 'е', 'и', 'о', 'о', 'о', 'о']
# Длина списка: 9

def vowels(words):
    words_list = ['а', 'у', 'о', 'ы', 'и', 'э', 'я', 'ю', 'ё', 'е', 'А', 'У', 'О', 'Ы', 'И', 'Э', 'Я', 'Ю', 'Ё', 'Е']
    result = [i_words for i_words in words if i_words in words_list] #  символ для символа в тексте (words) если
                                                                     # символ встречается в списке (words_list) то добавить в список result
    return result


words = [word for word in input('Введите текст: ')]
print(vowels(words))

****************************************
# Пользователь вводит целое число N. Напишите программу, которая генерирует список из N чисел,
# на чётных местах в нём стоят единицы, а на нечётных — числа, равные остатку от деления своего номера на 5.
#
# Пример:
# Введите длину списка: 10
# Результат: [1, 1, 1, 3, 1, 0, 1, 2, 1, 4]
# numbers = [1 if num % 2 == 0 else num % 5 for num in range(len_numbers)]
#  если индекс числа четный, то равен 1, иначе индекс числа % 5 в длине списка 1, 10

len_numbers = int(input('Введите длину списка: '))
numbers = [1 if num % 2 == 0
           else num % 5
           for num in range(len_numbers)]

print(numbers)

****************************************
# Пользователь вводит числа A и B. Напишите программу, которая генерирует два списка:
# в первом лежат кубы чисел в диапазоне от А до В, во втором — квадраты чисел в этом же диапазоне.
# Выведите списки на экран. Для генерации используйте list comprehensions (как и в следующих задачах).
#
# Пример:
#
# Левая граница: 5
# Правая граница: 10
#
# Список кубов чисел в диапазоне от 5 до 10: [125, 216, 343, 512, 729, 1000]
# Список квадратов чисел в диапазоне от 5 до 10: [25, 36, 49, 64, 81, 100]

start = int(input('Левая граница: '))
stop = int(input('Правая граница: '))

cube_list = [x ** 3 for x in range(start, stop + 1)]
square_list = [x ** 2 for x in range(start, stop + 1)]

print('Список кубов чисел в диапазоне от', start, 'до', stop, cube_list)
print('Список квадратов чисел в диапазоне от', start, 'до', stop, square_list)

****************************************
# У нас есть вот такой список цен на некоторые товары из магазина:
# original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
#
# В этом списке также хранятся цены на товары, которые уже давно не продаются.
# По какой-то причине система, вместо того чтобы их занулить, просто приписала к ним минус. Нам нужно это исправить.
# Напишите программу, которая генерирует новый список из первого списка, заменяя все отрицательные числа на ноль.
#
# Результат:
# [1.25, 0, 10.22, 3.78, 0, 1.16]

original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]

new_prices = [(i_num if i_num > 0 else 0)
              for i_num in original_prices]

print(new_prices)

****************************************
# как найти индекс символа из списка!

result = input('Введите строку: ')

# result = ['g', 'h', 'b', 'd', 'h', 'n', 'h']
answer = [i_words for i_words in range(len(result)) if result[i_words] == 'h']

print('Развернутая последовательность между первым и последним h:', result[max(answer) - 1:min(answer):-1])

****************************************
# Мы продолжаем пробовать себя в качестве разработчика игр. Теперь нужно написать небольшую логику поведения некоторых отрядов,
# а также их урон. Есть два отряда, в каждом по 10 монстров. В первом отряде у каждого монстра урон абсолютно случайный
# и колеблется от 50 до 80, а во втором — от 30 до 60. Оба отряда вместе напали на третий, также из 10 юнитов.
# Юнит третьего отряда погибает, если сумма урона от двух монстров больше 100.
#
# Напишите программу, которая генерирует случайные значения в первых двух списках в заданных диапазонах,
# а также генерирует список, состоящий из фраз «Погиб» или «Выжил». Выведите все списки на экран.
#
# Пример:
#
# Урон первого отряда: [77, 75, 76, 77, 76, 73, 57, 67, 76, 52]
# Урон второго отряда: [53, 51, 31, 60, 49, 37, 31, 60, 37, 47]
# Состояние третьего отряда: ['Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Выжил', 'Погиб', 'Погиб', 'Выжил']

import random

units_1 = [random.randint(50, 80) for _ in range(10)]
units_2 = [random.randint(30, 60) for _ in range(10)]
units_3_condition = [('Погиб' if units_1[i_damage] + units_2[i_damage] > 100
                      else 'Выжил')
                     for i_damage in range(10)]


print('Урон первого отряда:', units_1)
print('Урон Второго отряда:', units_2)
print('Состояние третьего отряда:', units_3_condition)
****************************************
# Дан список цен на пять товаров с точностью до копейки. Так как экономика даёт о себе знать, мы спрогнозировали,
# что через год придётся повышать цены на X процентов, а ещё через один год — ещё на Y процентов.
# Напишите программу, которая получает на вход список цен на товары (вещественные числа,
# список генерируется также с помощью list comprehensions) и выводит в одну строку общую сумму стоимости товаров за каждый год.
#
# Пример:
# Цена на товар: 1.09
# Цена на товар: 23.56
# Цена на товар: 57.84
# Цена на товар: 4.56
# Цена на товар: 6.78
# Повышение на первый год: 0
# Повышение на второй год: 10
# Сумма цен за каждый год: 93.83 93.83 103.22

def get_percent_price(percent, price):
    return round(price * (1 + percent / 100), 2)


price_now = [float(input('Цена на товар:')) for _ in range(5)]

first_percent = int(input('Повышение на первый год: '))
second_percent = int(input('Повышение на второй год: '))

price_first = [get_percent_price(first_percent, i_price) for i_price in price_now]
price_second = [get_percent_price(second_percent, i_price) for i_price in price_first]

print('Сумма цен за каждый год:', round(sum(price_now), 2), round(sum(price_first), 2), round(sum(price_second), 2))

****************************************
# улучшение кода

def is_palindrome(num_list):
    reverse_list = num_list[::-1]
    if num_list == reverse_list:
        return True
    else:
        return False

total_num = int(input('Кол-во чисел: '))
number_list = []
answer = []

for num in range(total_num):
    num = int(input('Число: '))
    number_list.append(num)

for i_num in range(0, len(number_list)):
    if is_palindrome(number_list[i_num:len(number_list)]):
        answer = number_list[:i_num]
        answer.reverse()
        print('Последовательность:', number_list)
        if len(answer) == 0:
            print('Уже является палиндромом!')
            break
        print('Нужно приписать чисел:', len(answer))
        print('Сами числа:', answer)
        break

****************************************
# Илья решил безобидно подшутить над другом и написал программу для смартфона,
# которая при отправке сообщения удваивает каждый символ строки и заодно к каждому удвоенному добавляет ещё один дополнительный.
#
# Пользователь вводит строку и дополнительный символ. Напишите программу, которая генерирует два списка:
# в первом списке каждый элемент — удвоенная буква первой строки, во втором списке каждый элемент —
# конкатенация элемента первого списка и дополнительного символа.
#
# Пример:
# Введите строку: привет
# Введите дополнительный символ: !
#
# Список удвоенных символов: ['пп', 'рр', 'ии', 'вв', 'ее', 'тт']
# Склейка с дополнительным символом: ['пп!', 'рр!', 'ии!', 'вв!', 'ее!', 'тт!']

user_input = input('Введите строку: ')
new_symb = input('Введите дополнительный символ: ')

user_list = [x * 2 for x in user_input]
new_user_list = [x + new_symb for x in user_list]

print('Список удвоенных символов:', user_list)
print('Склейка с дополнительным символом:', new_user_list)

****************************************
# user_list = [int(input('Введи число: ')) for _ in range(2)]

start = int(input('Левая граница: '))
stop = int(input('Правая граница: '))

result = [i_num for i_num in range(start, stop + 1) if i_num % 2 == 0]

print(result)

****************************************
# Дан список чисел:
# nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]
#
# Напишите программу, которая выводит на экран шесть ответов:
# В первой строке выведите первые пять элементов списка.
# Во второй строке выведите весь список, кроме последних двух элементов.
# В третьей строке выведите все элементы с чётными индексами.
# В четвёртой строке выведите все элементы с нечётными индексами.
# В пятой строке выведите все элементы в обратном порядке.
# В шестой строке выведите все элементы списка через один в обратном порядке, начиная с последнего.
# Для решения используйте только срезы (и без функции len).
#
# Результат:
# [48, -10, 9, 38, 17]
# [48, -10, 9, 38, 17, 50, -5, 43]
# [48, 9, 17, -5, 46]
# [-10, 38, 50, 43, 12]
# [12, 46, 43, -5, 50, 17, 38, 9, -10, 48]
# [12, 43, 50, 38, -10]

nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]

print('Исходный список:', nums, '\n')
print('Первые пять элементов списка:', nums[:5])
print('Список без последних двух элементов:', nums[0:8])
print('Элементы с четными индексами', nums[::2])
print('Элементы с нечетными индексами', nums[1::2])
print('Элементы в обратном порядке:', nums[::-1])
print('Элементы в обратном порядке через один:', nums[::-2])

****************************************
# Дан список из N чисел, а также числа А и В (можно сгенерировать случайно, при этом А < B).
# Напишите программу, которая удаляет элементы списка с индексами от А до В.
# Не используйте дополнительные переменные и методы списков.

import random

numbers = [random.randint(1, 10) for _ in range(random.randint(5, 10))]
a = random.randint(0, len(numbers) - 2)
b = random.randint(a + 1, len(numbers) - 1)

print('Список', numbers, 'Удаляем элементы с индексами от', a, 'до', b)
numbers[a:b + 1] = []

print(numbers)

****************************************
def caesar_cipher(string, shift):
    char_list = [(alphabet[(alphabet.index(sym) + shift) % 33] if sym != ' ' else ' ') for sym in string]
    new_str = ''
    for i_char in char_list:
        new_str += i_char
    return new_str


alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
user_list = input('Введите сообщение: ')
shift = int(input('Введите сдвиг: '))

result = caesar_cipher(user_list, shift)
print('Зашифрованное сообщение:', result)

****************************************
# Задача 1. Заказ
# После того, как человек сделал заказ в интернет-магазине, ему на почту приходит оповещение с его именем и номером заказа.
# Напишите программу, которая получает на вход имя и код заказа, а затем выводит на экран соответствующее сообщение.
# Для решения используйте строковый метод format.
#
# Пример:
# Имя: Иван
# Номер заказа: 10948
#
# Здравствуйте, Иван! Ваш номер заказа: 10948. Приятного дня!

user_name = input('Имя клиента: ')
order_number = int(input('Номер заказа: '))

print('Здравствуйте, {name}! Ваш номер заказа: {order}. Приятного дня!'.format(name=user_name, order=order_number))
# или
print('Здравствуйте, {0}! Ваш номер заказа: {1}. Приятного дня!'.format(user_name, order_number))

****************************************
# Задача 1. Улучшенная лингвистика 2
# Усовершенствуйте старую программу:
# У нас есть список из трёх слов, которые вводит пользователь. Затем вводится сам текст произведения,
# который вводится уже в одну строку. Напишите программу, которая посчитает,
# сколько раз слова пользователя встречаются в тексте.

# count = [0, 0, 0]
# user_input = input('Введите три слова через пробел: ')
# user_words = user_input.split()
# words = input('Введите текст произведения: ')
# words_list = words.split()
#
# for index in range(3):
#     for word in words_list:
#         if user_words[index] == word:
#             count[index] += 1
#
# print('Подсчет слов в тексте:\n')
# for i in range(3):
#     print(user_words[i], ':', count[i])

# как надо было сделать
words = [input("Введите слово: ") for _ in range(3)]
text = input("Введите текст: ")
words_count = [text.count(word) for word in words]

print(words_count)

****************************************
# Задача 1. Шифр Цезаря 2
# Мы уже писали программу, которая шифрует строку с помощью шифра Цезаря.
# Напомним, что в таком способе шифрования каждая буква заменяется на следующую по алфавиту через K позиций по кругу.
# Напишите (модифицируйте) программу, которая реализует этот алгоритм шифрования. Не используйте конкатенацию и сделайте так,
# чтобы текст был в одном регистре.

def caesar_cipher(string, shift):
    char_list = [(alphabet[(alphabet.index(sym) + shift) % 33] if sym != ' ' else ' ') for sym in string]
    new_str = ''.join(char_list)
    return new_str


alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
user_list = input('Введите сообщение: ').lower()
shift = int(input('Введите сдвиг: '))

result = caesar_cipher(user_list, shift)
print('Зашифрованное сообщение:', result)


# print(ord("а"), ord("я"), ord("ё"), chr(1104))
#
# text = input("Введите текст: ")
# delta = int(input("Введите сдвиг: "))
# alphabet = [chr(index) for index in range(ord("а"), ord("я") + 1)]  # заполняем список буквами алфавита
# # Думаем над структурой алгоритма: [вариант_1 если условие_1 иначе вариант_2 for буква in текст]
# new_text = [alphabet[(alphabet.index(letter) + delta) % len(alphabet)] if letter in alphabet else letter for letter in text.lower()]
# print(''.join(new_text))

****************************************
# Задача 2. Бабушка
# У одной бабушки, когда та переписывается с внуком, постоянно залипает кнопка пробела.
# В итоге между словами получаются огромные расстояния. Внук не знает как это поправить в самом телефоне, поэтому обратился к вам за помощью.
#
# Пользователь вводит строку. Напишите программу, которая преобразовывает в этой строке все идущие подряд пробелы в один и выводит результат на экран.

grandma_input = input('Введите текст: ').split()

result = ' '.join(grandma_input)
print(result)

****************************************
# Задача 2. Долги
# Один наш друг занял у нас определённую сумму денег и всё никак не может их вернуть.
# А деньги нам нужны. Поэтому мы решили написать небольшой скрипт-напоминалку, который, возможно, разбудит его совесть.
#
# Напишите программу, которая получает на вход имя и долг, а затем выводит на экран сообщение,
# где имя повторяется несколько раз (и долг, возможно, тоже). Используйте числа в названиях ключей.
#
# Пример:
# Введите имя: Том
# Введите долг: 100
# Том! Том, привет! Как дела, Том? Где мои 100 рублей? Том!


user_name = input('Введите имя: ')
user_debt = int(input('Введите долг: '))

print('{0}! {0}, привет! Как дела, {0}? Где мои бабки, '
      '{0}? Когда вернешь {1} рублей, пёс?'.format(user_name, user_debt))

****************************************
# Задача 2. Путь к файлу
# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта
# часто используются абсолютные пути файлов, которые необходимо проверять.
# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные: диск и расширение файла.
# Напишите программу, которая проверяет корректность этого пути.
#
# Пример:
# Путь к файлу: C:/user/docs/folder/new_file.txt
# На каком диске должен лежать файл: C
# Требуемое расширение файла: .txt
# Путь корректен!

path = 'C:/user/docs/folder/new_file.txt'
print('Путь к файлу:', path)
disk_name = input('На каком диске должен лежать файл: ')
file_name = input('Требуемое расширение файла: ')



if not path.endswith(file_name):
    print('Ошибка расширения файла!')
elif not path.startswith(disk_name):
    print('Ошибка. Не верно указан диск!')
else:
    print('Путь корректен!')

****************************************
# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта часто используются
# абсолютные пути файлов, которые необходимо проверять.
# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные:
# диск и расширение файла. Напишите программу, которая проверяет корректность этого пути.
#
# Пример:
# Путь к файлу: C:/user/docs/folder/new_file.txt
# На каком диске должен лежать файл: C
# Требуемое расширение файла: .txt
# Путь корректен!

user_name = input('Введите имя пользователя: ')
file_name = input('Введите имя файла: ')

path = 'C:/{user}/docs/folder/{new_file}'.format(
    user=user_name,
    new_file=file_name
)

if not path.endswith('.txt'):
    print('Ошибка расширения файла!')
elif not path.startswith('C:/'):
    print('Ошибка. Не верно указан диск!')
else:
    print('Путь к файлу:', path)

****************************************
# Задача 3. IP-адрес
# IP-адрес компьютера состоит из 4 чисел, разделённых точкой. Каждое число находится в диапазоне от 0 до 255 (включительно).
#
# Пример правильного адреса: 192.168.1.0
# Пример неправильного адреса: 192.168.300.0
#
# Напишите программу, которая получает на вход 4 числа и выводит на экран IP-адрес.
# Используйте переменную ip_address в качестве шаблона. Обеспечьте контроль ввода.

# for num in range(4):
#     ip_address = ''
#     print('Ведите число: ')
#     num1 = int(input())
#     if num1 > 255:
#         print('Число не может быть больше "255"')
#         num = int(input())
#
#     num += 1
# print(ip_address)

ip_address = '{0}.{1}.{2}.{3}'
count = 0
numbers = []
while count < 4:
    new_number = int(input('Введите число:'))
    if 0 < new_number <= 255:
        numbers.append(new_number)
        count += 1
    else:
        print('Ошибка ввода! Цифра не может быть больше "255"')

print(ip_address.format(numbers[0], numbers[1], numbers[2], numbers[3]))

****************************************
# Задача 3. Разделители символов
# Человек хочет сделать рассылку поздравлений для определённого списка людей. Поздравления для разных людей он хочет написать по-разному.
#
# Напишите программу, которая запрашивает у пользователя:
# Шаблон поздравления (туда вставляется ФИ и возраст)
# ФИ людей (в одну строку, разделяются запятой)
# Возраст каждого человека (в одну строку через пробел)
# В конце  программа выводит поздравления и всех именинников в одну строку вместе с их возрастом.
#
# Пример:
# Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: С днём рождения, {name}! С {age}-летием тебя!
# Список людей через запятую: Иван Иванов, Петя Петров, Лена Ленова
# Возраст людей через пробел: 20 30 18
#
# С днём рождения, Иван Иванов! С 20-летием тебя!
# С днём рождения, Петя Петров! С 30-летием тебя!
# С днём рождения, Лена Ленова! С 18-летием тебя!
## Именинники: Иван Иванов 20, Петя Петров 30, Лена Ленова 18

while True:
    greetings = input('Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: ')
    if '{name}' and '{age}' in greetings:
        break
    print('Отсутствует одна или две конструкции')

guests = input('Список людей через запятую: ').split(', ')
age = input('Возраст людей через пробел: ')
age_list = age.split()

for i_man in range(len(guests)):
    print(greetings.format(name=guests[i_man], age=age_list[i_man]))

# для вывода именинников в одну строку
people = [
    ' '.join([guests[i_man], age_list[i_man]])
    for i_man in range(len(guests))
]

people_str = ', '.join(people)
print('Именинники:', people_str)

****************************************
# Дана структура, которая содержит описание одного из членов семьи (имя, фамилия, хобби, сколько лет и дети):
# family_member = {
#     "name": "Jane",
#     "surname": "Doe",
#     "hobbies": ["running", "sky diving", "singing"],
#     "age": 35,
#     "children": [
#         {
#             "name": "Alice",
#             "age": 6
#         },
#         {
#             "name": "Bob",
#             "age": 8
#         }
#     ]
# }
# # Напишите программу, которая реализует такую структуру: имя, фамилия, хобби, кол-во лет и дети.
# Затем, с помощью метода get и установки значения по умолчанию, проверьте есть ли ребёнок с именем Bob.
# Затем в отдельную переменную получите фамилию этого ребёнка и выведите её на экран. Если у него нет фамилии, то получите значение ‘Nosurname’.

family_member = {
    "name": "Jane",
    "surname": "Doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "name": "Alice",
            "age": 6
        },
        {
            "name": "Bob",
            "age": 8
        }
    ]
}


children_dict = dict()
for child in family_member['children']:
    children_dict[child['name']] = child['age']

search_bob = children_dict.get('Bob', {})
if search_bob:
    print('Bob найден')
else:
    print('Bob-a нет!')

surname = children_dict.get('surname', {})
if surname:
    print(surname)
else:
    print('Nosurname')

****************************************
a = [[1, 2, [3]], [1], 3]
l = [x for lst in a for x in lst]
print(l)
****************************************
# Напишите программу, которая считает количество знаков пунктуации в символьной строке.
# К знакам пунктуации относятся символы из набора ".,;:!?". Набор должен храниться в виде множества.
#
# Пример:
# Введите строку: Я! Есть. Грут?! Я, Грут и Есть.
# Количество знаков пунктуации: 6

text = input('Введите строку: ')
punct = set(".,;:!?")

count = 0
for i in text:
    if i in punct:
        count += 1
print('Количество знаков пунктуации:', count)
print(punct)
****************************************
# У мебельного магазина есть два склада, на которых хранятся разные категории товаров по парам «название — количество»:
#
# small_storage = {
#     'гвозди': 5000,
#     'шурупы': 3040,
#     'саморезы': 2000
# }
#
# big_storage = {
#     'доски': 1000,
#     'балки': 150,
#     'рейки': 600
# }
#
# Магазин решил сократить аренду и скинуть все товары в большой склад (big_storage). После этого нас попросили реализовать поиск по товарам.
# Напишите программу, которая объединяет оба словаря в один (в big_storage), затем запрашивает у пользователя название товара и выводит
# на экран его количество. Если такого товара нет, то выводит об этом ошибку. Для получения значения используйте метод get.

small_storage = {
    'гвозди': 5000,
    'шурупы': 3040,
    'саморезы': 2000
}

big_storage = {
    'доски': 1000,
    'балки': 150,
    'рейки': 600
}

big_storage.update(small_storage)

while True:
    input_item = input('Введите название товара: ')
    for item in big_storage.keys():
        if item == input_item:
            print('Количество товара', item, '-', big_storage.get(item))
            break
    else:
        print('Ошибка! Такого товара в базе нет!')


# решение от курса:
# big_storage.update(small_storage)
#
# user_item = input("Введите название нужного товара: ")
# if big_storage.get(user_item, None):
#     print(big_storage[user_item])
# else:
#     print("Такого товара нет!")

****************************************
# На вход программе поступает целое число num. Напишите программу создания словаря,
# который включает в себя ключи от 1 до num, а значениями соответствующего ключа будет значение ключа в квадрате.
#
# Пример:
# Введите целое число: 5
#
# Результат: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

num = int(input('Введите целое число: '))

num_dict = dict()

for numb in range(1, num + 1):
    num_dict[numb] = numb ** 2

print(num_dict)

****************************************
# Дана структура, которая содержит описание одного из членов семьи (имя, фамилия, хобби, сколько лет и дети):
# family_member = {
#     "name": "Jane",
#     "surname": "Doe",
#     "hobbies": ["running", "sky diving", "singing"],
#     "age": 35,
#     "children": [
#         {
#             "name": "Alice",
#             "age": 6
#         },
#         {
#             "name": "Bob",
#             "age": 8
#         }
#     ]
# }
# # Напишите программу, которая реализует такую структуру: имя, фамилия, хобби, кол-во лет и дети.
# Затем, с помощью метода get и установки значения по умолчанию, проверьте есть ли ребёнок с именем Bob.
# Затем в отдельную переменную получите фамилию этого ребёнка и выведите её на экран. Если у него нет фамилии, то получите значение ‘Nosurname’.

family_member = {
    "name": "Jane",
    "surname": "Doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "name": "Alice",
            "age": 6
        },
        {
            "name": "Bob",
            "age": 8
        }
    ]
}


children_dict = dict()
for child in family_member['children']:
    children_dict[child['name']] = child['age']

search_bob = children_dict.get('Bob', {})
if search_bob:
    print('Bob найден')
else:
    print('Bob-a нет!')

surname = children_dict.get('surname', {})
if surname:
    print(surname)
else:
    print('Nosurname')

****************************************
# Есть готовый словарь игроков, у каждого игрока есть имя, команда, в которой он играет, а также его текущий статус,
# в котором указано, отдыхает он, тренируется или путешествует:
#
# players_dict = {
#     1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
#     2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
#     3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
#     4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
#     5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
#     6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
#     7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
#     8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
# }
#
# Напишите программу, которая выводит на экран вот такие данные в разных строчках:
# Все члены команды из команды А, которые отдыхают.
# Все члены команды из группы B, которые тренируются.
# Все члены команды из команды C, которые путешествуют.

players_dict = {
    1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
    2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
    3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
    4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
    5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
    6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
    7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
    8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
}

rest_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'A' and player['status'] == 'Rest'
]

traning_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'B' and player['status'] == 'Training'
]

travel_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'C' and player['status'] == 'Travel'
]

print(rest_players)
print(traning_players)
print(travel_players)

****************************************
# Мы работаем в одной небольшой торговой компании, где все данные о продажах фруктов за год сохранены в словаре в виде пар «название фрукта — доход»:
#
# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'grapefruit': 300.40,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,
# }
#
# В компании наступил небольшой кризис, и нам поручено провести небольшой анализ дохода.
# Напишите программу, которая находит общий доход, затем выводит фрукт с минимальным доходом и удаляет его из словаря. Выведите итоговый словарь на экран.
# Результат работы программы:
# Общий доход за год составил 35419.34 рублей
# Самый маленький доход у grapefruit. Он составляет 300.4 рублей
# Итоговый словарь: {'apple': 5600.2, 'orange': 3500.45, 'banana': 5000.0, 'bergamot': 3700.56, 'durian': 5987.23, 'peach': 10000.5, 'pear': 1020.0, 'persimmon': 310.0}

incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'grapefruit': 300.40,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00,
}

min_value = min(incomes.values())
min_key = ''
for val in incomes:
    if incomes[val] == min_value:
        min_key = val

print('Оющий доход за год составил', sum(incomes.values()), 'рублей')
incomes.pop(min_key)
print('Самый маленький доход у', min_key, '. Он составляет', min_value, 'рублей')
print('Итоговый словарь:', incomes)

****************************************
# На одном семинаре по теории множеств нужно показать наглядный пример, как эти множества работают. Для начала было сгенерировано два набора чисел:
# nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
# nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]
#
# Вас попросили написать программу, которая будет наглядно демонстрировать работу со множествами с помощью этих чисел.
# Напишите программу, которая преобразует списки во множества и убирает повторяющиеся элементы.
# Затем удаляет минимальный элемент из каждого множества и добавляет туда случайное число в диапазоне от 100 до 200. Затем выполните следующие действия со множествами:
#
# Вывести все элементы множеств (объединение).
# Вывести только общие элементы (пересечение).
# Вывести элементы, входящие в nums_2, но не входящие в nums_1.
#
# Пример результата:
# 1-е множество: {1, 2, 3, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 26, 27, 29}
# 2-е множество: {1, 5, 7, 8, 9, 11, 12, 13, 15, 16, 19, 21, 22, 23, 24, 29, 30}
#
# Минимальный элемент 1-го множества: 1
# Минимальный элемент 2-го множества: 1
#
# Случайное число для 1-го множества: 126
# Случайное число для 2-го множества: 169
#
# Объединение множеств: {2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 169, 126}
# Пересечение множеств: {7, 8, 11, 12, 13, 15, 16, 19, 21, 22, 24, 29}
# Элементы, входящие в nums_2, но не входящие в nums_1: {5, 9, 169, 23, 30}
import random

nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]

nums_1 = set(nums_1)
nums_2 = set(nums_2)
min_nums_1 = min(nums_1)
min_nums_2 = min(nums_2)
random_min_nums_1 = random.randint(100, 200)
random_min_nums_2 = random.randint(100, 200)

print('Первое множество:', nums_1)
print('Второе множество:', nums_2)
print()
print('Минимальный элемент 1-го множества:', min_nums_1)
print('Минимальный элемент 2-го множества:', min_nums_2)
print()
print('Случайное число для 1-го множества:', random_min_nums_1)
print('Случайное число для 2го множества:', random_min_nums_2)

nums_1.remove(min_nums_1)
nums_2.remove(min_nums_2)
nums_1.add(random_min_nums_1)
nums_2.add(random_min_nums_2)
print('Объединение множеств:', nums_1 | nums_2)
print('Пересечение множеств:', nums_1 & nums_2)
print('Элементы, входящие в nums_2, но не входящие в nums_1:', nums_2 - nums_1)

****************************************
# Пользователь вводит фамилию, имя студента, город проживания, вуз, в котором он учится, и все его оценки.
# Всё вводится в одну строку через пробел. Напишите программу, которая по этой информации составит словарь и выведет его на экран.
#
# Пример:
# Введите информацию о студенте через пробел (имя, фамилия, город, место учёбы, оценки): Илья Иванов Москва МГУ 5 4 4 4 5
#
# Результат:
# Имя - Илья
# Фамилия - Иванов
# Город - Москва
# Место учёбы - МГУ
# Оценки - [5, 4, 4, 4, 5]

student = input(
    'Введите информацию о студенте через пробел\n'
    '(имя, фамилия, город, место учебы, оценки): '
)

student_list = student.split()

student_dict = dict()

for i_list in student_list:
    student_dict['Имя'] = student_list[0]
    student_dict['Фамилия'] = student_list[1]
    student_dict['Город'] = student_list[2]
    student_dict['Место учебы'] = student_list[3]
    student_dict['Оценки'] = []
for i_grade in student_list[4:]:
    student_dict['Оценки'].append(int(i_grade))

for i_info in student_dict:
    print(i_info, '-', student_dict[i_info])

****************************************
# Лингвистам нужно собрать данные о частоте букв в тексте, исходя из этих данных будет строиться гистограмма частоты букв.
# Напишите программу, которая получает сам текст и считает, сколько раз в строке встречается каждый символ.
# На экран нужно вывести содержимое в виде таблицы, отсортированное по алфавиту, а также максимальное значение частоты.
#
# Пример:
# Введите текст: Здесь что-то написано
#   : 2
# - : 1
# З : 1
# а : 2
# д : 1
# е : 1
# и : 1
# н : 2
# о : 3
# п : 1
# с : 2
# т : 2
# ч : 1
# ь : 1
# Максимальная частота: 3

def histograme(string):
    text_dict = dict()
    for symbol in string:
        if symbol in text_dict.keys():
            text_dict[symbol] += 1
        else:
            text_dict[symbol] = 1

    return text_dict


text = input('Введите текст: ').lower()
hist = histograme(text)

for key in sorted(hist.keys()):
    print(key, ':', hist[key])

print('Максимальная частота', max(hist.values()))  # метод


****************************************
# Энтузиаст Степан, купив новый телефон, решил написать для него свою собственную операционную систему.
# И, конечно же, первое, что он захотел в ней реализовать, — это телефонная книга.
#
# Напишите программу, которая запрашивает у пользователя имя контакта и номер телефона, добавляет их в словарь и выводит
# на экран текущий словарь контактов. Запрос на добавление идёт бесконечно (но можно задать своё условие для завершения программы).
# Обеспечьте контроль ввода: если это имя уже есть в словаре, то выведите соответствующее сообщение.
#
# Пример:
# Текущие контакты на телефоне:
# <Пусто>
#
# Введите имя: Иван
# Введите номер телефона: 100200300
# # Текущие контакты на телефоне:
# Иван  100200300
#
# Введите имя: Лена
# Введите номер телефона: 8005555522
# # Текущие контакты на телефоне:
# Иван  100200300
# Лена  8005555522
#
# Введите имя: Иван
# Ошибка: такое имя уже существует.
# ...


contacts_dict = {}

while True:
    print('Текущие контакты на телефоне:')
    for i_cont in contacts_dict:
        print(i_cont, contacts_dict[i_cont])
    input_name = input('\nВведите имя: ')
    if input_name in contacts_dict:
        print('Ошибка: такое имя уже существует.')
    else:
        input_number = int(input('Введите номер телефона: '))
        contacts_dict[input_name] = input_number


****************************************
# Напишите программу, которая находит все различные цифры в символьной строке.
# Для решения используйте множество (цифры будут различные, и поиск во множестве намного быстрее, чем в списке).
# Подсказка: можно использовать вот такое сравнение '0'<=x<='9'
#
# Пример:
# Введите строку: ab1n32kz2
# Различные цифры строки: 123

user_input = set(input('Введите строку: '))
numbers = set()

for symb in user_input:
    if '0'<= symb <='9':
        numbers.add(symb)

print(''.join(numbers))

****************************************
# Заполните один кортеж десятью случайными целыми числами от 0 до 5 включительно.
# Также заполните второй кортеж числами от −5 до 0. Объедините два кортежа, создав тем самым третий кортеж.
# С помощью метода кортежа определите в нём количество нулей. Выведите на экран третий кортеж и количество нулей в нём.
words = ('нулей', 'ноль', 'нуля', 'нуля', 'нуля', 'нулей', 'нулей', 'нулей', 'нулей', 'нулей', 'нулей')

import random

numbers = (0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5)
negative_numbers = (-5, -4, -3, -2, -1, 0, -5, -4, -3, -2, -1, 0,)
one_tuple = tuple(random.sample(numbers, 10))
two_tuple = tuple(random.sample(negative_numbers, 10))
result_tuple = one_tuple + two_tuple

print('Первый кортеж', one_tuple)
print('Второй кортеж', two_tuple)
print('Третий кортеж {} \nв нем: {} {}'.format(result_tuple, result_tuple.count(0), words[result_tuple.count(0)]))

****************************************
# Какой-то нехороший человек решил подпортить жизнь frontend-разработчикам и добавил в код сайта символ ~ (тильда).
# Но программисты быстро решили эту проблему, пройдясь по всему коду маленькой программой.
#
# Пользователь вводит строку. Напишите программу, которая проходит по строке и выводит в консоль индексы символа ~.
# Для решения этой задачи (и остальных тоже) используйте функцию enumerate.
#
# Пример:
# Строка: so~mec~od~e
# Ответ: 2 6 9

str_input = input('Строка:')

for i_sym, sym in enumerate(str_input):
    if sym == '~':
        print(i_sym, end=' ')

# решение с list comprehension
result = [str(i_sym) for i_sym, sym in enumerate(str_input) if sym == '~']
print(('Ответ:'), ' '.join(result))

# решение с использованием функции (выводим индекс необходимого символа)
def get_indexes(where_to_search, what_to_search):
    return [str(index) for index, letter in enumerate(where_to_search) if letter == what_to_search]

# генератор кортежа из случайных чисел
def create_random_tuple(a, b, n):
    return tuple([random.randint(a, b) for _ in range(n)])
#  first = create_random_tuple(0, 5, 10) - создать кортеж из 10 случайных чисел от 0 до 5

print(('Ответ:'), ' '.join(get_indexes(str_input, '~')))

****************************************
# Задача 1. Кризис миновал
# Закупки грейпфрутов прекратились, и кризис в торговой компании закончился. И теперь можно вернуться к обыденным делам.
# Однако внезапно вы обнаружили, что старый скрипт, который выводит данные о фруктах, куда-то потерялся.
# Необходимо его восстановить.
#
# Дан словарь с парами «название фрукта — цена»:
# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,
# }
#
# Вывести на экран словарь в следующем виде:
# apple -- 5600.2
# orange -- 3500.45
# banana -- 5000.0
# bergamot -- 3700.56
# durian -- 5987.23
# peach -- 10000.5
# pear -- 1020.0
# persimmon -- 310.0
# Не используйте обращение по ключу словаря.

incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00,
}

for i_name, i_price in incomes.items():
   print('{name} -- {price}'.format(name=i_name, price=i_price))

****************************************
# В базе данных поликлиники хранятся паспортные данные людей. Хранение реализовано с помощью словаря,
# состоящего из пар «Серия и номер паспорта — фамилия и имя». Серия и номер — составной ключ,
# а фамилия и имя — составное значение.
#
# data = {
#     (5000, 123456): ('Иванов', 'Василий'),
#     (6000, 111111): ('Иванов', 'Петр'),
#     (7000, 222222): ('Медведев', 'Алексей'),
#     (8000, 333333): ('Алексеев', 'Георгий'),
#     (9000, 444444): ('Георгиева', 'Мария')
# }
#
# Реализуйте функцию, которая по номеру и серии паспорта выдаёт имя и фамилию человека.

data = {
    (5000, 123456): ('Иванов', 'Василий'),
    (6000, 111111): ('Иванов', 'Петр'),
    (7000, 222222): ('Медведев', 'Алексей'),
    (8000, 333333): ('Алексеев', 'Георгий'),
    (9000, 444444): ('Георгиева', 'Мария')
}

serial = int(input('Введите серию: '))
number = int(input('Введите номер: '))

passport = (serial, number)

if passport in data:
    print(data[passport])
else:
    print('Такого человека нет')

****************************************
# Андрей однажды уже писал функции для расчёта площади сферы и объёма шара.
# И теперь для своей курсовой работы ему пришлось связаться с цилиндрами.
#
# Пользователь вводит два значения: радиус и высоту. Напишите функцию для расчёта площади
# боковой поверхности цилиндра и его полной площади. Функция должна возвращать два эти значения.
# После этого в основной программе выводятся оба ответа в две строки.
#
# Площадь боковой поверхности (r — радиус, h — высота):
# side = 2pi * r * h
# Полная площадь (S — площадь круга):
# full = side + 2 * S
import math

def cylinder_s (r, h):
    r_side = 2 * math.pi * r * h
    r_full = r + 2 * math.pi * r ** 2

    return r_side, r_full


radius = float(input('Введите радиус: '))
height = float(input('Введите высоту: '))

r_side, r_full = cylinder_s(radius, height)

print('Площадь боковой поверхности:', round(r_side, 2))
print('Полная площадь:', round(r_full, 2))

****************************************
# Создайте два списка, в каждом из которых лежит 10 случайных букв алфавита (могут повторяться).
# Затем для каждого списка создайте словарь из пар «индекс — значение» и выведите оба словаря на экран.
#
# Подсказка: random
#
# Пример:
# Первый список: ['й', 'р', 'с', 'г', 'а', 'а', 'т', 'ж', 'е', 'к']
# Второй список: ['д', 'а', 'а', 'в', 'т', 'ж', 'р', 'б', 'й', 'р']
#
# Первый словарь: {0: 'й', 1: 'р', 2: 'с', 3: 'г', 4: 'а', 5: 'а', 6: 'т', 7: 'ж', 8: 'е', 9: 'к'}
# Второй словарь: {0: 'д', 1: 'а', 2: 'а', 3: 'в', 4: 'т', 5: 'ж', 6: 'р', 7: 'б', 8: 'й', 9: 'р'}

import random

def random_generator (symb, how_symb):
    result = list()
    for i in range(how_symb):
        result.append(random.choice(symb))
    return result


def get_index(text):
    result = dict()
    for index, sym in enumerate(text):
        result.update({index: sym})
    return result


symb = (
    'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о',
    'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я'
)

first_list = random_generator(symb, 10)
second_list = random_generator(symb, 10)
first_tuple = get_index(first_list)
second_tuple = get_index(second_list)

print('Первый список:', first_list)
print('Второй список:', second_list)
print('\nПервый словарь:', first_tuple)
print('Второй словарь:', second_tuple)

****************************************
# Задача 2. Сервер
# У вас есть данные о сервере, которые хранятся в виде вот такого словаря:
## server_data = {
#     "server": {
#         "host": "127.0.0.1",
#         "port": "10"
#     },
#     "configuration": {
#         "access": "true",
#         "login": "Ivan",
#         "password": "qwerty"
#     }
# }
## Напишите программу, которая выводит для пользователя эти данные так же красиво и понятно, как они представлены в словаре.
# Результат работы программы:
# server:
#     host: 127.0.0.1
#     port: 10
# configuration:
#     access: true
#     login: Ivan
#     password: qwerty

server_data = {
    "server": {
        "host": "127.0.0.1",
        "port": "10"
    },
    "configuration": {
        "access": "true",
        "login": "Ivan",
        "password": "qwerty"
    }
}

for i_keys, i_values in server_data.items():
    print('{key}:'.format(key=i_keys), end='\n')
    for j_keys, j_values in i_values.items():  # вместо "server_data[i_keys].items()" можно обратится напрямую к значению
        print('\t{j_keys}: {j_values}'.format(j_keys=j_keys, j_values=j_values))


****************************************
# Мы уже реализовывали телефонную книгу для Степана, однако её проблема была в том,
# что туда нельзя было добавить людей с одинаковыми именами. Надо это исправить.
#
# Напишите программу, которая запрашивает у пользователя имя контакта, фамилию и номер телефона,
# добавляет их в словарь и выводит на экран текущий словарь контактов. Словарь состоит из пар «Ф. И. — телефон»,
# где Ф. И. — это составной ключ. Запрос на добавление идёт бесконечно
# (но можно задать своё условие для завершения программы).
# Обеспечьте контроль ввода: если этот человек уже есть в словаре, то выведите соответствующее сообщение.

def print_phonebook(data):
    print('\nТелефонная книга:')
    for user in data:
        print(f'{user[0]} {user[1]}: {data[user]}')

phonebook = dict()
while True:
    first_name = input('\nВведите фамилию ("выход" чтобы закончить): ')
    if first_name != 'выход':
        second_name = input('Введите имя: ')
        contact = (first_name, second_name)
        user_number = int(input('Введите номер телефона: '))
        if contact not in phonebook:
            phonebook.update({contact: user_number})
            print_phonebook(phonebook)
        else:
            print('Такой контакт уже есть!')
    else:
        break

# решение от курса:
# contacts = {}
#
# while True:
#     name = input("Введите имя: ")
#     surname = input("Введите фамилию: ")
#     name_n_surname = (name, surname)
#     if name_n_surname not in contacts:
#         contacts[name_n_surname] = int(input("Введите номер телефона: "))
#     else:
#         print("Такой контакт уже есть!")
#     print(contacts)

****************************************
# Дан код, в котором должно происходить следующее: изначально есть кортеж из пяти чисел.
# Затем вызывается функция, которая получает на вход кортеж чисел, генерирует случайный индекс и случайное значение,
# а затем по этим индексу и значению меняет сам кортеж. Функция должна возвращать кортеж и случайное значение.
#
# В основном коде функция используется два раза, и на экран два раза выводится новый кортеж и случайное значение.
# Причём второй раз выводится сумма первого случайного значения и второго.
## Однако код, который вам дали, оказался нерабочим. Исправьте его в соответствии с описанием.
import random

def change(nums):
    index = random.randint(0, 4)
    value = random.randint(100, 1000)
    nums = list(nums)
    nums[index] = value
    return tuple(nums), value


my_nums = (1, 2, 3, 4, 5)
my_nums, rand_val = change(my_nums)
new_nums, new_rand_val = change(my_nums)

print(my_nums, rand_val)
print(new_nums, new_rand_val + rand_val)


****************************************
# Нашему другу дали задачу: «Есть словарь, в котором ключи — это числа от 0 до 4,
# а значения ключей — числа 0, 100, 144, 20 и 19 соответственно.
# Нужно написать программу, которая выводит список тех значений, # у которых ключ делится на 2.
# Причём программа должна быть в одну строчку.» Программа у друга работает,
# но её не приняли, так как в ней не используется правило «не повторяйся» — это когда части кода не повторяются.
# Помогите другу исправить решение задачи так, чтобы код в строчке не повторялся.
#
# Решение друга:
# print([{0: 0, 1: 100, 2: 144, 3: 20, 4: 19}[i_key] for i_key in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19} if i_key % 2 == 0])
# [0, 144, 19]

print([i_value for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items() if i_key % 2 == 0])

# result = list()
# for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items():
#     if i_key % 2 == 0:
#         result.append(i_value)
# print(result)

****************************************
# Один заказчик попросил нас написать небольшой скрипт для своих криптографических нужд.
# При этом он заранее предупредил, что скрипт должен уметь работать с любым итерируемым типом данных.
# Напишите функцию, которая возвращает список из элементов итерируемого объекта
# (кортежа, строки, списка, словаря), у которых индекс чётный.
#
# Пример 1:
# Допустим, есть такая строка: 'О Дивный Новый мир!'
# Результат: ['О', 'Д', 'в', 'ы', ' ', 'о', 'ы', ' ', 'и', '!']
#
# Пример 2:
# Допустим, есть такой список: [100, 200, 300, 'буква', 0, 2, 'а']
# Результат: [100, 300, 0, 'а']
#
# Примечание: для проверки типа можно использовать функцию isinstance(<элемент>, <тип данных>),
# которая возвращает True, если элемент принадлежит к этому типу данных, и возвращает False в противном случае.

def even_index(object):
    result = [symb for index, symb in enumerate(object) if index % 2 == 0]
    return result


text_list = ['О', 'Дивный', 'Новый мир!']  # список
text_set = {'дрыхнуть', 'спать', 'кемарить', 'тусить', 'гонять'}  # множество
text_dict = {'веселиться: грустить', 'стоять: сидеть', 'моргать: зевать', 'идти: бежать'}  # словарь
text = 'О дивный новый мир'  # строка
text_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)  # кортеж


print('Такой список: ', text_list)
print('Результат: ', even_index(text_list))

print('\nТакое множество: ', text_set)
print('Результат: ', even_index(text_set))

print('\nТакой словарь: ', text_dict)
print('Результат: ', even_index(text_dict))

print('\nТакая строка: ', text)
print('Результат: ', even_index(text))

print('\nТакой кортеж: ', text_tuple)
print('Результат: ', even_index(text_tuple))




****************************************
site = {
    'html': {
        'head': {
            'title': 'Куплю/продам телефон недорого'
        },
        'body': {
            'h2': 'У нас самая низкая цена на iphone',
            'div': 'Купить',
            'p': 'продать'
        }
    }
}

# TODO здесь писать код
import copy


def display_struct(struct, spaces=1):
    for key, value in struct.items():
        if isinstance(value, dict):
            print(' ' * spaces, key)
            display_struct(value, spaces + 3)
        else:
            print('{}{} : {}'.format(' ' * spaces, key, value))


def create_site(site, total, phone=None, copy_site={}):
    if total == 0:
        return
    phone = input('Введите название продукта для нового сайта: ')
    total -= 1

    site['html']['head']['title'] = 'Куплю/продам {} недорого'.format(phone)
    site['html']['body']['h2'] = 'У нас самая низкая цена на {}'.format(phone)
    new_site = copy.deepcopy(site)
    copy_site.update({'\nСайт для {}:'.format(phone): site})
    display_struct(copy_site)
    create_site(new_site, total)
    return


total_site = int(input('Сколько сайтов: '))
create_site(site, total_site)
# задача оказалась для меня сложной, с выводом как в примере так и не справился...
****************************************
# Обычно программисты любят, когда всё просто и понятно. Но Антон не из таких.
# Он любит устраивать себе челлендж, развиваться и сразу применять на практике то, что только что узнал.
# И в этот раз он подумал реализовать подсчёт факториала без использования циклов.
#
# Напишите функцию, которая считает факториал числа с помощью рекурсии.
#
# Кстати, в Python есть ограничение на количество рекурсивных вызовов.
# Попробуйте передать своей функции, например, число 1000 и посмотрите, что будет.
def factorial(num):
    if num == 1:
        return num
    return num * factorial(num - 1)


print(factorial(5))

****************************************
# В одном проекте на 10 000 строк кода произошла критическая ошибка.
# Хорошо, что старший разработчик быстро её нашёл и исправил. Он решил проверить, смогли бы вы её исправить,
# если бы его не было на месте. Поэтому он написал для вас код с аналогичной ошибкой:

import random

def change_dict(dct):
    num = random.randint(1, 100)
    for i_key, i_value in dct.items():
        if isinstance(i_value, list):
            i_value.append(num)
        if isinstance(i_value, dict):
            i_value[num] = i_key
        if isinstance(i_value, set):
            i_value.add(num)


nums_list = [1, 2, 3]
some_dict = {1: 'text', 2: 'another text'}
uniq_nums = {1, 2, 3}
common_dict = {1: nums_list.copy(), 2: some_dict.copy(), 3: uniq_nums.copy(), 4: (10, 20, 30)}

change_dict(common_dict)
print(common_dict)
# Суть кода в том, что у вас есть общий словарь из нескольких ключей, значения которых равны ранее объявленным переменным.
# Затем вызывается функция, которая должна изменять значения словаря, добавляя к значениям случайное число,
# в зависимости от типа данных. Но при этом меняются и ранее объявленные переменные.
# Исправьте эту ошибку и убедитесь, что nums_list, some_dict и uniq_nums не меняются.
print(nums_list, some_dict, uniq_nums)

# Либо мы можем применить вспомогательную функцию, которая сделает это за нас:
import copy

common_dict = {1: nums_list, 2: some_dict, 3: uniq_nums, 4: (10, 20, 30)}
common_dict_2 = copy.deepcopy(common_dict)  # Она будет особенно полезна в структурах, в которых множество вложенных переменных
change_dict(common_dict_2)
print(common_dict_2)
print(nums_list, some_dict, uniq_nums)

****************************************
# Вы пишете небольшое приложение для работы с файлами. Реализуйте функцию, которая может принимать на вход три аргумента:
# вопрос пользователю (на который нужно ответить да или нет), сообщение о неправильном вводе и количество попыток.
# Вопрос — обязательный позиционный аргумент, остальные — со значениями по умолчанию.
# При корректном ответе функция может возвращать что угодно — например, число 1 при ответе «да» или 0 при ответе «нет».
#
# В основной программе вызовите функцию минимум три раза:
# только с вопросом, с вопросом и сообщением об ошибке, с вопросом и количеством попыток.
#
# Пример работы программы:
# Вы действительно хотите выйти? что
# Неверный ввод. Пожалуйста, введите 'да' или 'нет'.
# Осталось попыток: 3
# Вы действительно хотите выйти? да
# Удалить файл? не знаю
# Так удалить или нет?
# Осталось попыток: 3
# Удалить файл? нет
# Записать файл? ага
# Неверный ввод. Пожалуйста, введите 'да' или 'нет'.
# Осталось попыток: 1
# Записать файл? да

def func(question,
         message='Неверный ввод. Пожалуйста введите "да" или "нет".',
         count=4):
    while True:
        user_input = input(question).lower()
        if user_input == 'да':
            return 1
        if user_input == 'нет':
            return 0
        count -= 1
        if count == 0:
            print('Попытки закончились!')
            break
        print(message)
        print('Осталось попыток:', count)


print(func('Сохранить файл? '))
print(func('Удалить файл? ', 'Да или нет?'))
print(func('Удалить файл? ', message='Так удалить или нет?'))
print(func('Записать файл? ', count=2))

****************************************
# На одном из форумов, посвящённых программированию, пользователь выложил такой код
# для расчёта степени числа без использования циклов, ** и функции math.pow():

def power(num, degree):
    if degree <= 0:
        return 1
    return num * power(num, degree - 1)

float_num = float(input('Введите вещественное число: '))
int_num = int(input('Введите степень числа: '))
print(float_num, '**', int_num, '=', power(float_num, int_num))

# Другие пользователи отметили, что это решение нерабочее и в нём есть ошибки. Исправьте это решение,
# не используя циклы, возведение в степень через ** и функцию math.pow()
#
# Правильный результат:
# Введите вещественное число: 1.5
# Введите степень числа: 5
# 1.5 ** 5 = 7.59375
****************************************
# Друг никак не может понять эту тему с изменяемыми и неизменяемыми типами, ссылками, объектами и их id.
# Видя, как он мучается, вы решили помочь ему и объяснить эту тему наглядно.
# Пользователь вводит любой объект. Напишите программу, которая выводит на экран тип введённых данных,
# информацию о его изменяемости, а также id этого объекта.
#
# Пример 1:
# Введите данные: привет
#
# Тип данных: str (строка)
# Неизменяемый (immutable)
# Id объекта: 1705156583984
#
# Пример 2:
# Введите данные: {‘a’: 10, ‘b’: 20}
#
# Тип данных: dict (словарь)
# Изменяемый (mutable)
# Id объекта: 1705205308536

# if type(data) in (int, float, str, tuple, bool):
#     print('Неизменяемый (immutable)')
# elif type(data) in (str, set, dict):
#     print('Изменяемый (mutable)')

data_names_dict = {
    "<class 'str'>": "строка",
    "<class 'dict'>": "словарь",
    "<class 'list'>": "список",
    "<class 'set'>": "множество",
    "<class 'int'>": 'число',
    "<class 'bool'>": 'булево'
}

mutable_check_helper = {
    "mutable": ("словарь(dict)", "список(list)", "множество(set)"),
    "immutable": ("число(int)", "число с плавающей точкой(float)", "строка(str)", "кортеж(tuple)", "булево(bool)")
}


def check_info(data):
    type_of_data = type(data)
    name_of_data = ""
    if str(type_of_data) in data_names_dict:
        name_of_data = data_names_dict[str(type_of_data)]

    if name_of_data in mutable_check_helper["mutable"]:
        property_of_data = "Изменяемый (mutable)"
    else:
        property_of_data = "Неизменяемый (immutable)"

    print(f"Тип данных: {type_of_data} ({name_of_data})")
    print(property_of_data)
    print("Id объекта:", id(data))


data_in = True
check_info(data_in)

****************************************
# При работе со значениями по умолчанию и изменяемыми типами данных нужно знать и остерегаться ещё одной интересной штуки.
# Напишите функцию с двумя аргументами: первый — число num, позиционный аргумент;
# второй — список lst, по умолчанию он пустой.
# В теле функции в список добавляется число num и сам список выводится на экран.
#
# В основной программе вызовите функции три раза только с одним аргументом (числом), например так:
# add_num(5)
# add_num(10)
# add_num(15)
#
# И посмотрите, что произойдёт.
# После этого сделайте значение lst по умолчанию None и поправьте функцию, чтобы она работала правильно.

def add_num(num, lst=None):
    lst = lst or []
    if not lst:
        lst = []
    lst.append(num)
    print(lst)


add_num(5)
add_num(10)
add_num(15)

****************************************
# Когда мы работаем с большой многоуровневой структурой, нам нередко необходимо пройтись по ней и найти нужный элемент.
# Для этого в программировании используются специальные алгоритмы поиска.
# Напишите функцию, которая находит заданный пользователем ключ в словаре и выдаёт значение этого ключа на экран.
# В качестве примера можно использовать такой словарь:
#
# site = {
#     'html': {
#         'head': {
#             'title': 'Мой сайт'
#         },
#         'body': {
#             'h2': 'Здесь будет мой заголовок',
#             'div': 'Тут, наверное, какой-то блок',
#             'p': 'А вот здесь новый абзац'
#         }
#     }
# }
#
# Пример 1:
# Искомый ключ: h2
# Значение: Здесь будет мой заголовок
#
# Пример 2:
# Искомый ключ: abc
# Такого ключа в структуре сайта нет.
site = {
    'html': {
        'head': {
            'title': 'Мой сайт'
        },
        'body': {
            'h2': 'Здесь будет мой заголовок',
            'div': 'Тут, наверное, какой-то блок',
            'p': 'А вот здесь новый абзац'
        }
    }
}

def find_key(key, data):
    if key in data:
        return data[key]

    for i_key in data.values():
        if isinstance(i_key, dict):
            result = find_key(key, i_key)
            if result:
                break
    else:
        result = None

    return result



user_input = (input('Искомый ключ: '))
value = find_key(user_input, site)
if value:
    print('Значение:', value)
else:
    print('Такого ключа нет')


****************************************
# Нашего друга попросили написать функцию, которая на вход принимает список всякого мусора.
# Ему нужно подготовить из этого списка список словарей, чтобы его коллеги смогли дальше продолжить обработку данных.
# Вот список правил, что нужно сделать с изначальным списком:
#
# Если в списке встретился словарь, то оставляем его.
# Если в списке встретилась строка, то из неё нужно сделать словарь и положить его в итоговый список,
# например  “abc” → {“abc”: “abc”}.
#
# С числами нужно сделать то же самое, что и со строками.
# Всё остальное выкидываем из нашего списка.
# Друг написал программу, но в ней ошибка, так как она что-то не то выводит :( Нужна ваша помощь, вот сама программа:

# def create_dict(data, template=dict()):
#     if isinstance(data, dict):
#         return data
#     if isinstance(data, int) or isinstance(data, float) or isinstance(data, str):
#         return template[data] = data
#
#
# def data_preparation(old_list):
#     new_list = []
#     for i_element in old_list:
#         new_list.append(create_dict(i_element))
#     return new_list
#
#
# data = [“sad”, {“sds”: 23}, {43}, [12, 42, 1], 2323]
# data = data_preparation(data)
# print(data)
# Исправьте программу и убедитесь, что всё работает верно.


def create_dict(data, template=None):
    if isinstance(data, dict):
        return data
    elif isinstance(data, (int, float, str)):
        template = template or dict()
        template[data] = data
        return template


def data_preparation(old_list):
    new_list = []
    for i_element in old_list:
        new_elem = (create_dict(i_element))
        if new_elem:
            new_list.append(new_elem)  # если есть новый элемент - добавляем его в список
    return new_list


data = ['sad', {'sds': 23}, {43}, [12, 42, 1], 2323]
print(data_preparation(data))

****************************************
# Вы работаете системным администратором в одной компании. На диске каждого сотрудника компании
# в специальной папке access лежит файл admin.bat. Этот файл предназначен для вас, и вам нужен путь до этого файла,
# причём как относительный, так и абсолютный. Недолго думая, вы решили написать небольшой скрипт,
# который закинете по сети к этому файлу.
# Напишите программу, которая выводит на экран относительный и абсолютный пути до файла admin.bat.
#
# Пример результата:
# Абсолютный путь до файла: C:\Users\Roman\PycharmProjects\Skillbox\access\admin.bat
# Относительный путь до файла: Skillbox\access\admin.bat
import os


folder_name = 'access'
file_name = 'admin.bat'
rel_path = os.path.join('..', folder_name, file_name)
abs_path = os.path.abspath(rel_path)

print('Относительный путь до файла:', rel_path)
print('Абсолютный путь до файла:', abs_path)

****************************************
# Андрей для себя хочет сделать экспериментальный сайт, где будет красиво отображаться вся структура его диска:
# папки одними иконками, файлы — другими. Поэтому ему нужен код, который поможет определить, какой тип иконки вставить.
#
# Напишите программу, которая по заданному абсолютному пути определяет, на что указывает этот путь
# (на директорию, файл, или же путь является ссылкой), и выведите соответствующее сообщение.
# Если путь указывает на файл, то также выведите его размер (сколько он весит в байтах).
# Обеспечьте контроль ввода: проверка пути на существование.
# Подсказка: для вывода размера файла поищите соответствующий метод.
#
# Пример 1:
# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py
# Это файл
# Размер файла: 605 байт
#
# Пример 2:
# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py
# Указанного пути не существует
import os

def find_file(file):
    print('Путь:', file)
    if os.path.exists(file):
        if os.path.isfile(file):
            print('Это файл')
            print('Размер файла:', os.path.getsize(file), 'байт')
        if os.path.isdir(file):
            print('Это папка')
            for i_elem in os.listdir(file):
                path = os.path.join(file, i_elem)
                print('Содержимое папки:', path)
    else:
        print('Указанного пути не существует')


file = 'Отряды.py'  # название файла

abs_path = os.path.abspath(os.path.join('..', 'lesson17', file))  # указываем правильный путь

find_file(abs_path)

****************************************
# Одному программисту дали задачу для обработки неких результатов тестирования двух групп людей.
# Файл первой группы (group_1.txt) находится в папке task, файл второй группы (group_2.txt) — в папке Additional_info.
# Содержимое файла group_1.txt
# Бобровский Игорь 10
# Дронов Александр 20
# Жуков Виктор 30
#
# Содержимое файла group_2.txt
# Павленко Геннадий 20
# Щербаков Владимир 35
# Marley Bob 15
#
# На экран нужно было вывести сумму очков первой группы, затем разность очков опять же первой группы
# и напоследок — произведение очков уже второй группы.
# Программист оказался не очень опытным, писал код наобум и даже не стал его проверять. И оказалось,
# этот код просто не работает. Вот что он написал:
# file = open('E:\task\group_1.txt', 'read')
# summa = 0
# for i_line in file:
#     info = i_line.split()
#     summa += info[2]
# file = open('E:\task\group_1.txt', 'read')
# diff = 0
# for i_line in file:
#     info = i_line.split()
#     diff -= info[2]
# file_2 = open('E:\task\group_2.txt', 'read')
# compose = 0
# for i_line in file:
#     info = i_line.split()
#     compose *= info[2]
# print(summa)
# print(diff)
# print(compose)
#
# Исправьте код для решения поставленной задачи. Для проверки результата создайте необходимые папки
# (task, Additional_info, Dont touch me) на своём диске в соответствии с картинкой и также добавьте файлы
# group_1.txt и group_2.txt.
import os

print(os.listdir())
file = open('F:\\task\\group_1.txt', 'r', encoding='utf-8')

summa = 0
diff = 0
for i_line in file:
    info = i_line.split('\n')
    info = info[0].split(' ')
    summa += int(info[2])
    diff -= int(info[2])
file.close()

file_2 = open('F:\\task\\Additional_info\\group_2.txt', 'r', encoding='utf-8')
compose = 1
for i_line_2 in file_2:
    info_2 = i_line_2.split('\n')
    info_2 = info_2[0].split(' ')
    compose *= int(info_2[2])
    print(info_2[2])
file_2.close()

print(summa)
print(diff)
print(compose)

****************************************
# Во входном файле numbers.txt записано N целых чисел, каждое в отдельной строке.
# Напишите программу, которая выводит их сумму в выходной файл answer.txt.
#
# Пример:
# Содержимое файла numbers.txt:
# 1
# 2
# 3
# 4
# 10
#
# Содержимое файла answer.txt
# 20

numbers = open('numbers.txt', 'r')
count = 0
for strin in numbers:
    count += int(strin)
print(count)
numbers.close()
result = open('answer.txt', 'a')
result.write(str(count))
result.write(', ')
result.close()

****************************************
# Выберите любую директорию на своём диске и затем напишите программу,
# выводящую на экран абсолютные пути к файлам и папкам, которые находятся внутри этой директории.
#
# Результат программы на примере директории проекта python_basic:
# Содержимое каталога G:\PycharmProjects\python_basic
#     G:\PycharmProjects\python_basic\.git
#     G:\PycharmProjects\python_basic\.idea
#     G:\PycharmProjects\python_basic\Module14
import os


def print_dirs(project):
    print('Содержимое директории', project)
    if os.path.exists(project):
        for i_elem in os.listdir(project):
            path = os.path.join(project, i_elem)
            print('    ', path)
    else:
        print('Каталога проекта не существует.')

folder_name = 'lesson18'

abs_path = os.path.abspath(os.path.join('..', '..', folder_name))


print_dirs(abs_path)



# решение от курса:
# for path in os.listdir('..'):
#     print(os.path.join(os.path.abspath('..'), path))
****************************************
# В уроке мы написали функцию, которая ищет нужный нам файл во всех подкаталогах указанной директории.
# Однако, как мы понимаем, файлов с таким названием может быть несколько.
# Напишите функцию, которая принимает на вход абсолютный путь до директории и имя файла,
# проходит по всем вложенным файлам и папкам и выводит на экран все абсолютные пути с этим именем.
#
# Пример:
# Ищем в: C:/Users/Roman/PycharmProjects/Skillbox
# Имя файла: lesson2
#
# Найдены следующие пути:
# C:/Users/Roman/PycharmProjects/Skillbox\Module15\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module16\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module17\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module18\lesson2.py
import os

def search_file(dir, file):
    print('переходим', dir)
    for i_elem in os.listdir(dir):
        path = os.path.join(dir, i_elem)
        # print(path)
        if i_elem == file:
            print(os.path.abspath(path))

        if os.path.isdir(path):
            result = search_file(path, file)
            if result:
                break



file_name = 'Задача 1. Склады.py'  # что ищем
abs_path = os.path.abspath(os.path.join('..'))  # где ищем

print('Найдены следующие пути:')
search_file(abs_path, file_name)

****************************************
# Как мы помним, скрипты — это просто куча строк текста, хоть они и понятны только программисту.
# Таким образом, с ними можно работать точно так же, как и с обычными текстовыми файлами.
#
# Используя функцию поиска файла из предыдущего урока, реализуйте программу, которая находит внутри
# указанного пути все файлы с искомым названием и выводит на экран текст одного из них
# (выбор можно сгенерировать случайно).
#
# Подсказка: можно использовать, например, список для сохранения найденного пути.
import os
import random


def find_file(cur_path, file_name):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if file_name == i_elem:
            print('Найде файл')
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                all_paths.extend(result)

    return all_paths

def chek_file(path_to_file):
    file = open(path_to_file, 'r', encoding='utf8')
    for line in file:
        print(line)
    file.close()


all_paths = find_file('..', 'Задача 2. Кризис фруктов.py')
chek_file(random.choice(all_paths))


****************************************
# Ваш друг, который тоже проходит курс Python Basic, поехал с ноутбуком в другой город, и там у него случилась беда:
# его диск пришлось отформатировать, а доступ в интернет отсутствует. Остался только телефон с мобильным интернетом.
# Так как со связью (и с памятью) проблемы, друг попросил вас скинуть одним файлом все решения и скрипты,
# которые у вас сейчас есть.
# Напишите программу, которая копирует код каждого скрипта в папке проекта python_basic в файл scripts.txt,
# разделяя код строкой из 40 символов *.
#
# Пример содержимого файла scripts.txt:
# import platform
# import sys
#
# info = 'OS info is \n{}\n\nPython version is {} {}'.format(
#     platform.uname(),
#     sys.version,
#     platform.architecture(),
# )
# print(info)
#
# with open('os_info.txt', 'w', encoding='utf8') as file:
#     file.write(info)
# ****************************************
# print("Введите первую точку")
# x1 = float(input('X: '))
# y1 = float(input('Y: '))
# print("\nВведите вторую точку")
# x2 = float(input('X: '))
# y2 = float(input('Y: '))
#
# print("Уравнение прямой, проходящей через эти точки:")
# x_diff = x1 - x2
# y_diff = y1 - y2
# if x_diff == 0:
#     print("x = ", x1)
# elif y_diff == 0:
#     print("y = ", y1)
# else:
#     k = y_diff / x_diff
#     b = y2 - k * x2
#     print("y = ", k, " * x + ", b)
# ****************************************
import os


def find_file(cur_path, file_name):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if i_elem.endswith(file_name):
            # print('Найден файл', i_elem)
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                all_paths.extend(result)

    return all_paths

def chek_file(path_to_file):
    for file in path_to_file:
        files = open(file, 'r', encoding='utf8')
        new_file = open('scripts.txt', 'a', encoding='utf8')
        for line in files:
            new_file.write(str(line))
        new_file.write('\n' + '*'*40+'\n')
        files.close()
        new_file.close()



all_path = find_file('..', '.py')

files_list = chek_file(all_path)
print(files_list)

# решение курса
# def find_file(cur_path, ending):
#     all_paths = []
#     for i_elem in os.listdir(cur_path):
#         path = os.path.join(cur_path, i_elem)
#         if i_elem.endswith(ending):
#             all_paths.append(os.path.abspath(path))
#         elif os.path.isdir(path):
#             result = find_file(path, ending)
#             if result:
#                 all_paths.extend(result)
#
#     return all_paths
#
#
# def get_text_from_file(path_to_file):
#     file = open(path_to_file, "r", encoding="utf8")
#     result = ""
#     for line in file:
#         result += line
#     return result
#
#
# all_py_files = find_file('..', '.py')  # вместо ".." можно вставить путь до папки python_basic
#
# file_result = open("scripts.txt", "w", encoding="utf8")
#
# for file_path in all_py_files:
#     file_result.write(get_text_from_file(file_path))
#     file_result.write("\n" * 2 + "*" * 80 + "\n" * 2)

****************************************
# Напишите программу, которая выводит на экран только корень диска, на котором запущен скрипт.
# Учтите, что скрипт может быть запущен где угодно и при любой вложенности папок.
#
# Результат программы на примере диска G:
# Корень диска: G:\\

import os


def print_dirs(project):
    for i_elem in os.listdir(project):
        path = os.path.join(project, i_elem)
        print(' ', path)

abs_path = os.path.abspath(os.path.join(os.path.sep))
print('Содержимое каталога', abs_path)
print_dirs(abs_path)


****************************************
import random
def get_random_letter(n):
    return random.choices([chr(i) for i in range(ord('а'), ord('я'))], k=n)


print(get_random_letter(int(input('Сколько случайных букв желаешь: '))))

****************************************
# Программисты постоянно гуглят ошибки и ищут уже готовый код, который можно использовать
# для своей программы, чтобы не изобретать велосипед.
# Андрей поступил также и нашёл для своего проекта код,
# который должен находить минимальное и максимальное числа в списке.
# Вот этот код:

nums_list = []
N = int(input('Кол-во чисел в списке: '))

for _ in range(N):
    num = int(input('Очередное число: '))
    nums_list.append(num)

maximum = -1
minimum = 1

for i in nums_list:
    if maximum < i:
        maximum = i
    if minimum > i:
        minimum = i

print('Максимальное число в списке:', maximum)
print('Минимальное число в списке:', minimum)
****************************************
worker = int(input('Кол-во сотрудников в офисе: '))
worker_ID = []

for _ in range(worker):
    id = int(input('ID сотрудника: '))
    worker_ID.append(id)
search_ID = int(input('Какой ID ищем? '))

if search_ID in worker_ID:
    print('Сотрудник на месте')
else:
    print('Сотрудник не работает!')
****************************************
# Пользователь вводит список из N чисел и число K.
# Напишите код, выводящий на экран сумму индексов элементов списка, которые кратны K.

numbers_count = int(input('Введите кол-во чисел: '))
numbers = []

for number in range(numbers_count):
    print('Введите', number + 1, 'число: ', end = '')
    number_input = int(input())
    numbers.append(number_input)

divider = int(input('Введите делитель: '))

sum_index = 0
for n in numbers:
    if n % divider == 0:
        print('Индекс числа', n, ':', numbers.index(n) )
        sum_index += numbers.index(n)
print('Сумма индексов:', sum_index)





****************************************
numbers = []
for n in range(101):
    numbers.append(n)
print(numbers)

****************************************
# В собачьих бегах участвует N собак, у каждой из них есть определённое количество очков за сезон.
# На огромном табло выводятся очки каждой собаки.
# Однако при выводе был обнаружен баг: собаки с наибольшим и наименьшим количеством очков поменялись местами!
# Нужно это исправить.
#
# Дан список очков из N собак. Напишите программу, которая меняет местами наибольший и наименьший элементы в списке.

total_dogs = int(input('Введите кол-во собак: '))
dogs_list = []
for dog in range(total_dogs):
    print('Сколько очков у', dog + 1, 'собаки:', end=' ')
    dog_score = int(input())
    dogs_list.append(dog_score)

min = dogs_list[0]
max = dogs_list[0]

min_index = 0
max_index = 0


for i_dogs in range(total_dogs):
    if dogs_list[i_dogs] < min:
        min = dogs_list[i_dogs]
        min_index = i_dogs

    if dogs_list[i_dogs] > max:
        max = dogs_list[i_dogs]
        max_index = i_dogs

print('мин число:', min)
print('макс число:', max)
print(dogs_list)
dogs_list[min_index], dogs_list[max_index] = dogs_list[max_index], dogs_list[min_index]
print(dogs_list)
****************************************
# Дана строка S и номер позиции символа в строке.
# Напишите программу, которая выводит соседей этого символа и сообщение о количестве таких же символов
# среди этих соседей: их нет, есть ровно один или есть два таких же.

user_str = input('Введите строку: ') # abcd
user_index = int(input('Номер символа: ')) - 1

user_str = list(user_str)
count = 0
if user_index > 0:
    print('Символ слева:', user_str[user_index - 1])
    if user_str[user_index - 1] == user_str[user_index]:
        count += 1
if user_index < len(user_str)-1:
    print('Символ справа:', user_str[user_index + 1])
    if user_str[user_index + 1] == user_str[user_index]:
        count += 1

if count == 2:
     print('Рядом есть два таких же символа')
elif count == 1:
    print('Рядом есть такойже символ')
elif count == 0:
    print('Рядом таких же символов нет')

****************************************
numbers = [3, 7, 5]

while True:
    number = int(input('Новое число: '))
    numbers.append(number)
    print('Текущий список чисел:', numbers)

    for i in numbers:
        print(i ** 2, i ** 3, i ** 4)

print()

****************************************
# Мы продолжаем участвовать в разработке нового текстового редактора и делать жизнь обычных пользователей чуть лучше.
# В этот раз у нас стоит задача сделать фишку с поиском и заменой символов в выделенной строчке.
# Например, человек что-то перечислял в тексте, но ошибся и вместо точек с запятой использовал двоеточия.
# Лингвисты негодуют.
#
# Пользователь вводит строку S.
# Напишите программу, которая заменяет в строке все двоеточия (:) на точки с запятой (;).
# Также подсчитайте количество замен и выведите ответ на экран (и новую строку тоже).
# Для решения используйте список.
#
# Пример:
# Введите строку: гвозди:шурупы: гайки
# Исправленная строка: гвозди; шурупы; гайки
# Кол - во замен: 2

words = input('Введите строку: ')
words_list = list(words)
count = 0
for index, letter in enumerate(words_list):
    if letter == ':':
        words_list[index] = ';'
        count += 1
print('Измененная строка:', end=' ')
for i in words_list:
    print(i, end='')

print('\nКоличество замен:', count)

****************************************
# Мы уже писали программу для лингвистов, которая считала количество определённых букв в тексте.
# Теперь эту программу нужно улучшить. Есть список из трёх слов, которые вводит пользователь.
# Затем вводится сам текст произведения строго по словам. Текст вводится до тех пор, пока не встретится слово end.
# Напишите программу, которая посчитает, сколько раз слова пользователя встречаются в тексте.

words_list = []
count = [0, 0, 0]
for i in range(3):
    print('Введите', i + 1, 'слово:', end=' ')
    word = input()
    words_list.append(word)

user_word = input('Слово из текста: ')
while user_word != 'end':
    for index in range(3):
        if words_list[index] == user_word:
            count[index] += 1
    user_word = input('Слово из текста: ')

print('Подсчет слов в тексте:\n')
for i in range(3):
    print(words_list[i], ':', count[i])

****************************************
# Гера решил попрактиковаться в программировании и захотел написать небольшой скрипт,
# который после двух сообщений отправляет ещё одно на основе первых двух.
# Пользователь вводит две строки. В каждой из них есть какое-то количество специальных символов ! и ?.
# Напишите программу, которая считает количество этих символов отдельно в первой строке и отдельно во второй.
# Если в первой строке их больше, чем во второй, то на экран выводится первая строчка, объединённая со второй, а иначе — вторая с первой.
# При равном количестве символов в строках выводится «Ой».


first_question = input('Первое сообщение: ')
second_question = input('Второе сообщение: ')

first_count = first_question.count('!') + first_question.count('?')
second_count = second_question.count('!') + second_question.count('?')

if first_count > second_count:
    print('Третье сообщение:', first_question, second_question)
elif second_count > first_count:
    print('Третье сообщение:', second_question, first_question)
else:
    print('Ой!')

****************************************
# Одна IT-компания решила расшириться и взяла под своё крыло ещё три таких же, но поменьше.
# Конечно же, все выполненные и невыполненные задачи этих компаний перетекли в основную компанию.
# Даны четыре списка компаний, в которых для каждой задачи написано, выполнена (1) она или нет (0):
#
# main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
# first_company = [0, 0, 0]
# second_company = [1, 0, 0, 1, 1]
# third_company = [1, 1, 1, 0, 1]
#
# Напишите программу, которая расширяет список main элементами остальных списков, выведите итоговый список, а также выведите количество невыполненных задач.

main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
first_company = [0, 0, 0]
second_company = [1, 0, 0, 1, 1]
third_company = [1, 1, 1, 0, 1]

main.extend(first_company)
main.extend(second_company)
main.extend(third_company)

print('Общий список задач:', main)
print('Кол-во невыполненных задач:', main.count(0))

****************************************
# В маленьком зоопарке каждое животное сидит в отдельной клетке, всего этих животных четверо: лев, кенгуру, слон и обезьяна.
# В базе данных они хранятся в виде вот такого списка:
#
# zoo = ['lion', 'kangaroo', 'elephant', 'monkey']
#
# Сегодня в зоопарк завезли медведя (bear) и посадили его между львом и кенгуру.В итоге животных стало пять.
# А через неделю слона перевезли в другое место и в списке снова стало четверо животных.
# Реализуйте эти действия в коде программы и выведите в консоль итоговый список животных, а также покажите,
# в какой клетке сидят лев и обезьяна. Для этого используйте методы списков.
#
# Результат работы программы:
# # Зоопарк: ['lion', 'bear', 'kangaroo', 'monkey']
# # Лев сидит в клетке номер 1
# Обезьяна сидит в клетке номер 4

zoo = ['lion', 'kangaroo', 'elephant', 'monkey']

zoo.insert(1, 'bear')
zoo.remove('elephant')

print('Зоопарк:', zoo)
print('Лев сидит в клетке номер', zoo.index('lion') + 1)
print('Обезьяна сидит в клетке номер', zoo.index('monkey') + 1)

****************************************
# Мы поддерживаем свой киносайт и хотим сделать так, чтобы пользователи после регистрации могли создать
# собственный рейтинг фильмов из тех, которые есть на сайте.

def chek_film(film, films):
    for i_film in films:
        if i_film == film:
            return True
    else:
        return False


films = [
    'Крепкий орешек', 'Назад в будущее', 'Таксист',
    'Леон', 'Богемская рапсодия', 'Город грехов',
    'Мементо', 'Отступники', 'Деревня',
    'Проклятый остров', 'Начало', 'Матрица', 'Не грози южному централу'
]
user_films = []

while True:
    print('Ваш текущий топ фильмов:', user_films)
    print('\nНазвание фильма: ', end='')
    film = input()
    if chek_film(film, films):
        print('Команды: добавить, вставить, удалить')
        user_comand = input('Введите команду: ')
        if user_comand == 'добавить':
            if chek_film(film, user_films):
                print('Этот фильм уже есть в вашем списке.')
            else:
                user_films.append(film)
        if user_comand == 'вставить':
            if chek_film(film, user_films):
                print('Этот фильм уже есть в вашем списке.')
            else:
                user_index = int(input('На какое место: '))
                user_films.insert(user_index - 1, film)
        if user_comand == 'удалить':
            user_films.remove(film)
        else:
            print('Вы ввели неверную команду!')
    else:
        print('Такого фильма на сайте нет')

****************************************
# В небольшой фруктовой лавке у каждого фрукта есть название и цена. Эта информация хранится в одном большом списке, вот так:
#
# goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]
#
# Недавно в лавку привезли новый fruit_name по цене price, а после этого случилось ужасное:
# повысили налоги. А значит, повысились и цены на фрукты, на целых 8%!
#
# Реализуйте код, который добавляет в список goods ещё один список с новым фруктом и ценой (это запрашивается у пользователя),
# а затем увеличивает цены всех фруктов на 8%.

goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]

fruit_name = input('Новый фрукт: ')
price = int(input('Цена: '))

goods.append([fruit_name, price])
print('Новый ассортимент:', goods)

for good in goods:
    good[1] = round(good[1] * 1.08, 2)

print('Новый ассортимент с увеличенной ценой:', goods)



****************************************
# Дан вот такой список со списками:
# matrix = [[1, 2 ,3], [4, 5, 6], [7, 8, 9]]
# Реализуйте программу, которая выводит элементы этого списка в виде привычной нам матрицы.
#
# Результат работы программы:
#
# 1 2 3
# 4 5 6
# 7 8 9

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
for i in matrix:
    for num in i:
        print(num, end=' ')
    print()

****************************************
# В олимпиаде по программированию участвует N человек, в списке участников они обозначаются под номерами 1, 2, 3, 4
# и так далее до N.Эти участники поделены на команды по  K человек. Напишите программу, которая принимает
# на вход количество участников и количество человек в каждой команде, затем генерирует список таких команд и
# выводит его на экран.
# Обеспечьте контроль ввода: в каждой команде должно быть ровно по K человек.
#
# Пример 1:
# Кол - во участников: 12
# Кол - во человек в команде: 4
#
# Общий список команд: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
#
# Пример 2:
# Кол - во участников: 12
# Кол - во человек в команде: 5
#
# 12 участников невозможно поделить на команды по 5 человек!

all_members = int(input('Кол-во участников: '))
team_members = int(input('Кол-во человек в команде: '))
team_list = []
teams = all_members % team_members

if teams == 0:
    flag = True
else:
    print(all_members, 'участников невозможно поделить на команды по', team_members, 'человек!')


if flag:
    num = 1
    for _ in range(all_members // team_members):
        team_list.append(list(range(num, team_members + num)))
        num += team_members
    print('Общий список команд: ', team_list)

****************************************
# При работе с сервером мы кодируем сообщение и отправляем его в виде пакетов информации.
# Их количество равно N. Допустим, каждый пакет содержит четыре числа, каждое из которых равно нулю или единице.
# Эти числа называются битами. Иногда в кодировке сообщения встречаются ошибки, и в пакете эта ошибка обозначается числом -1.
# Если таких ошибок не больше одной, то этот пакет мы целиком добавляем в список для декодирования, а иначе отбрасываем.
#
# Напишите программу, которая будет обрабатывать полученные пакеты и выведет на экран итоговое сообщение для декодирования,
# а также количество ошибок в нём и количество необработанных пакетов.

all_packets = int(input('Количество пакетов: '))

packets_list = []
lost_packets = 0
for packet in range(all_packets):
    temp = []
    print('\nПакет номер', packet + 1)
    for byte in range(4):
        print(byte + 1, 'бит: ', end='')
        byte_input = int(input())
        temp.append(byte_input)
    if temp.count(-1) <= 1:
        packets_list.extend(temp)
    else:
        print('Много ошибок в пакете!')
        lost_packets += 1

print('Полученное сообщение:', packets_list)
print('Количество ошибок в сообщении:', packets_list.count(-1))
print('Количество потерянных пакетов:', lost_packets)

****************************************
# В одной компании наступили «тёмные времена», и сотрудников стали сокращать.
# Зарплаты сотрудников хранятся в списке из N этих самых зарплат.
# Зарплаты уже уволенных сотрудников обозначаются в списке числом 0.
#
# Напишите программу, которая запрашивает у пользователя количество сотрудников и их зарплаты,
# затем удаляет все элементы списка со значением 0 и выводит в консоль, сколько сотрудников осталось, а также их зарплаты.
# Дополнительный список использовать нельзя.

workers = int(input('Количество сотрудников: '))
salary_list = []

for worker in range(1, workers + 1):
    print('Зарплата', worker, 'сотрудника: ', end='')
    salary = int(input())
    salary_list.append(salary)

salary_list.remove(0)
print('Осталось сотрудников:', len(salary_list), '\nЗарплаты:', salary_list)
print('Максимальная зарплата:', max(salary_list))
print('Минимальная зарплата:', min(salary_list))

****************************************
nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]],
             [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

result = [j for i_num in range(len(nice_list))
              for i in range(len(nice_list[i_num]))
              for j in nice_list[i_num][i]]

print('Ответ:', result)

****************************************
# Нашему другу заказали написать программу, которая анализирует цены на бирже.
# Она получает этот пакет данных, но делать что-либо с ним нельзя.
# Для нормальной работы аналитической программы берётся новый список, который равен тому, что пришло.
# Затем идёт работа с новым списком: если есть отрицательные цены, то программа их зануляет и в конце выводит на экран,
# сколько денег мы по итогу потеряли. Получился вот такой код:
#
# original_prices = [-12, 3, 5, -2, 1]
# new_prices = original_prices
# for i in range(len(original_prices)):
#     if new_prices[i] < 0:
#         new_prices[i] = 0
#
# print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))
#
# Однако при таких входных данных программа почему-то работает неправильно: она выводит ответ 0, когда правильный ответ 14.
# Помогите другу исправить программу, а также сделайте так, чтобы список цен генерировался случайно (диапазон можно выбрать любой).

import random

original_prices = [random.randint(-5, 5) for _ in range(random.randint(1, 10))]
# original_prices = [-12, 3, 5, -2, 1]

new_prices = original_prices[:]
for i in range(len(original_prices)):
    if new_prices[i] < 0:
        new_prices[i] = 0

print('Оригинальные цены', original_prices)
print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))

****************************************
# вытащить вложенные списки в один общий список

nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

# списковая сборка:
output = [j for each_list in nice_list for each_list2 in each_list for j in each_list2]

# обычный цикл:
# for i_num in range(len(nice_list)):
#     for i in range(len(nice_list[i_num])):
#         for j in nice_list[i_num][i]:
#             nice_list3.append(j)


print('Итог:', output)


****************************************
# Задача 1. Гласные буквы
# Что нужно сделать
#
# Команде лингвистов понравилось качество ваших программ, и они решили заказать у вас функцию для анализатора текста,
# которая создавала бы список гласных букв текста, а заодно считала бы их количество.
# Напишите программу, которая запрашивает у пользователя текст и генерирует список из гласных букв этого текста
# (сама строка вводится на русском языке). Выведите в консоль сам список и его длину.
#
# Пример:
# Введите текст: Нужно отнести кольцо в Мордор!
#
# Список гласных букв: ['у', 'о', 'о', 'е', 'и', 'о', 'о', 'о', 'о']
# Длина списка: 9

def vowels(words):
    words_list = ['а', 'у', 'о', 'ы', 'и', 'э', 'я', 'ю', 'ё', 'е', 'А', 'У', 'О', 'Ы', 'И', 'Э', 'Я', 'Ю', 'Ё', 'Е']
    result = [i_words for i_words in words if i_words in words_list] #  символ для символа в тексте (words) если
                                                                     # символ встречается в списке (words_list) то добавить в список result
    return result


words = [word for word in input('Введите текст: ')]
print(vowels(words))

****************************************
# Пользователь вводит целое число N. Напишите программу, которая генерирует список из N чисел,
# на чётных местах в нём стоят единицы, а на нечётных — числа, равные остатку от деления своего номера на 5.
#
# Пример:
# Введите длину списка: 10
# Результат: [1, 1, 1, 3, 1, 0, 1, 2, 1, 4]
# numbers = [1 if num % 2 == 0 else num % 5 for num in range(len_numbers)]
#  если индекс числа четный, то равен 1, иначе индекс числа % 5 в длине списка 1, 10

len_numbers = int(input('Введите длину списка: '))
numbers = [1 if num % 2 == 0
           else num % 5
           for num in range(len_numbers)]

print(numbers)

****************************************
# Пользователь вводит числа A и B. Напишите программу, которая генерирует два списка:
# в первом лежат кубы чисел в диапазоне от А до В, во втором — квадраты чисел в этом же диапазоне.
# Выведите списки на экран. Для генерации используйте list comprehensions (как и в следующих задачах).
#
# Пример:
#
# Левая граница: 5
# Правая граница: 10
#
# Список кубов чисел в диапазоне от 5 до 10: [125, 216, 343, 512, 729, 1000]
# Список квадратов чисел в диапазоне от 5 до 10: [25, 36, 49, 64, 81, 100]

start = int(input('Левая граница: '))
stop = int(input('Правая граница: '))

cube_list = [x ** 3 for x in range(start, stop + 1)]
square_list = [x ** 2 for x in range(start, stop + 1)]

print('Список кубов чисел в диапазоне от', start, 'до', stop, cube_list)
print('Список квадратов чисел в диапазоне от', start, 'до', stop, square_list)

****************************************
# У нас есть вот такой список цен на некоторые товары из магазина:
# original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
#
# В этом списке также хранятся цены на товары, которые уже давно не продаются.
# По какой-то причине система, вместо того чтобы их занулить, просто приписала к ним минус. Нам нужно это исправить.
# Напишите программу, которая генерирует новый список из первого списка, заменяя все отрицательные числа на ноль.
#
# Результат:
# [1.25, 0, 10.22, 3.78, 0, 1.16]

original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]

new_prices = [(i_num if i_num > 0 else 0)
              for i_num in original_prices]

print(new_prices)

****************************************
# как найти индекс символа из списка!

result = input('Введите строку: ')

# result = ['g', 'h', 'b', 'd', 'h', 'n', 'h']
answer = [i_words for i_words in range(len(result)) if result[i_words] == 'h']

print('Развернутая последовательность между первым и последним h:', result[max(answer) - 1:min(answer):-1])

****************************************
# Мы продолжаем пробовать себя в качестве разработчика игр. Теперь нужно написать небольшую логику поведения некоторых отрядов,
# а также их урон. Есть два отряда, в каждом по 10 монстров. В первом отряде у каждого монстра урон абсолютно случайный
# и колеблется от 50 до 80, а во втором — от 30 до 60. Оба отряда вместе напали на третий, также из 10 юнитов.
# Юнит третьего отряда погибает, если сумма урона от двух монстров больше 100.
#
# Напишите программу, которая генерирует случайные значения в первых двух списках в заданных диапазонах,
# а также генерирует список, состоящий из фраз «Погиб» или «Выжил». Выведите все списки на экран.
#
# Пример:
#
# Урон первого отряда: [77, 75, 76, 77, 76, 73, 57, 67, 76, 52]
# Урон второго отряда: [53, 51, 31, 60, 49, 37, 31, 60, 37, 47]
# Состояние третьего отряда: ['Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Выжил', 'Погиб', 'Погиб', 'Выжил']

import random

units_1 = [random.randint(50, 80) for _ in range(10)]
units_2 = [random.randint(30, 60) for _ in range(10)]
units_3_condition = [('Погиб' if units_1[i_damage] + units_2[i_damage] > 100
                      else 'Выжил')
                     for i_damage in range(10)]


print('Урон первого отряда:', units_1)
print('Урон Второго отряда:', units_2)
print('Состояние третьего отряда:', units_3_condition)
****************************************
# Дан список цен на пять товаров с точностью до копейки. Так как экономика даёт о себе знать, мы спрогнозировали,
# что через год придётся повышать цены на X процентов, а ещё через один год — ещё на Y процентов.
# Напишите программу, которая получает на вход список цен на товары (вещественные числа,
# список генерируется также с помощью list comprehensions) и выводит в одну строку общую сумму стоимости товаров за каждый год.
#
# Пример:
# Цена на товар: 1.09
# Цена на товар: 23.56
# Цена на товар: 57.84
# Цена на товар: 4.56
# Цена на товар: 6.78
# Повышение на первый год: 0
# Повышение на второй год: 10
# Сумма цен за каждый год: 93.83 93.83 103.22

def get_percent_price(percent, price):
    return round(price * (1 + percent / 100), 2)


price_now = [float(input('Цена на товар:')) for _ in range(5)]

first_percent = int(input('Повышение на первый год: '))
second_percent = int(input('Повышение на второй год: '))

price_first = [get_percent_price(first_percent, i_price) for i_price in price_now]
price_second = [get_percent_price(second_percent, i_price) for i_price in price_first]

print('Сумма цен за каждый год:', round(sum(price_now), 2), round(sum(price_first), 2), round(sum(price_second), 2))

****************************************
# улучшение кода

def is_palindrome(num_list):
    reverse_list = num_list[::-1]
    if num_list == reverse_list:
        return True
    else:
        return False

total_num = int(input('Кол-во чисел: '))
number_list = []
answer = []

for num in range(total_num):
    num = int(input('Число: '))
    number_list.append(num)

for i_num in range(0, len(number_list)):
    if is_palindrome(number_list[i_num:len(number_list)]):
        answer = number_list[:i_num]
        answer.reverse()
        print('Последовательность:', number_list)
        if len(answer) == 0:
            print('Уже является палиндромом!')
            break
        print('Нужно приписать чисел:', len(answer))
        print('Сами числа:', answer)
        break

****************************************
# Илья решил безобидно подшутить над другом и написал программу для смартфона,
# которая при отправке сообщения удваивает каждый символ строки и заодно к каждому удвоенному добавляет ещё один дополнительный.
#
# Пользователь вводит строку и дополнительный символ. Напишите программу, которая генерирует два списка:
# в первом списке каждый элемент — удвоенная буква первой строки, во втором списке каждый элемент —
# конкатенация элемента первого списка и дополнительного символа.
#
# Пример:
# Введите строку: привет
# Введите дополнительный символ: !
#
# Список удвоенных символов: ['пп', 'рр', 'ии', 'вв', 'ее', 'тт']
# Склейка с дополнительным символом: ['пп!', 'рр!', 'ии!', 'вв!', 'ее!', 'тт!']

user_input = input('Введите строку: ')
new_symb = input('Введите дополнительный символ: ')

user_list = [x * 2 for x in user_input]
new_user_list = [x + new_symb for x in user_list]

print('Список удвоенных символов:', user_list)
print('Склейка с дополнительным символом:', new_user_list)

****************************************
# user_list = [int(input('Введи число: ')) for _ in range(2)]

start = int(input('Левая граница: '))
stop = int(input('Правая граница: '))

result = [i_num for i_num in range(start, stop + 1) if i_num % 2 == 0]

print(result)

****************************************
# Дан список чисел:
# nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]
#
# Напишите программу, которая выводит на экран шесть ответов:
# В первой строке выведите первые пять элементов списка.
# Во второй строке выведите весь список, кроме последних двух элементов.
# В третьей строке выведите все элементы с чётными индексами.
# В четвёртой строке выведите все элементы с нечётными индексами.
# В пятой строке выведите все элементы в обратном порядке.
# В шестой строке выведите все элементы списка через один в обратном порядке, начиная с последнего.
# Для решения используйте только срезы (и без функции len).
#
# Результат:
# [48, -10, 9, 38, 17]
# [48, -10, 9, 38, 17, 50, -5, 43]
# [48, 9, 17, -5, 46]
# [-10, 38, 50, 43, 12]
# [12, 46, 43, -5, 50, 17, 38, 9, -10, 48]
# [12, 43, 50, 38, -10]

nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]

print('Исходный список:', nums, '\n')
print('Первые пять элементов списка:', nums[:5])
print('Список без последних двух элементов:', nums[0:8])
print('Элементы с четными индексами', nums[::2])
print('Элементы с нечетными индексами', nums[1::2])
print('Элементы в обратном порядке:', nums[::-1])
print('Элементы в обратном порядке через один:', nums[::-2])

****************************************
# Дан список из N чисел, а также числа А и В (можно сгенерировать случайно, при этом А < B).
# Напишите программу, которая удаляет элементы списка с индексами от А до В.
# Не используйте дополнительные переменные и методы списков.

import random

numbers = [random.randint(1, 10) for _ in range(random.randint(5, 10))]
a = random.randint(0, len(numbers) - 2)
b = random.randint(a + 1, len(numbers) - 1)

print('Список', numbers, 'Удаляем элементы с индексами от', a, 'до', b)
numbers[a:b + 1] = []

print(numbers)

****************************************
def caesar_cipher(string, shift):
    char_list = [(alphabet[(alphabet.index(sym) + shift) % 33] if sym != ' ' else ' ') for sym in string]
    new_str = ''
    for i_char in char_list:
        new_str += i_char
    return new_str


alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
user_list = input('Введите сообщение: ')
shift = int(input('Введите сдвиг: '))

result = caesar_cipher(user_list, shift)
print('Зашифрованное сообщение:', result)

****************************************
# Задача 1. Заказ
# После того, как человек сделал заказ в интернет-магазине, ему на почту приходит оповещение с его именем и номером заказа.
# Напишите программу, которая получает на вход имя и код заказа, а затем выводит на экран соответствующее сообщение.
# Для решения используйте строковый метод format.
#
# Пример:
# Имя: Иван
# Номер заказа: 10948
#
# Здравствуйте, Иван! Ваш номер заказа: 10948. Приятного дня!

user_name = input('Имя клиента: ')
order_number = int(input('Номер заказа: '))

print('Здравствуйте, {name}! Ваш номер заказа: {order}. Приятного дня!'.format(name=user_name, order=order_number))
# или
print('Здравствуйте, {0}! Ваш номер заказа: {1}. Приятного дня!'.format(user_name, order_number))

****************************************
# Задача 1. Улучшенная лингвистика 2
# Усовершенствуйте старую программу:
# У нас есть список из трёх слов, которые вводит пользователь. Затем вводится сам текст произведения,
# который вводится уже в одну строку. Напишите программу, которая посчитает,
# сколько раз слова пользователя встречаются в тексте.

# count = [0, 0, 0]
# user_input = input('Введите три слова через пробел: ')
# user_words = user_input.split()
# words = input('Введите текст произведения: ')
# words_list = words.split()
#
# for index in range(3):
#     for word in words_list:
#         if user_words[index] == word:
#             count[index] += 1
#
# print('Подсчет слов в тексте:\n')
# for i in range(3):
#     print(user_words[i], ':', count[i])

# как надо было сделать
words = [input("Введите слово: ") for _ in range(3)]
text = input("Введите текст: ")
words_count = [text.count(word) for word in words]

print(words_count)

****************************************
# Задача 1. Шифр Цезаря 2
# Мы уже писали программу, которая шифрует строку с помощью шифра Цезаря.
# Напомним, что в таком способе шифрования каждая буква заменяется на следующую по алфавиту через K позиций по кругу.
# Напишите (модифицируйте) программу, которая реализует этот алгоритм шифрования. Не используйте конкатенацию и сделайте так,
# чтобы текст был в одном регистре.

def caesar_cipher(string, shift):
    char_list = [(alphabet[(alphabet.index(sym) + shift) % 33] if sym != ' ' else ' ') for sym in string]
    new_str = ''.join(char_list)
    return new_str


alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
user_list = input('Введите сообщение: ').lower()
shift = int(input('Введите сдвиг: '))

result = caesar_cipher(user_list, shift)
print('Зашифрованное сообщение:', result)


# print(ord("а"), ord("я"), ord("ё"), chr(1104))
#
# text = input("Введите текст: ")
# delta = int(input("Введите сдвиг: "))
# alphabet = [chr(index) for index in range(ord("а"), ord("я") + 1)]  # заполняем список буквами алфавита
# # Думаем над структурой алгоритма: [вариант_1 если условие_1 иначе вариант_2 for буква in текст]
# new_text = [alphabet[(alphabet.index(letter) + delta) % len(alphabet)] if letter in alphabet else letter for letter in text.lower()]
# print(''.join(new_text))

****************************************
# Задача 2. Бабушка
# У одной бабушки, когда та переписывается с внуком, постоянно залипает кнопка пробела.
# В итоге между словами получаются огромные расстояния. Внук не знает как это поправить в самом телефоне, поэтому обратился к вам за помощью.
#
# Пользователь вводит строку. Напишите программу, которая преобразовывает в этой строке все идущие подряд пробелы в один и выводит результат на экран.

grandma_input = input('Введите текст: ').split()

result = ' '.join(grandma_input)
print(result)

****************************************
# Задача 2. Долги
# Один наш друг занял у нас определённую сумму денег и всё никак не может их вернуть.
# А деньги нам нужны. Поэтому мы решили написать небольшой скрипт-напоминалку, который, возможно, разбудит его совесть.
#
# Напишите программу, которая получает на вход имя и долг, а затем выводит на экран сообщение,
# где имя повторяется несколько раз (и долг, возможно, тоже). Используйте числа в названиях ключей.
#
# Пример:
# Введите имя: Том
# Введите долг: 100
# Том! Том, привет! Как дела, Том? Где мои 100 рублей? Том!


user_name = input('Введите имя: ')
user_debt = int(input('Введите долг: '))

print('{0}! {0}, привет! Как дела, {0}? Где мои бабки, '
      '{0}? Когда вернешь {1} рублей, пёс?'.format(user_name, user_debt))

****************************************
# Задача 2. Путь к файлу
# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта
# часто используются абсолютные пути файлов, которые необходимо проверять.
# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные: диск и расширение файла.
# Напишите программу, которая проверяет корректность этого пути.
#
# Пример:
# Путь к файлу: C:/user/docs/folder/new_file.txt
# На каком диске должен лежать файл: C
# Требуемое расширение файла: .txt
# Путь корректен!

path = 'C:/user/docs/folder/new_file.txt'
print('Путь к файлу:', path)
disk_name = input('На каком диске должен лежать файл: ')
file_name = input('Требуемое расширение файла: ')



if not path.endswith(file_name):
    print('Ошибка расширения файла!')
elif not path.startswith(disk_name):
    print('Ошибка. Не верно указан диск!')
else:
    print('Путь корректен!')

****************************************
# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта часто используются
# абсолютные пути файлов, которые необходимо проверять.
# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные:
# диск и расширение файла. Напишите программу, которая проверяет корректность этого пути.
#
# Пример:
# Путь к файлу: C:/user/docs/folder/new_file.txt
# На каком диске должен лежать файл: C
# Требуемое расширение файла: .txt
# Путь корректен!

user_name = input('Введите имя пользователя: ')
file_name = input('Введите имя файла: ')

path = 'C:/{user}/docs/folder/{new_file}'.format(
    user=user_name,
    new_file=file_name
)

if not path.endswith('.txt'):
    print('Ошибка расширения файла!')
elif not path.startswith('C:/'):
    print('Ошибка. Не верно указан диск!')
else:
    print('Путь к файлу:', path)

****************************************
# Задача 3. IP-адрес
# IP-адрес компьютера состоит из 4 чисел, разделённых точкой. Каждое число находится в диапазоне от 0 до 255 (включительно).
#
# Пример правильного адреса: 192.168.1.0
# Пример неправильного адреса: 192.168.300.0
#
# Напишите программу, которая получает на вход 4 числа и выводит на экран IP-адрес.
# Используйте переменную ip_address в качестве шаблона. Обеспечьте контроль ввода.

# for num in range(4):
#     ip_address = ''
#     print('Ведите число: ')
#     num1 = int(input())
#     if num1 > 255:
#         print('Число не может быть больше "255"')
#         num = int(input())
#
#     num += 1
# print(ip_address)

ip_address = '{0}.{1}.{2}.{3}'
count = 0
numbers = []
while count < 4:
    new_number = int(input('Введите число:'))
    if 0 < new_number <= 255:
        numbers.append(new_number)
        count += 1
    else:
        print('Ошибка ввода! Цифра не может быть больше "255"')

print(ip_address.format(numbers[0], numbers[1], numbers[2], numbers[3]))

****************************************
# Задача 3. Разделители символов
# Человек хочет сделать рассылку поздравлений для определённого списка людей. Поздравления для разных людей он хочет написать по-разному.
#
# Напишите программу, которая запрашивает у пользователя:
# Шаблон поздравления (туда вставляется ФИ и возраст)
# ФИ людей (в одну строку, разделяются запятой)
# Возраст каждого человека (в одну строку через пробел)
# В конце  программа выводит поздравления и всех именинников в одну строку вместе с их возрастом.
#
# Пример:
# Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: С днём рождения, {name}! С {age}-летием тебя!
# Список людей через запятую: Иван Иванов, Петя Петров, Лена Ленова
# Возраст людей через пробел: 20 30 18
#
# С днём рождения, Иван Иванов! С 20-летием тебя!
# С днём рождения, Петя Петров! С 30-летием тебя!
# С днём рождения, Лена Ленова! С 18-летием тебя!
## Именинники: Иван Иванов 20, Петя Петров 30, Лена Ленова 18

while True:
    greetings = input('Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: ')
    if '{name}' and '{age}' in greetings:
        break
    print('Отсутствует одна или две конструкции')

guests = input('Список людей через запятую: ').split(', ')
age = input('Возраст людей через пробел: ')
age_list = age.split()

for i_man in range(len(guests)):
    print(greetings.format(name=guests[i_man], age=age_list[i_man]))

# для вывода именинников в одну строку
people = [
    ' '.join([guests[i_man], age_list[i_man]])
    for i_man in range(len(guests))
]

people_str = ', '.join(people)
print('Именинники:', people_str)

****************************************
# Дана структура, которая содержит описание одного из членов семьи (имя, фамилия, хобби, сколько лет и дети):
# family_member = {
#     "name": "Jane",
#     "surname": "Doe",
#     "hobbies": ["running", "sky diving", "singing"],
#     "age": 35,
#     "children": [
#         {
#             "name": "Alice",
#             "age": 6
#         },
#         {
#             "name": "Bob",
#             "age": 8
#         }
#     ]
# }
# # Напишите программу, которая реализует такую структуру: имя, фамилия, хобби, кол-во лет и дети.
# Затем, с помощью метода get и установки значения по умолчанию, проверьте есть ли ребёнок с именем Bob.
# Затем в отдельную переменную получите фамилию этого ребёнка и выведите её на экран. Если у него нет фамилии, то получите значение ‘Nosurname’.

family_member = {
    "name": "Jane",
    "surname": "Doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "name": "Alice",
            "age": 6
        },
        {
            "name": "Bob",
            "age": 8
        }
    ]
}


children_dict = dict()
for child in family_member['children']:
    children_dict[child['name']] = child['age']

search_bob = children_dict.get('Bob', {})
if search_bob:
    print('Bob найден')
else:
    print('Bob-a нет!')

surname = children_dict.get('surname', {})
if surname:
    print(surname)
else:
    print('Nosurname')

****************************************
a = [[1, 2, [3]], [1], 3]
l = [x for lst in a for x in lst]
print(l)
****************************************
# Напишите программу, которая считает количество знаков пунктуации в символьной строке.
# К знакам пунктуации относятся символы из набора ".,;:!?". Набор должен храниться в виде множества.
#
# Пример:
# Введите строку: Я! Есть. Грут?! Я, Грут и Есть.
# Количество знаков пунктуации: 6

text = input('Введите строку: ')
punct = set(".,;:!?")

count = 0
for i in text:
    if i in punct:
        count += 1
print('Количество знаков пунктуации:', count)
print(punct)
****************************************
# У мебельного магазина есть два склада, на которых хранятся разные категории товаров по парам «название — количество»:
#
# small_storage = {
#     'гвозди': 5000,
#     'шурупы': 3040,
#     'саморезы': 2000
# }
#
# big_storage = {
#     'доски': 1000,
#     'балки': 150,
#     'рейки': 600
# }
#
# Магазин решил сократить аренду и скинуть все товары в большой склад (big_storage). После этого нас попросили реализовать поиск по товарам.
# Напишите программу, которая объединяет оба словаря в один (в big_storage), затем запрашивает у пользователя название товара и выводит
# на экран его количество. Если такого товара нет, то выводит об этом ошибку. Для получения значения используйте метод get.

small_storage = {
    'гвозди': 5000,
    'шурупы': 3040,
    'саморезы': 2000
}

big_storage = {
    'доски': 1000,
    'балки': 150,
    'рейки': 600
}

big_storage.update(small_storage)

while True:
    input_item = input('Введите название товара: ')
    for item in big_storage.keys():
        if item == input_item:
            print('Количество товара', item, '-', big_storage.get(item))
            break
    else:
        print('Ошибка! Такого товара в базе нет!')


# решение от курса:
# big_storage.update(small_storage)
#
# user_item = input("Введите название нужного товара: ")
# if big_storage.get(user_item, None):
#     print(big_storage[user_item])
# else:
#     print("Такого товара нет!")

****************************************
# На вход программе поступает целое число num. Напишите программу создания словаря,
# который включает в себя ключи от 1 до num, а значениями соответствующего ключа будет значение ключа в квадрате.
#
# Пример:
# Введите целое число: 5
#
# Результат: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

num = int(input('Введите целое число: '))

num_dict = dict()

for numb in range(1, num + 1):
    num_dict[numb] = numb ** 2

print(num_dict)

****************************************
# Дана структура, которая содержит описание одного из членов семьи (имя, фамилия, хобби, сколько лет и дети):
# family_member = {
#     "name": "Jane",
#     "surname": "Doe",
#     "hobbies": ["running", "sky diving", "singing"],
#     "age": 35,
#     "children": [
#         {
#             "name": "Alice",
#             "age": 6
#         },
#         {
#             "name": "Bob",
#             "age": 8
#         }
#     ]
# }
# # Напишите программу, которая реализует такую структуру: имя, фамилия, хобби, кол-во лет и дети.
# Затем, с помощью метода get и установки значения по умолчанию, проверьте есть ли ребёнок с именем Bob.
# Затем в отдельную переменную получите фамилию этого ребёнка и выведите её на экран. Если у него нет фамилии, то получите значение ‘Nosurname’.

family_member = {
    "name": "Jane",
    "surname": "Doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "name": "Alice",
            "age": 6
        },
        {
            "name": "Bob",
            "age": 8
        }
    ]
}


children_dict = dict()
for child in family_member['children']:
    children_dict[child['name']] = child['age']

search_bob = children_dict.get('Bob', {})
if search_bob:
    print('Bob найден')
else:
    print('Bob-a нет!')

surname = children_dict.get('surname', {})
if surname:
    print(surname)
else:
    print('Nosurname')

****************************************
# Есть готовый словарь игроков, у каждого игрока есть имя, команда, в которой он играет, а также его текущий статус,
# в котором указано, отдыхает он, тренируется или путешествует:
#
# players_dict = {
#     1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
#     2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
#     3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
#     4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
#     5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
#     6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
#     7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
#     8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
# }
#
# Напишите программу, которая выводит на экран вот такие данные в разных строчках:
# Все члены команды из команды А, которые отдыхают.
# Все члены команды из группы B, которые тренируются.
# Все члены команды из команды C, которые путешествуют.

players_dict = {
    1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
    2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
    3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
    4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
    5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
    6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
    7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
    8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
}

rest_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'A' and player['status'] == 'Rest'
]

traning_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'B' and player['status'] == 'Training'
]

travel_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'C' and player['status'] == 'Travel'
]

print(rest_players)
print(traning_players)
print(travel_players)

****************************************
# Мы работаем в одной небольшой торговой компании, где все данные о продажах фруктов за год сохранены в словаре в виде пар «название фрукта — доход»:
#
# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'grapefruit': 300.40,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,
# }
#
# В компании наступил небольшой кризис, и нам поручено провести небольшой анализ дохода.
# Напишите программу, которая находит общий доход, затем выводит фрукт с минимальным доходом и удаляет его из словаря. Выведите итоговый словарь на экран.
# Результат работы программы:
# Общий доход за год составил 35419.34 рублей
# Самый маленький доход у grapefruit. Он составляет 300.4 рублей
# Итоговый словарь: {'apple': 5600.2, 'orange': 3500.45, 'banana': 5000.0, 'bergamot': 3700.56, 'durian': 5987.23, 'peach': 10000.5, 'pear': 1020.0, 'persimmon': 310.0}

incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'grapefruit': 300.40,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00,
}

min_value = min(incomes.values())
min_key = ''
for val in incomes:
    if incomes[val] == min_value:
        min_key = val

print('Оющий доход за год составил', sum(incomes.values()), 'рублей')
incomes.pop(min_key)
print('Самый маленький доход у', min_key, '. Он составляет', min_value, 'рублей')
print('Итоговый словарь:', incomes)

****************************************
# На одном семинаре по теории множеств нужно показать наглядный пример, как эти множества работают. Для начала было сгенерировано два набора чисел:
# nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
# nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]
#
# Вас попросили написать программу, которая будет наглядно демонстрировать работу со множествами с помощью этих чисел.
# Напишите программу, которая преобразует списки во множества и убирает повторяющиеся элементы.
# Затем удаляет минимальный элемент из каждого множества и добавляет туда случайное число в диапазоне от 100 до 200. Затем выполните следующие действия со множествами:
#
# Вывести все элементы множеств (объединение).
# Вывести только общие элементы (пересечение).
# Вывести элементы, входящие в nums_2, но не входящие в nums_1.
#
# Пример результата:
# 1-е множество: {1, 2, 3, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 26, 27, 29}
# 2-е множество: {1, 5, 7, 8, 9, 11, 12, 13, 15, 16, 19, 21, 22, 23, 24, 29, 30}
#
# Минимальный элемент 1-го множества: 1
# Минимальный элемент 2-го множества: 1
#
# Случайное число для 1-го множества: 126
# Случайное число для 2-го множества: 169
#
# Объединение множеств: {2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 169, 126}
# Пересечение множеств: {7, 8, 11, 12, 13, 15, 16, 19, 21, 22, 24, 29}
# Элементы, входящие в nums_2, но не входящие в nums_1: {5, 9, 169, 23, 30}
import random

nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]

nums_1 = set(nums_1)
nums_2 = set(nums_2)
min_nums_1 = min(nums_1)
min_nums_2 = min(nums_2)
random_min_nums_1 = random.randint(100, 200)
random_min_nums_2 = random.randint(100, 200)

print('Первое множество:', nums_1)
print('Второе множество:', nums_2)
print()
print('Минимальный элемент 1-го множества:', min_nums_1)
print('Минимальный элемент 2-го множества:', min_nums_2)
print()
print('Случайное число для 1-го множества:', random_min_nums_1)
print('Случайное число для 2го множества:', random_min_nums_2)

nums_1.remove(min_nums_1)
nums_2.remove(min_nums_2)
nums_1.add(random_min_nums_1)
nums_2.add(random_min_nums_2)
print('Объединение множеств:', nums_1 | nums_2)
print('Пересечение множеств:', nums_1 & nums_2)
print('Элементы, входящие в nums_2, но не входящие в nums_1:', nums_2 - nums_1)

****************************************
# Пользователь вводит фамилию, имя студента, город проживания, вуз, в котором он учится, и все его оценки.
# Всё вводится в одну строку через пробел. Напишите программу, которая по этой информации составит словарь и выведет его на экран.
#
# Пример:
# Введите информацию о студенте через пробел (имя, фамилия, город, место учёбы, оценки): Илья Иванов Москва МГУ 5 4 4 4 5
#
# Результат:
# Имя - Илья
# Фамилия - Иванов
# Город - Москва
# Место учёбы - МГУ
# Оценки - [5, 4, 4, 4, 5]

student = input(
    'Введите информацию о студенте через пробел\n'
    '(имя, фамилия, город, место учебы, оценки): '
)

student_list = student.split()

student_dict = dict()

for i_list in student_list:
    student_dict['Имя'] = student_list[0]
    student_dict['Фамилия'] = student_list[1]
    student_dict['Город'] = student_list[2]
    student_dict['Место учебы'] = student_list[3]
    student_dict['Оценки'] = []
for i_grade in student_list[4:]:
    student_dict['Оценки'].append(int(i_grade))

for i_info in student_dict:
    print(i_info, '-', student_dict[i_info])

****************************************
# Лингвистам нужно собрать данные о частоте букв в тексте, исходя из этих данных будет строиться гистограмма частоты букв.
# Напишите программу, которая получает сам текст и считает, сколько раз в строке встречается каждый символ.
# На экран нужно вывести содержимое в виде таблицы, отсортированное по алфавиту, а также максимальное значение частоты.
#
# Пример:
# Введите текст: Здесь что-то написано
#   : 2
# - : 1
# З : 1
# а : 2
# д : 1
# е : 1
# и : 1
# н : 2
# о : 3
# п : 1
# с : 2
# т : 2
# ч : 1
# ь : 1
# Максимальная частота: 3

def histograme(string):
    text_dict = dict()
    for symbol in string:
        if symbol in text_dict.keys():
            text_dict[symbol] += 1
        else:
            text_dict[symbol] = 1

    return text_dict


text = input('Введите текст: ').lower()
hist = histograme(text)

for key in sorted(hist.keys()):
    print(key, ':', hist[key])

print('Максимальная частота', max(hist.values()))  # метод


****************************************
# Энтузиаст Степан, купив новый телефон, решил написать для него свою собственную операционную систему.
# И, конечно же, первое, что он захотел в ней реализовать, — это телефонная книга.
#
# Напишите программу, которая запрашивает у пользователя имя контакта и номер телефона, добавляет их в словарь и выводит
# на экран текущий словарь контактов. Запрос на добавление идёт бесконечно (но можно задать своё условие для завершения программы).
# Обеспечьте контроль ввода: если это имя уже есть в словаре, то выведите соответствующее сообщение.
#
# Пример:
# Текущие контакты на телефоне:
# <Пусто>
#
# Введите имя: Иван
# Введите номер телефона: 100200300
# # Текущие контакты на телефоне:
# Иван  100200300
#
# Введите имя: Лена
# Введите номер телефона: 8005555522
# # Текущие контакты на телефоне:
# Иван  100200300
# Лена  8005555522
#
# Введите имя: Иван
# Ошибка: такое имя уже существует.
# ...


contacts_dict = {}

while True:
    print('Текущие контакты на телефоне:')
    for i_cont in contacts_dict:
        print(i_cont, contacts_dict[i_cont])
    input_name = input('\nВведите имя: ')
    if input_name in contacts_dict:
        print('Ошибка: такое имя уже существует.')
    else:
        input_number = int(input('Введите номер телефона: '))
        contacts_dict[input_name] = input_number


****************************************
# Напишите программу, которая находит все различные цифры в символьной строке.
# Для решения используйте множество (цифры будут различные, и поиск во множестве намного быстрее, чем в списке).
# Подсказка: можно использовать вот такое сравнение '0'<=x<='9'
#
# Пример:
# Введите строку: ab1n32kz2
# Различные цифры строки: 123

user_input = set(input('Введите строку: '))
numbers = set()

for symb in user_input:
    if '0'<= symb <='9':
        numbers.add(symb)

print(''.join(numbers))

****************************************
# Заполните один кортеж десятью случайными целыми числами от 0 до 5 включительно.
# Также заполните второй кортеж числами от −5 до 0. Объедините два кортежа, создав тем самым третий кортеж.
# С помощью метода кортежа определите в нём количество нулей. Выведите на экран третий кортеж и количество нулей в нём.
words = ('нулей', 'ноль', 'нуля', 'нуля', 'нуля', 'нулей', 'нулей', 'нулей', 'нулей', 'нулей', 'нулей')

import random

numbers = (0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5)
negative_numbers = (-5, -4, -3, -2, -1, 0, -5, -4, -3, -2, -1, 0,)
one_tuple = tuple(random.sample(numbers, 10))
two_tuple = tuple(random.sample(negative_numbers, 10))
result_tuple = one_tuple + two_tuple

print('Первый кортеж', one_tuple)
print('Второй кортеж', two_tuple)
print('Третий кортеж {} \nв нем: {} {}'.format(result_tuple, result_tuple.count(0), words[result_tuple.count(0)]))

****************************************
# Какой-то нехороший человек решил подпортить жизнь frontend-разработчикам и добавил в код сайта символ ~ (тильда).
# Но программисты быстро решили эту проблему, пройдясь по всему коду маленькой программой.
#
# Пользователь вводит строку. Напишите программу, которая проходит по строке и выводит в консоль индексы символа ~.
# Для решения этой задачи (и остальных тоже) используйте функцию enumerate.
#
# Пример:
# Строка: so~mec~od~e
# Ответ: 2 6 9

str_input = input('Строка:')

for i_sym, sym in enumerate(str_input):
    if sym == '~':
        print(i_sym, end=' ')

# решение с list comprehension
result = [str(i_sym) for i_sym, sym in enumerate(str_input) if sym == '~']
print(('Ответ:'), ' '.join(result))

# решение с использованием функции (выводим индекс необходимого символа)
def get_indexes(where_to_search, what_to_search):
    return [str(index) for index, letter in enumerate(where_to_search) if letter == what_to_search]

# генератор кортежа из случайных чисел
def create_random_tuple(a, b, n):
    return tuple([random.randint(a, b) for _ in range(n)])
#  first = create_random_tuple(0, 5, 10) - создать кортеж из 10 случайных чисел от 0 до 5

print(('Ответ:'), ' '.join(get_indexes(str_input, '~')))

****************************************
# Задача 1. Кризис миновал
# Закупки грейпфрутов прекратились, и кризис в торговой компании закончился. И теперь можно вернуться к обыденным делам.
# Однако внезапно вы обнаружили, что старый скрипт, который выводит данные о фруктах, куда-то потерялся.
# Необходимо его восстановить.
#
# Дан словарь с парами «название фрукта — цена»:
# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,
# }
#
# Вывести на экран словарь в следующем виде:
# apple -- 5600.2
# orange -- 3500.45
# banana -- 5000.0
# bergamot -- 3700.56
# durian -- 5987.23
# peach -- 10000.5
# pear -- 1020.0
# persimmon -- 310.0
# Не используйте обращение по ключу словаря.

incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00,
}

for i_name, i_price in incomes.items():
   print('{name} -- {price}'.format(name=i_name, price=i_price))

****************************************
# В базе данных поликлиники хранятся паспортные данные людей. Хранение реализовано с помощью словаря,
# состоящего из пар «Серия и номер паспорта — фамилия и имя». Серия и номер — составной ключ,
# а фамилия и имя — составное значение.
#
# data = {
#     (5000, 123456): ('Иванов', 'Василий'),
#     (6000, 111111): ('Иванов', 'Петр'),
#     (7000, 222222): ('Медведев', 'Алексей'),
#     (8000, 333333): ('Алексеев', 'Георгий'),
#     (9000, 444444): ('Георгиева', 'Мария')
# }
#
# Реализуйте функцию, которая по номеру и серии паспорта выдаёт имя и фамилию человека.

data = {
    (5000, 123456): ('Иванов', 'Василий'),
    (6000, 111111): ('Иванов', 'Петр'),
    (7000, 222222): ('Медведев', 'Алексей'),
    (8000, 333333): ('Алексеев', 'Георгий'),
    (9000, 444444): ('Георгиева', 'Мария')
}

serial = int(input('Введите серию: '))
number = int(input('Введите номер: '))

passport = (serial, number)

if passport in data:
    print(data[passport])
else:
    print('Такого человека нет')

****************************************
# Андрей однажды уже писал функции для расчёта площади сферы и объёма шара.
# И теперь для своей курсовой работы ему пришлось связаться с цилиндрами.
#
# Пользователь вводит два значения: радиус и высоту. Напишите функцию для расчёта площади
# боковой поверхности цилиндра и его полной площади. Функция должна возвращать два эти значения.
# После этого в основной программе выводятся оба ответа в две строки.
#
# Площадь боковой поверхности (r — радиус, h — высота):
# side = 2pi * r * h
# Полная площадь (S — площадь круга):
# full = side + 2 * S
import math

def cylinder_s (r, h):
    r_side = 2 * math.pi * r * h
    r_full = r + 2 * math.pi * r ** 2

    return r_side, r_full


radius = float(input('Введите радиус: '))
height = float(input('Введите высоту: '))

r_side, r_full = cylinder_s(radius, height)

print('Площадь боковой поверхности:', round(r_side, 2))
print('Полная площадь:', round(r_full, 2))

****************************************
# Создайте два списка, в каждом из которых лежит 10 случайных букв алфавита (могут повторяться).
# Затем для каждого списка создайте словарь из пар «индекс — значение» и выведите оба словаря на экран.
#
# Подсказка: random
#
# Пример:
# Первый список: ['й', 'р', 'с', 'г', 'а', 'а', 'т', 'ж', 'е', 'к']
# Второй список: ['д', 'а', 'а', 'в', 'т', 'ж', 'р', 'б', 'й', 'р']
#
# Первый словарь: {0: 'й', 1: 'р', 2: 'с', 3: 'г', 4: 'а', 5: 'а', 6: 'т', 7: 'ж', 8: 'е', 9: 'к'}
# Второй словарь: {0: 'д', 1: 'а', 2: 'а', 3: 'в', 4: 'т', 5: 'ж', 6: 'р', 7: 'б', 8: 'й', 9: 'р'}

import random

def random_generator (symb, how_symb):
    result = list()
    for i in range(how_symb):
        result.append(random.choice(symb))
    return result


def get_index(text):
    result = dict()
    for index, sym in enumerate(text):
        result.update({index: sym})
    return result


symb = (
    'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о',
    'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я'
)

first_list = random_generator(symb, 10)
second_list = random_generator(symb, 10)
first_tuple = get_index(first_list)
second_tuple = get_index(second_list)

print('Первый список:', first_list)
print('Второй список:', second_list)
print('\nПервый словарь:', first_tuple)
print('Второй словарь:', second_tuple)

****************************************
# Задача 2. Сервер
# У вас есть данные о сервере, которые хранятся в виде вот такого словаря:
## server_data = {
#     "server": {
#         "host": "127.0.0.1",
#         "port": "10"
#     },
#     "configuration": {
#         "access": "true",
#         "login": "Ivan",
#         "password": "qwerty"
#     }
# }
## Напишите программу, которая выводит для пользователя эти данные так же красиво и понятно, как они представлены в словаре.
# Результат работы программы:
# server:
#     host: 127.0.0.1
#     port: 10
# configuration:
#     access: true
#     login: Ivan
#     password: qwerty

server_data = {
    "server": {
        "host": "127.0.0.1",
        "port": "10"
    },
    "configuration": {
        "access": "true",
        "login": "Ivan",
        "password": "qwerty"
    }
}

for i_keys, i_values in server_data.items():
    print('{key}:'.format(key=i_keys), end='\n')
    for j_keys, j_values in i_values.items():  # вместо "server_data[i_keys].items()" можно обратится напрямую к значению
        print('\t{j_keys}: {j_values}'.format(j_keys=j_keys, j_values=j_values))


****************************************
# Мы уже реализовывали телефонную книгу для Степана, однако её проблема была в том,
# что туда нельзя было добавить людей с одинаковыми именами. Надо это исправить.
#
# Напишите программу, которая запрашивает у пользователя имя контакта, фамилию и номер телефона,
# добавляет их в словарь и выводит на экран текущий словарь контактов. Словарь состоит из пар «Ф. И. — телефон»,
# где Ф. И. — это составной ключ. Запрос на добавление идёт бесконечно
# (но можно задать своё условие для завершения программы).
# Обеспечьте контроль ввода: если этот человек уже есть в словаре, то выведите соответствующее сообщение.

def print_phonebook(data):
    print('\nТелефонная книга:')
    for user in data:
        print(f'{user[0]} {user[1]}: {data[user]}')

phonebook = dict()
while True:
    first_name = input('\nВведите фамилию ("выход" чтобы закончить): ')
    if first_name != 'выход':
        second_name = input('Введите имя: ')
        contact = (first_name, second_name)
        user_number = int(input('Введите номер телефона: '))
        if contact not in phonebook:
            phonebook.update({contact: user_number})
            print_phonebook(phonebook)
        else:
            print('Такой контакт уже есть!')
    else:
        break

# решение от курса:
# contacts = {}
#
# while True:
#     name = input("Введите имя: ")
#     surname = input("Введите фамилию: ")
#     name_n_surname = (name, surname)
#     if name_n_surname not in contacts:
#         contacts[name_n_surname] = int(input("Введите номер телефона: "))
#     else:
#         print("Такой контакт уже есть!")
#     print(contacts)

****************************************
# Дан код, в котором должно происходить следующее: изначально есть кортеж из пяти чисел.
# Затем вызывается функция, которая получает на вход кортеж чисел, генерирует случайный индекс и случайное значение,
# а затем по этим индексу и значению меняет сам кортеж. Функция должна возвращать кортеж и случайное значение.
#
# В основном коде функция используется два раза, и на экран два раза выводится новый кортеж и случайное значение.
# Причём второй раз выводится сумма первого случайного значения и второго.
## Однако код, который вам дали, оказался нерабочим. Исправьте его в соответствии с описанием.
import random

def change(nums):
    index = random.randint(0, 4)
    value = random.randint(100, 1000)
    nums = list(nums)
    nums[index] = value
    return tuple(nums), value


my_nums = (1, 2, 3, 4, 5)
my_nums, rand_val = change(my_nums)
new_nums, new_rand_val = change(my_nums)

print(my_nums, rand_val)
print(new_nums, new_rand_val + rand_val)


****************************************
# Нашему другу дали задачу: «Есть словарь, в котором ключи — это числа от 0 до 4,
# а значения ключей — числа 0, 100, 144, 20 и 19 соответственно.
# Нужно написать программу, которая выводит список тех значений, # у которых ключ делится на 2.
# Причём программа должна быть в одну строчку.» Программа у друга работает,
# но её не приняли, так как в ней не используется правило «не повторяйся» — это когда части кода не повторяются.
# Помогите другу исправить решение задачи так, чтобы код в строчке не повторялся.
#
# Решение друга:
# print([{0: 0, 1: 100, 2: 144, 3: 20, 4: 19}[i_key] for i_key in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19} if i_key % 2 == 0])
# [0, 144, 19]

print([i_value for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items() if i_key % 2 == 0])

# result = list()
# for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items():
#     if i_key % 2 == 0:
#         result.append(i_value)
# print(result)

****************************************
# Один заказчик попросил нас написать небольшой скрипт для своих криптографических нужд.
# При этом он заранее предупредил, что скрипт должен уметь работать с любым итерируемым типом данных.
# Напишите функцию, которая возвращает список из элементов итерируемого объекта
# (кортежа, строки, списка, словаря), у которых индекс чётный.
#
# Пример 1:
# Допустим, есть такая строка: 'О Дивный Новый мир!'
# Результат: ['О', 'Д', 'в', 'ы', ' ', 'о', 'ы', ' ', 'и', '!']
#
# Пример 2:
# Допустим, есть такой список: [100, 200, 300, 'буква', 0, 2, 'а']
# Результат: [100, 300, 0, 'а']
#
# Примечание: для проверки типа можно использовать функцию isinstance(<элемент>, <тип данных>),
# которая возвращает True, если элемент принадлежит к этому типу данных, и возвращает False в противном случае.

def even_index(object):
    result = [symb for index, symb in enumerate(object) if index % 2 == 0]
    return result


text_list = ['О', 'Дивный', 'Новый мир!']  # список
text_set = {'дрыхнуть', 'спать', 'кемарить', 'тусить', 'гонять'}  # множество
text_dict = {'веселиться: грустить', 'стоять: сидеть', 'моргать: зевать', 'идти: бежать'}  # словарь
text = 'О дивный новый мир'  # строка
text_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)  # кортеж


print('Такой список: ', text_list)
print('Результат: ', even_index(text_list))

print('\nТакое множество: ', text_set)
print('Результат: ', even_index(text_set))

print('\nТакой словарь: ', text_dict)
print('Результат: ', even_index(text_dict))

print('\nТакая строка: ', text)
print('Результат: ', even_index(text))

print('\nТакой кортеж: ', text_tuple)
print('Результат: ', even_index(text_tuple))




****************************************
site = {
    'html': {
        'head': {
            'title': 'Куплю/продам телефон недорого'
        },
        'body': {
            'h2': 'У нас самая низкая цена на iphone',
            'div': 'Купить',
            'p': 'продать'
        }
    }
}

# TODO здесь писать код
import copy


def display_struct(struct, spaces=1):
    for key, value in struct.items():
        if isinstance(value, dict):
            print(' ' * spaces, key)
            display_struct(value, spaces + 3)
        else:
            print('{}{} : {}'.format(' ' * spaces, key, value))


def create_site(site, total, phone=None, copy_site={}):
    if total == 0:
        return
    phone = input('Введите название продукта для нового сайта: ')
    total -= 1

    site['html']['head']['title'] = 'Куплю/продам {} недорого'.format(phone)
    site['html']['body']['h2'] = 'У нас самая низкая цена на {}'.format(phone)
    new_site = copy.deepcopy(site)
    copy_site.update({'\nСайт для {}:'.format(phone): site})
    display_struct(copy_site)
    create_site(new_site, total)
    return


total_site = int(input('Сколько сайтов: '))
create_site(site, total_site)
# задача оказалась для меня сложной, с выводом как в примере так и не справился...
****************************************
# Обычно программисты любят, когда всё просто и понятно. Но Антон не из таких.
# Он любит устраивать себе челлендж, развиваться и сразу применять на практике то, что только что узнал.
# И в этот раз он подумал реализовать подсчёт факториала без использования циклов.
#
# Напишите функцию, которая считает факториал числа с помощью рекурсии.
#
# Кстати, в Python есть ограничение на количество рекурсивных вызовов.
# Попробуйте передать своей функции, например, число 1000 и посмотрите, что будет.
def factorial(num):
    if num == 1:
        return num
    return num * factorial(num - 1)


print(factorial(5))

****************************************
# В одном проекте на 10 000 строк кода произошла критическая ошибка.
# Хорошо, что старший разработчик быстро её нашёл и исправил. Он решил проверить, смогли бы вы её исправить,
# если бы его не было на месте. Поэтому он написал для вас код с аналогичной ошибкой:

import random

def change_dict(dct):
    num = random.randint(1, 100)
    for i_key, i_value in dct.items():
        if isinstance(i_value, list):
            i_value.append(num)
        if isinstance(i_value, dict):
            i_value[num] = i_key
        if isinstance(i_value, set):
            i_value.add(num)


nums_list = [1, 2, 3]
some_dict = {1: 'text', 2: 'another text'}
uniq_nums = {1, 2, 3}
common_dict = {1: nums_list.copy(), 2: some_dict.copy(), 3: uniq_nums.copy(), 4: (10, 20, 30)}

change_dict(common_dict)
print(common_dict)
# Суть кода в том, что у вас есть общий словарь из нескольких ключей, значения которых равны ранее объявленным переменным.
# Затем вызывается функция, которая должна изменять значения словаря, добавляя к значениям случайное число,
# в зависимости от типа данных. Но при этом меняются и ранее объявленные переменные.
# Исправьте эту ошибку и убедитесь, что nums_list, some_dict и uniq_nums не меняются.
print(nums_list, some_dict, uniq_nums)

# Либо мы можем применить вспомогательную функцию, которая сделает это за нас:
import copy

common_dict = {1: nums_list, 2: some_dict, 3: uniq_nums, 4: (10, 20, 30)}
common_dict_2 = copy.deepcopy(common_dict)  # Она будет особенно полезна в структурах, в которых множество вложенных переменных
change_dict(common_dict_2)
print(common_dict_2)
print(nums_list, some_dict, uniq_nums)

****************************************
# Вы пишете небольшое приложение для работы с файлами. Реализуйте функцию, которая может принимать на вход три аргумента:
# вопрос пользователю (на который нужно ответить да или нет), сообщение о неправильном вводе и количество попыток.
# Вопрос — обязательный позиционный аргумент, остальные — со значениями по умолчанию.
# При корректном ответе функция может возвращать что угодно — например, число 1 при ответе «да» или 0 при ответе «нет».
#
# В основной программе вызовите функцию минимум три раза:
# только с вопросом, с вопросом и сообщением об ошибке, с вопросом и количеством попыток.
#
# Пример работы программы:
# Вы действительно хотите выйти? что
# Неверный ввод. Пожалуйста, введите 'да' или 'нет'.
# Осталось попыток: 3
# Вы действительно хотите выйти? да
# Удалить файл? не знаю
# Так удалить или нет?
# Осталось попыток: 3
# Удалить файл? нет
# Записать файл? ага
# Неверный ввод. Пожалуйста, введите 'да' или 'нет'.
# Осталось попыток: 1
# Записать файл? да

def func(question,
         message='Неверный ввод. Пожалуйста введите "да" или "нет".',
         count=4):
    while True:
        user_input = input(question).lower()
        if user_input == 'да':
            return 1
        if user_input == 'нет':
            return 0
        count -= 1
        if count == 0:
            print('Попытки закончились!')
            break
        print(message)
        print('Осталось попыток:', count)


print(func('Сохранить файл? '))
print(func('Удалить файл? ', 'Да или нет?'))
print(func('Удалить файл? ', message='Так удалить или нет?'))
print(func('Записать файл? ', count=2))

****************************************
# На одном из форумов, посвящённых программированию, пользователь выложил такой код
# для расчёта степени числа без использования циклов, ** и функции math.pow():

def power(num, degree):
    if degree <= 0:
        return 1
    return num * power(num, degree - 1)

float_num = float(input('Введите вещественное число: '))
int_num = int(input('Введите степень числа: '))
print(float_num, '**', int_num, '=', power(float_num, int_num))

# Другие пользователи отметили, что это решение нерабочее и в нём есть ошибки. Исправьте это решение,
# не используя циклы, возведение в степень через ** и функцию math.pow()
#
# Правильный результат:
# Введите вещественное число: 1.5
# Введите степень числа: 5
# 1.5 ** 5 = 7.59375
****************************************
# Друг никак не может понять эту тему с изменяемыми и неизменяемыми типами, ссылками, объектами и их id.
# Видя, как он мучается, вы решили помочь ему и объяснить эту тему наглядно.
# Пользователь вводит любой объект. Напишите программу, которая выводит на экран тип введённых данных,
# информацию о его изменяемости, а также id этого объекта.
#
# Пример 1:
# Введите данные: привет
#
# Тип данных: str (строка)
# Неизменяемый (immutable)
# Id объекта: 1705156583984
#
# Пример 2:
# Введите данные: {‘a’: 10, ‘b’: 20}
#
# Тип данных: dict (словарь)
# Изменяемый (mutable)
# Id объекта: 1705205308536

# if type(data) in (int, float, str, tuple, bool):
#     print('Неизменяемый (immutable)')
# elif type(data) in (str, set, dict):
#     print('Изменяемый (mutable)')

data_names_dict = {
    "<class 'str'>": "строка",
    "<class 'dict'>": "словарь",
    "<class 'list'>": "список",
    "<class 'set'>": "множество",
    "<class 'int'>": 'число',
    "<class 'bool'>": 'булево'
}

mutable_check_helper = {
    "mutable": ("словарь(dict)", "список(list)", "множество(set)"),
    "immutable": ("число(int)", "число с плавающей точкой(float)", "строка(str)", "кортеж(tuple)", "булево(bool)")
}


def check_info(data):
    type_of_data = type(data)
    name_of_data = ""
    if str(type_of_data) in data_names_dict:
        name_of_data = data_names_dict[str(type_of_data)]

    if name_of_data in mutable_check_helper["mutable"]:
        property_of_data = "Изменяемый (mutable)"
    else:
        property_of_data = "Неизменяемый (immutable)"

    print(f"Тип данных: {type_of_data} ({name_of_data})")
    print(property_of_data)
    print("Id объекта:", id(data))


data_in = True
check_info(data_in)

****************************************
# При работе со значениями по умолчанию и изменяемыми типами данных нужно знать и остерегаться ещё одной интересной штуки.
# Напишите функцию с двумя аргументами: первый — число num, позиционный аргумент;
# второй — список lst, по умолчанию он пустой.
# В теле функции в список добавляется число num и сам список выводится на экран.
#
# В основной программе вызовите функции три раза только с одним аргументом (числом), например так:
# add_num(5)
# add_num(10)
# add_num(15)
#
# И посмотрите, что произойдёт.
# После этого сделайте значение lst по умолчанию None и поправьте функцию, чтобы она работала правильно.

def add_num(num, lst=None):
    lst = lst or []
    if not lst:
        lst = []
    lst.append(num)
    print(lst)


add_num(5)
add_num(10)
add_num(15)

****************************************
# Когда мы работаем с большой многоуровневой структурой, нам нередко необходимо пройтись по ней и найти нужный элемент.
# Для этого в программировании используются специальные алгоритмы поиска.
# Напишите функцию, которая находит заданный пользователем ключ в словаре и выдаёт значение этого ключа на экран.
# В качестве примера можно использовать такой словарь:
#
# site = {
#     'html': {
#         'head': {
#             'title': 'Мой сайт'
#         },
#         'body': {
#             'h2': 'Здесь будет мой заголовок',
#             'div': 'Тут, наверное, какой-то блок',
#             'p': 'А вот здесь новый абзац'
#         }
#     }
# }
#
# Пример 1:
# Искомый ключ: h2
# Значение: Здесь будет мой заголовок
#
# Пример 2:
# Искомый ключ: abc
# Такого ключа в структуре сайта нет.
site = {
    'html': {
        'head': {
            'title': 'Мой сайт'
        },
        'body': {
            'h2': 'Здесь будет мой заголовок',
            'div': 'Тут, наверное, какой-то блок',
            'p': 'А вот здесь новый абзац'
        }
    }
}

def find_key(key, data):
    if key in data:
        return data[key]

    for i_key in data.values():
        if isinstance(i_key, dict):
            result = find_key(key, i_key)
            if result:
                break
    else:
        result = None

    return result



user_input = (input('Искомый ключ: '))
value = find_key(user_input, site)
if value:
    print('Значение:', value)
else:
    print('Такого ключа нет')


****************************************
# Нашего друга попросили написать функцию, которая на вход принимает список всякого мусора.
# Ему нужно подготовить из этого списка список словарей, чтобы его коллеги смогли дальше продолжить обработку данных.
# Вот список правил, что нужно сделать с изначальным списком:
#
# Если в списке встретился словарь, то оставляем его.
# Если в списке встретилась строка, то из неё нужно сделать словарь и положить его в итоговый список,
# например  “abc” → {“abc”: “abc”}.
#
# С числами нужно сделать то же самое, что и со строками.
# Всё остальное выкидываем из нашего списка.
# Друг написал программу, но в ней ошибка, так как она что-то не то выводит :( Нужна ваша помощь, вот сама программа:

# def create_dict(data, template=dict()):
#     if isinstance(data, dict):
#         return data
#     if isinstance(data, int) or isinstance(data, float) or isinstance(data, str):
#         return template[data] = data
#
#
# def data_preparation(old_list):
#     new_list = []
#     for i_element in old_list:
#         new_list.append(create_dict(i_element))
#     return new_list
#
#
# data = [“sad”, {“sds”: 23}, {43}, [12, 42, 1], 2323]
# data = data_preparation(data)
# print(data)
# Исправьте программу и убедитесь, что всё работает верно.


def create_dict(data, template=None):
    if isinstance(data, dict):
        return data
    elif isinstance(data, (int, float, str)):
        template = template or dict()
        template[data] = data
        return template


def data_preparation(old_list):
    new_list = []
    for i_element in old_list:
        new_elem = (create_dict(i_element))
        if new_elem:
            new_list.append(new_elem)  # если есть новый элемент - добавляем его в список
    return new_list


data = ['sad', {'sds': 23}, {43}, [12, 42, 1], 2323]
print(data_preparation(data))

****************************************
# Вы работаете системным администратором в одной компании. На диске каждого сотрудника компании
# в специальной папке access лежит файл admin.bat. Этот файл предназначен для вас, и вам нужен путь до этого файла,
# причём как относительный, так и абсолютный. Недолго думая, вы решили написать небольшой скрипт,
# который закинете по сети к этому файлу.
# Напишите программу, которая выводит на экран относительный и абсолютный пути до файла admin.bat.
#
# Пример результата:
# Абсолютный путь до файла: C:\Users\Roman\PycharmProjects\Skillbox\access\admin.bat
# Относительный путь до файла: Skillbox\access\admin.bat
import os


folder_name = 'access'
file_name = 'admin.bat'
rel_path = os.path.join('..', folder_name, file_name)
abs_path = os.path.abspath(rel_path)

print('Относительный путь до файла:', rel_path)
print('Абсолютный путь до файла:', abs_path)

****************************************
# Андрей для себя хочет сделать экспериментальный сайт, где будет красиво отображаться вся структура его диска:
# папки одними иконками, файлы — другими. Поэтому ему нужен код, который поможет определить, какой тип иконки вставить.
#
# Напишите программу, которая по заданному абсолютному пути определяет, на что указывает этот путь
# (на директорию, файл, или же путь является ссылкой), и выведите соответствующее сообщение.
# Если путь указывает на файл, то также выведите его размер (сколько он весит в байтах).
# Обеспечьте контроль ввода: проверка пути на существование.
# Подсказка: для вывода размера файла поищите соответствующий метод.
#
# Пример 1:
# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py
# Это файл
# Размер файла: 605 байт
#
# Пример 2:
# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py
# Указанного пути не существует
import os

def find_file(file):
    print('Путь:', file)
    if os.path.exists(file):
        if os.path.isfile(file):
            print('Это файл')
            print('Размер файла:', os.path.getsize(file), 'байт')
        if os.path.isdir(file):
            print('Это папка')
            for i_elem in os.listdir(file):
                path = os.path.join(file, i_elem)
                print('Содержимое папки:', path)
    else:
        print('Указанного пути не существует')


file = 'Отряды.py'  # название файла

abs_path = os.path.abspath(os.path.join('..', 'lesson17', file))  # указываем правильный путь

find_file(abs_path)

****************************************
# Одному программисту дали задачу для обработки неких результатов тестирования двух групп людей.
# Файл первой группы (group_1.txt) находится в папке task, файл второй группы (group_2.txt) — в папке Additional_info.
# Содержимое файла group_1.txt
# Бобровский Игорь 10
# Дронов Александр 20
# Жуков Виктор 30
#
# Содержимое файла group_2.txt
# Павленко Геннадий 20
# Щербаков Владимир 35
# Marley Bob 15
#
# На экран нужно было вывести сумму очков первой группы, затем разность очков опять же первой группы
# и напоследок — произведение очков уже второй группы.
# Программист оказался не очень опытным, писал код наобум и даже не стал его проверять. И оказалось,
# этот код просто не работает. Вот что он написал:
# file = open('E:\task\group_1.txt', 'read')
# summa = 0
# for i_line in file:
#     info = i_line.split()
#     summa += info[2]
# file = open('E:\task\group_1.txt', 'read')
# diff = 0
# for i_line in file:
#     info = i_line.split()
#     diff -= info[2]
# file_2 = open('E:\task\group_2.txt', 'read')
# compose = 0
# for i_line in file:
#     info = i_line.split()
#     compose *= info[2]
# print(summa)
# print(diff)
# print(compose)
#
# Исправьте код для решения поставленной задачи. Для проверки результата создайте необходимые папки
# (task, Additional_info, Dont touch me) на своём диске в соответствии с картинкой и также добавьте файлы
# group_1.txt и group_2.txt.
import os

print(os.listdir())
file = open('F:\\task\\group_1.txt', 'r', encoding='utf-8')

summa = 0
diff = 0
for i_line in file:
    info = i_line.split('\n')
    info = info[0].split(' ')
    summa += int(info[2])
    diff -= int(info[2])
file.close()

file_2 = open('F:\\task\\Additional_info\\group_2.txt', 'r', encoding='utf-8')
compose = 1
for i_line_2 in file_2:
    info_2 = i_line_2.split('\n')
    info_2 = info_2[0].split(' ')
    compose *= int(info_2[2])
    print(info_2[2])
file_2.close()

print(summa)
print(diff)
print(compose)

****************************************
# Во входном файле numbers.txt записано N целых чисел, каждое в отдельной строке.
# Напишите программу, которая выводит их сумму в выходной файл answer.txt.
#
# Пример:
# Содержимое файла numbers.txt:
# 1
# 2
# 3
# 4
# 10
#
# Содержимое файла answer.txt
# 20

numbers = open('numbers.txt', 'r')
count = 0
for strin in numbers:
    count += int(strin)
print(count)
numbers.close()
result = open('answer.txt', 'a')
result.write(str(count))
result.write(', ')
result.close()

****************************************
# Выберите любую директорию на своём диске и затем напишите программу,
# выводящую на экран абсолютные пути к файлам и папкам, которые находятся внутри этой директории.
#
# Результат программы на примере директории проекта python_basic:
# Содержимое каталога G:\PycharmProjects\python_basic
#     G:\PycharmProjects\python_basic\.git
#     G:\PycharmProjects\python_basic\.idea
#     G:\PycharmProjects\python_basic\Module14
import os


def print_dirs(project):
    print('Содержимое директории', project)
    if os.path.exists(project):
        for i_elem in os.listdir(project):
            path = os.path.join(project, i_elem)
            print('    ', path)
    else:
        print('Каталога проекта не существует.')

folder_name = 'lesson18'

abs_path = os.path.abspath(os.path.join('..', folder_name))


print_dirs(abs_path)



# решение от курса:
# for path in os.listdir('..'):
#     print(os.path.join(os.path.abspath('..'), path))
****************************************
# В уроке мы написали функцию, которая ищет нужный нам файл во всех подкаталогах указанной директории.
# Однако, как мы понимаем, файлов с таким названием может быть несколько.
# Напишите функцию, которая принимает на вход абсолютный путь до директории и имя файла,
# проходит по всем вложенным файлам и папкам и выводит на экран все абсолютные пути с этим именем.
#
# Пример:
# Ищем в: C:/Users/Roman/PycharmProjects/Skillbox
# Имя файла: lesson2
#
# Найдены следующие пути:
# C:/Users/Roman/PycharmProjects/Skillbox\Module15\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module16\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module17\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module18\lesson2.py
import os

def search_file(dir, file):
    print('переходим', dir)
    for i_elem in os.listdir(dir):
        path = os.path.join(dir, i_elem)
        # print(path)
        if i_elem == file:
            print(os.path.abspath(path))

        if os.path.isdir(path):
            result = search_file(path, file)
            if result:
                break



file_name = 'Задача 1. Склады.py'  # что ищем
abs_path = os.path.abspath(os.path.join('..'))  # где ищем

print('Найдены следующие пути:')
search_file(abs_path, file_name)

****************************************
# Как мы помним, скрипты — это просто куча строк текста, хоть они и понятны только программисту.
# Таким образом, с ними можно работать точно так же, как и с обычными текстовыми файлами.
#
# Используя функцию поиска файла из предыдущего урока, реализуйте программу, которая находит внутри
# указанного пути все файлы с искомым названием и выводит на экран текст одного из них
# (выбор можно сгенерировать случайно).
#
# Подсказка: можно использовать, например, список для сохранения найденного пути.
import os
import random


def find_file(cur_path, file_name):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if file_name == i_elem:
            print('Найде файл')
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                all_paths.extend(result)

    return all_paths

def chek_file(path_to_file):
    file = open(path_to_file, 'r', encoding='utf8')
    for line in file:
        print(line)
    file.close()


all_paths = find_file('..', 'Задача 2. Кризис фруктов.py')
chek_file(random.choice(all_paths))


****************************************
# Ваш друг, который тоже проходит курс Python Basic, поехал с ноутбуком в другой город, и там у него случилась беда:
# его диск пришлось отформатировать, а доступ в интернет отсутствует. Остался только телефон с мобильным интернетом.
# Так как со связью (и с памятью) проблемы, друг попросил вас скинуть одним файлом все решения и скрипты,
# которые у вас сейчас есть.
# Напишите программу, которая копирует код каждого скрипта в папке проекта python_basic в файл scripts.txt,
# разделяя код строкой из 40 символов *.
#
# Пример содержимого файла scripts.txt:
# import platform
# import sys
#
# info = 'OS info is \n{}\n\nPython version is {} {}'.format(
#     platform.uname(),
#     sys.version,
#     platform.architecture(),
# )
# print(info)
#
# with open('os_info.txt', 'w', encoding='utf8') as file:
#     file.write(info)
# ****************************************
# print("Введите первую точку")
# x1 = float(input('X: '))
# y1 = float(input('Y: '))
# print("\nВведите вторую точку")
# x2 = float(input('X: '))
# y2 = float(input('Y: '))
#
# print("Уравнение прямой, проходящей через эти точки:")
# x_diff = x1 - x2
# y_diff = y1 - y2
# if x_diff == 0:
#     print("x = ", x1)
# elif y_diff == 0:
#     print("y = ", y1)
# else:
#     k = y_diff / x_diff
#     b = y2 - k * x2
#     print("y = ", k, " * x + ", b)
# ****************************************
import os


def find_file(cur_path, file_name):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if i_elem.endswith(file_name):
            # print('Найден файл', i_elem)
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                all_paths.extend(result)

    return all_paths

def chek_file(path_to_file):
    for file in path_to_file:
        files = open(file, 'r', encoding='utf8')
        new_file = open('scripts.txt', 'a', encoding='utf8')
        for line in files:
            new_file.write(str(line))
        new_file.write('\n' + '*'*40+'\n')
        files.close()
        new_file.close()



all_path = find_file('..', '.py')

files_list = chek_file(all_path)
print(files_list)

# решение курса
# def find_file(cur_path, ending):
#     all_paths = []
#     for i_elem in os.listdir(cur_path):
#         path = os.path.join(cur_path, i_elem)
#         if i_elem.endswith(ending):
#             all_paths.append(os.path.abspath(path))
#         elif os.path.isdir(path):
#             result = find_file(path, ending)
#             if result:
#                 all_paths.extend(result)
#
#     return all_paths
#
#
# def get_text_from_file(path_to_file):
#     file = open(path_to_file, "r", encoding="utf8")
#     result = ""
#     for line in file:
#         result += line
#     return result
#
#
# all_py_files = find_file('..', '.py')  # вместо ".." можно вставить путь до папки python_basic
#
# file_result = open("scripts.txt", "w", encoding="utf8")
#
# for file_path in all_py_files:
#     file_result.write(get_text_from_file(file_path))
#     file_result.write("\n" * 2 + "*" * 80 + "\n" * 2)

****************************************
# Напишите программу, которая выводит на экран только корень диска, на котором запущен скрипт.
# Учтите, что скрипт может быть запущен где угодно и при любой вложенности папок.
#
# Результат программы на примере диска G:
# Корень диска: G:\\

import os


def print_dirs(project):
    for i_elem in os.listdir(project):
        path = os.path.join(project, i_elem)
        print(' ', path)

abs_path = os.path.abspath(os.path.join(os.path.sep))
print('Содержимое каталога', abs_path)
print_dirs(abs_path)


****************************************
import random
def get_random_letter(n):
    return random.choices([chr(i) for i in range(ord('а'), ord('я'))], k=n)


print(get_random_letter(int(input('Сколько случайных букв желаешь: '))))

****************************************
# Программисты постоянно гуглят ошибки и ищут уже готовый код, который можно использовать
# для своей программы, чтобы не изобретать велосипед.
# Андрей поступил также и нашёл для своего проекта код,
# который должен находить минимальное и максимальное числа в списке.
# Вот этот код:

nums_list = []
N = int(input('Кол-во чисел в списке: '))

for _ in range(N):
    num = int(input('Очередное число: '))
    nums_list.append(num)

maximum = -1
minimum = 1

for i in nums_list:
    if maximum < i:
        maximum = i
    if minimum > i:
        minimum = i

print('Максимальное число в списке:', maximum)
print('Минимальное число в списке:', minimum)
****************************************
worker = int(input('Кол-во сотрудников в офисе: '))
worker_ID = []

for _ in range(worker):
    id = int(input('ID сотрудника: '))
    worker_ID.append(id)
search_ID = int(input('Какой ID ищем? '))

if search_ID in worker_ID:
    print('Сотрудник на месте')
else:
    print('Сотрудник не работает!')
****************************************
# Пользователь вводит список из N чисел и число K.
# Напишите код, выводящий на экран сумму индексов элементов списка, которые кратны K.

numbers_count = int(input('Введите кол-во чисел: '))
numbers = []

for number in range(numbers_count):
    print('Введите', number + 1, 'число: ', end = '')
    number_input = int(input())
    numbers.append(number_input)

divider = int(input('Введите делитель: '))

sum_index = 0
for n in numbers:
    if n % divider == 0:
        print('Индекс числа', n, ':', numbers.index(n) )
        sum_index += numbers.index(n)
print('Сумма индексов:', sum_index)





****************************************
numbers = []
for n in range(101):
    numbers.append(n)
print(numbers)

****************************************
# В собачьих бегах участвует N собак, у каждой из них есть определённое количество очков за сезон.
# На огромном табло выводятся очки каждой собаки.
# Однако при выводе был обнаружен баг: собаки с наибольшим и наименьшим количеством очков поменялись местами!
# Нужно это исправить.
#
# Дан список очков из N собак. Напишите программу, которая меняет местами наибольший и наименьший элементы в списке.

total_dogs = int(input('Введите кол-во собак: '))
dogs_list = []
for dog in range(total_dogs):
    print('Сколько очков у', dog + 1, 'собаки:', end=' ')
    dog_score = int(input())
    dogs_list.append(dog_score)

min = dogs_list[0]
max = dogs_list[0]

min_index = 0
max_index = 0


for i_dogs in range(total_dogs):
    if dogs_list[i_dogs] < min:
        min = dogs_list[i_dogs]
        min_index = i_dogs

    if dogs_list[i_dogs] > max:
        max = dogs_list[i_dogs]
        max_index = i_dogs

print('мин число:', min)
print('макс число:', max)
print(dogs_list)
dogs_list[min_index], dogs_list[max_index] = dogs_list[max_index], dogs_list[min_index]
print(dogs_list)
****************************************
# Дана строка S и номер позиции символа в строке.
# Напишите программу, которая выводит соседей этого символа и сообщение о количестве таких же символов
# среди этих соседей: их нет, есть ровно один или есть два таких же.

user_str = input('Введите строку: ') # abcd
user_index = int(input('Номер символа: ')) - 1

user_str = list(user_str)
count = 0
if user_index > 0:
    print('Символ слева:', user_str[user_index - 1])
    if user_str[user_index - 1] == user_str[user_index]:
        count += 1
if user_index < len(user_str)-1:
    print('Символ справа:', user_str[user_index + 1])
    if user_str[user_index + 1] == user_str[user_index]:
        count += 1

if count == 2:
     print('Рядом есть два таких же символа')
elif count == 1:
    print('Рядом есть такойже символ')
elif count == 0:
    print('Рядом таких же символов нет')

****************************************
numbers = [3, 7, 5]

while True:
    number = int(input('Новое число: '))
    numbers.append(number)
    print('Текущий список чисел:', numbers)

    for i in numbers:
        print(i ** 2, i ** 3, i ** 4)

print()

****************************************
# Мы продолжаем участвовать в разработке нового текстового редактора и делать жизнь обычных пользователей чуть лучше.
# В этот раз у нас стоит задача сделать фишку с поиском и заменой символов в выделенной строчке.
# Например, человек что-то перечислял в тексте, но ошибся и вместо точек с запятой использовал двоеточия.
# Лингвисты негодуют.
#
# Пользователь вводит строку S.
# Напишите программу, которая заменяет в строке все двоеточия (:) на точки с запятой (;).
# Также подсчитайте количество замен и выведите ответ на экран (и новую строку тоже).
# Для решения используйте список.
#
# Пример:
# Введите строку: гвозди:шурупы: гайки
# Исправленная строка: гвозди; шурупы; гайки
# Кол - во замен: 2

words = input('Введите строку: ')
words_list = list(words)
count = 0
for index, letter in enumerate(words_list):
    if letter == ':':
        words_list[index] = ';'
        count += 1
print('Измененная строка:', end=' ')
for i in words_list:
    print(i, end='')

print('\nКоличество замен:', count)

****************************************
# Мы уже писали программу для лингвистов, которая считала количество определённых букв в тексте.
# Теперь эту программу нужно улучшить. Есть список из трёх слов, которые вводит пользователь.
# Затем вводится сам текст произведения строго по словам. Текст вводится до тех пор, пока не встретится слово end.
# Напишите программу, которая посчитает, сколько раз слова пользователя встречаются в тексте.

words_list = []
count = [0, 0, 0]
for i in range(3):
    print('Введите', i + 1, 'слово:', end=' ')
    word = input()
    words_list.append(word)

user_word = input('Слово из текста: ')
while user_word != 'end':
    for index in range(3):
        if words_list[index] == user_word:
            count[index] += 1
    user_word = input('Слово из текста: ')

print('Подсчет слов в тексте:\n')
for i in range(3):
    print(words_list[i], ':', count[i])

****************************************
# Гера решил попрактиковаться в программировании и захотел написать небольшой скрипт,
# который после двух сообщений отправляет ещё одно на основе первых двух.
# Пользователь вводит две строки. В каждой из них есть какое-то количество специальных символов ! и ?.
# Напишите программу, которая считает количество этих символов отдельно в первой строке и отдельно во второй.
# Если в первой строке их больше, чем во второй, то на экран выводится первая строчка, объединённая со второй, а иначе — вторая с первой.
# При равном количестве символов в строках выводится «Ой».


first_question = input('Первое сообщение: ')
second_question = input('Второе сообщение: ')

first_count = first_question.count('!') + first_question.count('?')
second_count = second_question.count('!') + second_question.count('?')

if first_count > second_count:
    print('Третье сообщение:', first_question, second_question)
elif second_count > first_count:
    print('Третье сообщение:', second_question, first_question)
else:
    print('Ой!')

****************************************
# Одна IT-компания решила расшириться и взяла под своё крыло ещё три таких же, но поменьше.
# Конечно же, все выполненные и невыполненные задачи этих компаний перетекли в основную компанию.
# Даны четыре списка компаний, в которых для каждой задачи написано, выполнена (1) она или нет (0):
#
# main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
# first_company = [0, 0, 0]
# second_company = [1, 0, 0, 1, 1]
# third_company = [1, 1, 1, 0, 1]
#
# Напишите программу, которая расширяет список main элементами остальных списков, выведите итоговый список, а также выведите количество невыполненных задач.

main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
first_company = [0, 0, 0]
second_company = [1, 0, 0, 1, 1]
third_company = [1, 1, 1, 0, 1]

main.extend(first_company)
main.extend(second_company)
main.extend(third_company)

print('Общий список задач:', main)
print('Кол-во невыполненных задач:', main.count(0))

****************************************
# В маленьком зоопарке каждое животное сидит в отдельной клетке, всего этих животных четверо: лев, кенгуру, слон и обезьяна.
# В базе данных они хранятся в виде вот такого списка:
#
# zoo = ['lion', 'kangaroo', 'elephant', 'monkey']
#
# Сегодня в зоопарк завезли медведя (bear) и посадили его между львом и кенгуру.В итоге животных стало пять.
# А через неделю слона перевезли в другое место и в списке снова стало четверо животных.
# Реализуйте эти действия в коде программы и выведите в консоль итоговый список животных, а также покажите,
# в какой клетке сидят лев и обезьяна. Для этого используйте методы списков.
#
# Результат работы программы:
# # Зоопарк: ['lion', 'bear', 'kangaroo', 'monkey']
# # Лев сидит в клетке номер 1
# Обезьяна сидит в клетке номер 4

zoo = ['lion', 'kangaroo', 'elephant', 'monkey']

zoo.insert(1, 'bear')
zoo.remove('elephant')

print('Зоопарк:', zoo)
print('Лев сидит в клетке номер', zoo.index('lion') + 1)
print('Обезьяна сидит в клетке номер', zoo.index('monkey') + 1)

****************************************
# Мы поддерживаем свой киносайт и хотим сделать так, чтобы пользователи после регистрации могли создать
# собственный рейтинг фильмов из тех, которые есть на сайте.

def chek_film(film, films):
    for i_film in films:
        if i_film == film:
            return True
    else:
        return False


films = [
    'Крепкий орешек', 'Назад в будущее', 'Таксист',
    'Леон', 'Богемская рапсодия', 'Город грехов',
    'Мементо', 'Отступники', 'Деревня',
    'Проклятый остров', 'Начало', 'Матрица', 'Не грози южному централу'
]
user_films = []

while True:
    print('Ваш текущий топ фильмов:', user_films)
    print('\nНазвание фильма: ', end='')
    film = input()
    if chek_film(film, films):
        print('Команды: добавить, вставить, удалить')
        user_comand = input('Введите команду: ')
        if user_comand == 'добавить':
            if chek_film(film, user_films):
                print('Этот фильм уже есть в вашем списке.')
            else:
                user_films.append(film)
        if user_comand == 'вставить':
            if chek_film(film, user_films):
                print('Этот фильм уже есть в вашем списке.')
            else:
                user_index = int(input('На какое место: '))
                user_films.insert(user_index - 1, film)
        if user_comand == 'удалить':
            user_films.remove(film)
        else:
            print('Вы ввели неверную команду!')
    else:
        print('Такого фильма на сайте нет')

****************************************
# В небольшой фруктовой лавке у каждого фрукта есть название и цена. Эта информация хранится в одном большом списке, вот так:
#
# goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]
#
# Недавно в лавку привезли новый fruit_name по цене price, а после этого случилось ужасное:
# повысили налоги. А значит, повысились и цены на фрукты, на целых 8%!
#
# Реализуйте код, который добавляет в список goods ещё один список с новым фруктом и ценой (это запрашивается у пользователя),
# а затем увеличивает цены всех фруктов на 8%.

goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]

fruit_name = input('Новый фрукт: ')
price = int(input('Цена: '))

goods.append([fruit_name, price])
print('Новый ассортимент:', goods)

for good in goods:
    good[1] = round(good[1] * 1.08, 2)

print('Новый ассортимент с увеличенной ценой:', goods)



****************************************
# Дан вот такой список со списками:
# matrix = [[1, 2 ,3], [4, 5, 6], [7, 8, 9]]
# Реализуйте программу, которая выводит элементы этого списка в виде привычной нам матрицы.
#
# Результат работы программы:
#
# 1 2 3
# 4 5 6
# 7 8 9

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
for i in matrix:
    for num in i:
        print(num, end=' ')
    print()

****************************************
# В олимпиаде по программированию участвует N человек, в списке участников они обозначаются под номерами 1, 2, 3, 4
# и так далее до N.Эти участники поделены на команды по  K человек. Напишите программу, которая принимает
# на вход количество участников и количество человек в каждой команде, затем генерирует список таких команд и
# выводит его на экран.
# Обеспечьте контроль ввода: в каждой команде должно быть ровно по K человек.
#
# Пример 1:
# Кол - во участников: 12
# Кол - во человек в команде: 4
#
# Общий список команд: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
#
# Пример 2:
# Кол - во участников: 12
# Кол - во человек в команде: 5
#
# 12 участников невозможно поделить на команды по 5 человек!

all_members = int(input('Кол-во участников: '))
team_members = int(input('Кол-во человек в команде: '))
team_list = []
teams = all_members % team_members

if teams == 0:
    flag = True
else:
    print(all_members, 'участников невозможно поделить на команды по', team_members, 'человек!')


if flag:
    num = 1
    for _ in range(all_members // team_members):
        team_list.append(list(range(num, team_members + num)))
        num += team_members
    print('Общий список команд: ', team_list)

****************************************
# При работе с сервером мы кодируем сообщение и отправляем его в виде пакетов информации.
# Их количество равно N. Допустим, каждый пакет содержит четыре числа, каждое из которых равно нулю или единице.
# Эти числа называются битами. Иногда в кодировке сообщения встречаются ошибки, и в пакете эта ошибка обозначается числом -1.
# Если таких ошибок не больше одной, то этот пакет мы целиком добавляем в список для декодирования, а иначе отбрасываем.
#
# Напишите программу, которая будет обрабатывать полученные пакеты и выведет на экран итоговое сообщение для декодирования,
# а также количество ошибок в нём и количество необработанных пакетов.

all_packets = int(input('Количество пакетов: '))

packets_list = []
lost_packets = 0
for packet in range(all_packets):
    temp = []
    print('\nПакет номер', packet + 1)
    for byte in range(4):
        print(byte + 1, 'бит: ', end='')
        byte_input = int(input())
        temp.append(byte_input)
    if temp.count(-1) <= 1:
        packets_list.extend(temp)
    else:
        print('Много ошибок в пакете!')
        lost_packets += 1

print('Полученное сообщение:', packets_list)
print('Количество ошибок в сообщении:', packets_list.count(-1))
print('Количество потерянных пакетов:', lost_packets)

****************************************
# В одной компании наступили «тёмные времена», и сотрудников стали сокращать.
# Зарплаты сотрудников хранятся в списке из N этих самых зарплат.
# Зарплаты уже уволенных сотрудников обозначаются в списке числом 0.
#
# Напишите программу, которая запрашивает у пользователя количество сотрудников и их зарплаты,
# затем удаляет все элементы списка со значением 0 и выводит в консоль, сколько сотрудников осталось, а также их зарплаты.
# Дополнительный список использовать нельзя.

workers = int(input('Количество сотрудников: '))
salary_list = []

for worker in range(1, workers + 1):
    print('Зарплата', worker, 'сотрудника: ', end='')
    salary = int(input())
    salary_list.append(salary)

salary_list.remove(0)
print('Осталось сотрудников:', len(salary_list), '\nЗарплаты:', salary_list)
print('Максимальная зарплата:', max(salary_list))
print('Минимальная зарплата:', min(salary_list))

****************************************
nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]],
             [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

result = [j for i_num in range(len(nice_list))
              for i in range(len(nice_list[i_num]))
              for j in nice_list[i_num][i]]

print('Ответ:', result)

****************************************
# Нашему другу заказали написать программу, которая анализирует цены на бирже.
# Она получает этот пакет данных, но делать что-либо с ним нельзя.
# Для нормальной работы аналитической программы берётся новый список, который равен тому, что пришло.
# Затем идёт работа с новым списком: если есть отрицательные цены, то программа их зануляет и в конце выводит на экран,
# сколько денег мы по итогу потеряли. Получился вот такой код:
#
# original_prices = [-12, 3, 5, -2, 1]
# new_prices = original_prices
# for i in range(len(original_prices)):
#     if new_prices[i] < 0:
#         new_prices[i] = 0
#
# print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))
#
# Однако при таких входных данных программа почему-то работает неправильно: она выводит ответ 0, когда правильный ответ 14.
# Помогите другу исправить программу, а также сделайте так, чтобы список цен генерировался случайно (диапазон можно выбрать любой).

import random

original_prices = [random.randint(-5, 5) for _ in range(random.randint(1, 10))]
# original_prices = [-12, 3, 5, -2, 1]

new_prices = original_prices[:]
for i in range(len(original_prices)):
    if new_prices[i] < 0:
        new_prices[i] = 0

print('Оригинальные цены', original_prices)
print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))

****************************************
# вытащить вложенные списки в один общий список

nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

# списковая сборка:
output = [j for each_list in nice_list for each_list2 in each_list for j in each_list2]

# обычный цикл:
# for i_num in range(len(nice_list)):
#     for i in range(len(nice_list[i_num])):
#         for j in nice_list[i_num][i]:
#             nice_list3.append(j)


print('Итог:', output)


****************************************
# Задача 1. Гласные буквы
# Что нужно сделать
#
# Команде лингвистов понравилось качество ваших программ, и они решили заказать у вас функцию для анализатора текста,
# которая создавала бы список гласных букв текста, а заодно считала бы их количество.
# Напишите программу, которая запрашивает у пользователя текст и генерирует список из гласных букв этого текста
# (сама строка вводится на русском языке). Выведите в консоль сам список и его длину.
#
# Пример:
# Введите текст: Нужно отнести кольцо в Мордор!
#
# Список гласных букв: ['у', 'о', 'о', 'е', 'и', 'о', 'о', 'о', 'о']
# Длина списка: 9

def vowels(words):
    words_list = ['а', 'у', 'о', 'ы', 'и', 'э', 'я', 'ю', 'ё', 'е', 'А', 'У', 'О', 'Ы', 'И', 'Э', 'Я', 'Ю', 'Ё', 'Е']
    result = [i_words for i_words in words if i_words in words_list] #  символ для символа в тексте (words) если
                                                                     # символ встречается в списке (words_list) то добавить в список result
    return result


words = [word for word in input('Введите текст: ')]
print(vowels(words))

****************************************
# Пользователь вводит целое число N. Напишите программу, которая генерирует список из N чисел,
# на чётных местах в нём стоят единицы, а на нечётных — числа, равные остатку от деления своего номера на 5.
#
# Пример:
# Введите длину списка: 10
# Результат: [1, 1, 1, 3, 1, 0, 1, 2, 1, 4]
# numbers = [1 if num % 2 == 0 else num % 5 for num in range(len_numbers)]
#  если индекс числа четный, то равен 1, иначе индекс числа % 5 в длине списка 1, 10

len_numbers = int(input('Введите длину списка: '))
numbers = [1 if num % 2 == 0
           else num % 5
           for num in range(len_numbers)]

print(numbers)

****************************************
# Пользователь вводит числа A и B. Напишите программу, которая генерирует два списка:
# в первом лежат кубы чисел в диапазоне от А до В, во втором — квадраты чисел в этом же диапазоне.
# Выведите списки на экран. Для генерации используйте list comprehensions (как и в следующих задачах).
#
# Пример:
#
# Левая граница: 5
# Правая граница: 10
#
# Список кубов чисел в диапазоне от 5 до 10: [125, 216, 343, 512, 729, 1000]
# Список квадратов чисел в диапазоне от 5 до 10: [25, 36, 49, 64, 81, 100]

start = int(input('Левая граница: '))
stop = int(input('Правая граница: '))

cube_list = [x ** 3 for x in range(start, stop + 1)]
square_list = [x ** 2 for x in range(start, stop + 1)]

print('Список кубов чисел в диапазоне от', start, 'до', stop, cube_list)
print('Список квадратов чисел в диапазоне от', start, 'до', stop, square_list)

****************************************
# У нас есть вот такой список цен на некоторые товары из магазина:
# original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
#
# В этом списке также хранятся цены на товары, которые уже давно не продаются.
# По какой-то причине система, вместо того чтобы их занулить, просто приписала к ним минус. Нам нужно это исправить.
# Напишите программу, которая генерирует новый список из первого списка, заменяя все отрицательные числа на ноль.
#
# Результат:
# [1.25, 0, 10.22, 3.78, 0, 1.16]

original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]

new_prices = [(i_num if i_num > 0 else 0)
              for i_num in original_prices]

print(new_prices)

****************************************
# как найти индекс символа из списка!

result = input('Введите строку: ')

# result = ['g', 'h', 'b', 'd', 'h', 'n', 'h']
answer = [i_words for i_words in range(len(result)) if result[i_words] == 'h']

print('Развернутая последовательность между первым и последним h:', result[max(answer) - 1:min(answer):-1])

****************************************
# Мы продолжаем пробовать себя в качестве разработчика игр. Теперь нужно написать небольшую логику поведения некоторых отрядов,
# а также их урон. Есть два отряда, в каждом по 10 монстров. В первом отряде у каждого монстра урон абсолютно случайный
# и колеблется от 50 до 80, а во втором — от 30 до 60. Оба отряда вместе напали на третий, также из 10 юнитов.
# Юнит третьего отряда погибает, если сумма урона от двух монстров больше 100.
#
# Напишите программу, которая генерирует случайные значения в первых двух списках в заданных диапазонах,
# а также генерирует список, состоящий из фраз «Погиб» или «Выжил». Выведите все списки на экран.
#
# Пример:
#
# Урон первого отряда: [77, 75, 76, 77, 76, 73, 57, 67, 76, 52]
# Урон второго отряда: [53, 51, 31, 60, 49, 37, 31, 60, 37, 47]
# Состояние третьего отряда: ['Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Выжил', 'Погиб', 'Погиб', 'Выжил']

import random

units_1 = [random.randint(50, 80) for _ in range(10)]
units_2 = [random.randint(30, 60) for _ in range(10)]
units_3_condition = [('Погиб' if units_1[i_damage] + units_2[i_damage] > 100
                      else 'Выжил')
                     for i_damage in range(10)]


print('Урон первого отряда:', units_1)
print('Урон Второго отряда:', units_2)
print('Состояние третьего отряда:', units_3_condition)
****************************************
# Дан список цен на пять товаров с точностью до копейки. Так как экономика даёт о себе знать, мы спрогнозировали,
# что через год придётся повышать цены на X процентов, а ещё через один год — ещё на Y процентов.
# Напишите программу, которая получает на вход список цен на товары (вещественные числа,
# список генерируется также с помощью list comprehensions) и выводит в одну строку общую сумму стоимости товаров за каждый год.
#
# Пример:
# Цена на товар: 1.09
# Цена на товар: 23.56
# Цена на товар: 57.84
# Цена на товар: 4.56
# Цена на товар: 6.78
# Повышение на первый год: 0
# Повышение на второй год: 10
# Сумма цен за каждый год: 93.83 93.83 103.22

def get_percent_price(percent, price):
    return round(price * (1 + percent / 100), 2)


price_now = [float(input('Цена на товар:')) for _ in range(5)]

first_percent = int(input('Повышение на первый год: '))
second_percent = int(input('Повышение на второй год: '))

price_first = [get_percent_price(first_percent, i_price) for i_price in price_now]
price_second = [get_percent_price(second_percent, i_price) for i_price in price_first]

print('Сумма цен за каждый год:', round(sum(price_now), 2), round(sum(price_first), 2), round(sum(price_second), 2))

****************************************
# улучшение кода

def is_palindrome(num_list):
    reverse_list = num_list[::-1]
    if num_list == reverse_list:
        return True
    else:
        return False

total_num = int(input('Кол-во чисел: '))
number_list = []
answer = []

for num in range(total_num):
    num = int(input('Число: '))
    number_list.append(num)

for i_num in range(0, len(number_list)):
    if is_palindrome(number_list[i_num:len(number_list)]):
        answer = number_list[:i_num]
        answer.reverse()
        print('Последовательность:', number_list)
        if len(answer) == 0:
            print('Уже является палиндромом!')
            break
        print('Нужно приписать чисел:', len(answer))
        print('Сами числа:', answer)
        break

****************************************
# Илья решил безобидно подшутить над другом и написал программу для смартфона,
# которая при отправке сообщения удваивает каждый символ строки и заодно к каждому удвоенному добавляет ещё один дополнительный.
#
# Пользователь вводит строку и дополнительный символ. Напишите программу, которая генерирует два списка:
# в первом списке каждый элемент — удвоенная буква первой строки, во втором списке каждый элемент —
# конкатенация элемента первого списка и дополнительного символа.
#
# Пример:
# Введите строку: привет
# Введите дополнительный символ: !
#
# Список удвоенных символов: ['пп', 'рр', 'ии', 'вв', 'ее', 'тт']
# Склейка с дополнительным символом: ['пп!', 'рр!', 'ии!', 'вв!', 'ее!', 'тт!']

user_input = input('Введите строку: ')
new_symb = input('Введите дополнительный символ: ')

user_list = [x * 2 for x in user_input]
new_user_list = [x + new_symb for x in user_list]

print('Список удвоенных символов:', user_list)
print('Склейка с дополнительным символом:', new_user_list)

****************************************
# user_list = [int(input('Введи число: ')) for _ in range(2)]

start = int(input('Левая граница: '))
stop = int(input('Правая граница: '))

result = [i_num for i_num in range(start, stop + 1) if i_num % 2 == 0]

print(result)

****************************************
# Дан список чисел:
# nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]
#
# Напишите программу, которая выводит на экран шесть ответов:
# В первой строке выведите первые пять элементов списка.
# Во второй строке выведите весь список, кроме последних двух элементов.
# В третьей строке выведите все элементы с чётными индексами.
# В четвёртой строке выведите все элементы с нечётными индексами.
# В пятой строке выведите все элементы в обратном порядке.
# В шестой строке выведите все элементы списка через один в обратном порядке, начиная с последнего.
# Для решения используйте только срезы (и без функции len).
#
# Результат:
# [48, -10, 9, 38, 17]
# [48, -10, 9, 38, 17, 50, -5, 43]
# [48, 9, 17, -5, 46]
# [-10, 38, 50, 43, 12]
# [12, 46, 43, -5, 50, 17, 38, 9, -10, 48]
# [12, 43, 50, 38, -10]

nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]

print('Исходный список:', nums, '\n')
print('Первые пять элементов списка:', nums[:5])
print('Список без последних двух элементов:', nums[0:8])
print('Элементы с четными индексами', nums[::2])
print('Элементы с нечетными индексами', nums[1::2])
print('Элементы в обратном порядке:', nums[::-1])
print('Элементы в обратном порядке через один:', nums[::-2])

****************************************
# Дан список из N чисел, а также числа А и В (можно сгенерировать случайно, при этом А < B).
# Напишите программу, которая удаляет элементы списка с индексами от А до В.
# Не используйте дополнительные переменные и методы списков.

import random

numbers = [random.randint(1, 10) for _ in range(random.randint(5, 10))]
a = random.randint(0, len(numbers) - 2)
b = random.randint(a + 1, len(numbers) - 1)

print('Список', numbers, 'Удаляем элементы с индексами от', a, 'до', b)
numbers[a:b + 1] = []

print(numbers)

****************************************
def caesar_cipher(string, shift):
    char_list = [(alphabet[(alphabet.index(sym) + shift) % 33] if sym != ' ' else ' ') for sym in string]
    new_str = ''
    for i_char in char_list:
        new_str += i_char
    return new_str


alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
user_list = input('Введите сообщение: ')
shift = int(input('Введите сдвиг: '))

result = caesar_cipher(user_list, shift)
print('Зашифрованное сообщение:', result)

****************************************
# Задача 1. Заказ
# После того, как человек сделал заказ в интернет-магазине, ему на почту приходит оповещение с его именем и номером заказа.
# Напишите программу, которая получает на вход имя и код заказа, а затем выводит на экран соответствующее сообщение.
# Для решения используйте строковый метод format.
#
# Пример:
# Имя: Иван
# Номер заказа: 10948
#
# Здравствуйте, Иван! Ваш номер заказа: 10948. Приятного дня!

user_name = input('Имя клиента: ')
order_number = int(input('Номер заказа: '))

print('Здравствуйте, {name}! Ваш номер заказа: {order}. Приятного дня!'.format(name=user_name, order=order_number))
# или
print('Здравствуйте, {0}! Ваш номер заказа: {1}. Приятного дня!'.format(user_name, order_number))

****************************************
# Задача 1. Улучшенная лингвистика 2
# Усовершенствуйте старую программу:
# У нас есть список из трёх слов, которые вводит пользователь. Затем вводится сам текст произведения,
# который вводится уже в одну строку. Напишите программу, которая посчитает,
# сколько раз слова пользователя встречаются в тексте.

# count = [0, 0, 0]
# user_input = input('Введите три слова через пробел: ')
# user_words = user_input.split()
# words = input('Введите текст произведения: ')
# words_list = words.split()
#
# for index in range(3):
#     for word in words_list:
#         if user_words[index] == word:
#             count[index] += 1
#
# print('Подсчет слов в тексте:\n')
# for i in range(3):
#     print(user_words[i], ':', count[i])

# как надо было сделать
words = [input("Введите слово: ") for _ in range(3)]
text = input("Введите текст: ")
words_count = [text.count(word) for word in words]

print(words_count)

****************************************
# Задача 1. Шифр Цезаря 2
# Мы уже писали программу, которая шифрует строку с помощью шифра Цезаря.
# Напомним, что в таком способе шифрования каждая буква заменяется на следующую по алфавиту через K позиций по кругу.
# Напишите (модифицируйте) программу, которая реализует этот алгоритм шифрования. Не используйте конкатенацию и сделайте так,
# чтобы текст был в одном регистре.

def caesar_cipher(string, shift):
    char_list = [(alphabet[(alphabet.index(sym) + shift) % 33] if sym != ' ' else ' ') for sym in string]
    new_str = ''.join(char_list)
    return new_str


alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
user_list = input('Введите сообщение: ').lower()
shift = int(input('Введите сдвиг: '))

result = caesar_cipher(user_list, shift)
print('Зашифрованное сообщение:', result)


# print(ord("а"), ord("я"), ord("ё"), chr(1104))
#
# text = input("Введите текст: ")
# delta = int(input("Введите сдвиг: "))
# alphabet = [chr(index) for index in range(ord("а"), ord("я") + 1)]  # заполняем список буквами алфавита
# # Думаем над структурой алгоритма: [вариант_1 если условие_1 иначе вариант_2 for буква in текст]
# new_text = [alphabet[(alphabet.index(letter) + delta) % len(alphabet)] if letter in alphabet else letter for letter in text.lower()]
# print(''.join(new_text))

****************************************
# Задача 2. Бабушка
# У одной бабушки, когда та переписывается с внуком, постоянно залипает кнопка пробела.
# В итоге между словами получаются огромные расстояния. Внук не знает как это поправить в самом телефоне, поэтому обратился к вам за помощью.
#
# Пользователь вводит строку. Напишите программу, которая преобразовывает в этой строке все идущие подряд пробелы в один и выводит результат на экран.

grandma_input = input('Введите текст: ').split()

result = ' '.join(grandma_input)
print(result)

****************************************
# Задача 2. Долги
# Один наш друг занял у нас определённую сумму денег и всё никак не может их вернуть.
# А деньги нам нужны. Поэтому мы решили написать небольшой скрипт-напоминалку, который, возможно, разбудит его совесть.
#
# Напишите программу, которая получает на вход имя и долг, а затем выводит на экран сообщение,
# где имя повторяется несколько раз (и долг, возможно, тоже). Используйте числа в названиях ключей.
#
# Пример:
# Введите имя: Том
# Введите долг: 100
# Том! Том, привет! Как дела, Том? Где мои 100 рублей? Том!


user_name = input('Введите имя: ')
user_debt = int(input('Введите долг: '))

print('{0}! {0}, привет! Как дела, {0}? Где мои бабки, '
      '{0}? Когда вернешь {1} рублей, пёс?'.format(user_name, user_debt))

****************************************
# Задача 2. Путь к файлу
# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта
# часто используются абсолютные пути файлов, которые необходимо проверять.
# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные: диск и расширение файла.
# Напишите программу, которая проверяет корректность этого пути.
#
# Пример:
# Путь к файлу: C:/user/docs/folder/new_file.txt
# На каком диске должен лежать файл: C
# Требуемое расширение файла: .txt
# Путь корректен!

path = 'C:/user/docs/folder/new_file.txt'
print('Путь к файлу:', path)
disk_name = input('На каком диске должен лежать файл: ')
file_name = input('Требуемое расширение файла: ')



if not path.endswith(file_name):
    print('Ошибка расширения файла!')
elif not path.startswith(disk_name):
    print('Ошибка. Не верно указан диск!')
else:
    print('Путь корректен!')

****************************************
# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта часто используются
# абсолютные пути файлов, которые необходимо проверять.
# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные:
# диск и расширение файла. Напишите программу, которая проверяет корректность этого пути.
#
# Пример:
# Путь к файлу: C:/user/docs/folder/new_file.txt
# На каком диске должен лежать файл: C
# Требуемое расширение файла: .txt
# Путь корректен!

user_name = input('Введите имя пользователя: ')
file_name = input('Введите имя файла: ')

path = 'C:/{user}/docs/folder/{new_file}'.format(
    user=user_name,
    new_file=file_name
)

if not path.endswith('.txt'):
    print('Ошибка расширения файла!')
elif not path.startswith('C:/'):
    print('Ошибка. Не верно указан диск!')
else:
    print('Путь к файлу:', path)

****************************************
# Задача 3. IP-адрес
# IP-адрес компьютера состоит из 4 чисел, разделённых точкой. Каждое число находится в диапазоне от 0 до 255 (включительно).
#
# Пример правильного адреса: 192.168.1.0
# Пример неправильного адреса: 192.168.300.0
#
# Напишите программу, которая получает на вход 4 числа и выводит на экран IP-адрес.
# Используйте переменную ip_address в качестве шаблона. Обеспечьте контроль ввода.

# for num in range(4):
#     ip_address = ''
#     print('Ведите число: ')
#     num1 = int(input())
#     if num1 > 255:
#         print('Число не может быть больше "255"')
#         num = int(input())
#
#     num += 1
# print(ip_address)

ip_address = '{0}.{1}.{2}.{3}'
count = 0
numbers = []
while count < 4:
    new_number = int(input('Введите число:'))
    if 0 < new_number <= 255:
        numbers.append(new_number)
        count += 1
    else:
        print('Ошибка ввода! Цифра не может быть больше "255"')

print(ip_address.format(numbers[0], numbers[1], numbers[2], numbers[3]))

****************************************
# Задача 3. Разделители символов
# Человек хочет сделать рассылку поздравлений для определённого списка людей. Поздравления для разных людей он хочет написать по-разному.
#
# Напишите программу, которая запрашивает у пользователя:
# Шаблон поздравления (туда вставляется ФИ и возраст)
# ФИ людей (в одну строку, разделяются запятой)
# Возраст каждого человека (в одну строку через пробел)
# В конце  программа выводит поздравления и всех именинников в одну строку вместе с их возрастом.
#
# Пример:
# Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: С днём рождения, {name}! С {age}-летием тебя!
# Список людей через запятую: Иван Иванов, Петя Петров, Лена Ленова
# Возраст людей через пробел: 20 30 18
#
# С днём рождения, Иван Иванов! С 20-летием тебя!
# С днём рождения, Петя Петров! С 30-летием тебя!
# С днём рождения, Лена Ленова! С 18-летием тебя!
## Именинники: Иван Иванов 20, Петя Петров 30, Лена Ленова 18

while True:
    greetings = input('Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: ')
    if '{name}' and '{age}' in greetings:
        break
    print('Отсутствует одна или две конструкции')

guests = input('Список людей через запятую: ').split(', ')
age = input('Возраст людей через пробел: ')
age_list = age.split()

for i_man in range(len(guests)):
    print(greetings.format(name=guests[i_man], age=age_list[i_man]))

# для вывода именинников в одну строку
people = [
    ' '.join([guests[i_man], age_list[i_man]])
    for i_man in range(len(guests))
]

people_str = ', '.join(people)
print('Именинники:', people_str)

****************************************
# Дана структура, которая содержит описание одного из членов семьи (имя, фамилия, хобби, сколько лет и дети):
# family_member = {
#     "name": "Jane",
#     "surname": "Doe",
#     "hobbies": ["running", "sky diving", "singing"],
#     "age": 35,
#     "children": [
#         {
#             "name": "Alice",
#             "age": 6
#         },
#         {
#             "name": "Bob",
#             "age": 8
#         }
#     ]
# }
# # Напишите программу, которая реализует такую структуру: имя, фамилия, хобби, кол-во лет и дети.
# Затем, с помощью метода get и установки значения по умолчанию, проверьте есть ли ребёнок с именем Bob.
# Затем в отдельную переменную получите фамилию этого ребёнка и выведите её на экран. Если у него нет фамилии, то получите значение ‘Nosurname’.

family_member = {
    "name": "Jane",
    "surname": "Doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "name": "Alice",
            "age": 6
        },
        {
            "name": "Bob",
            "age": 8
        }
    ]
}


children_dict = dict()
for child in family_member['children']:
    children_dict[child['name']] = child['age']

search_bob = children_dict.get('Bob', {})
if search_bob:
    print('Bob найден')
else:
    print('Bob-a нет!')

surname = children_dict.get('surname', {})
if surname:
    print(surname)
else:
    print('Nosurname')

****************************************
a = [[1, 2, [3]], [1], 3]
l = [x for lst in a for x in lst]
print(l)
****************************************
# Напишите программу, которая считает количество знаков пунктуации в символьной строке.
# К знакам пунктуации относятся символы из набора ".,;:!?". Набор должен храниться в виде множества.
#
# Пример:
# Введите строку: Я! Есть. Грут?! Я, Грут и Есть.
# Количество знаков пунктуации: 6

text = input('Введите строку: ')
punct = set(".,;:!?")

count = 0
for i in text:
    if i in punct:
        count += 1
print('Количество знаков пунктуации:', count)
print(punct)
****************************************
# У мебельного магазина есть два склада, на которых хранятся разные категории товаров по парам «название — количество»:
#
# small_storage = {
#     'гвозди': 5000,
#     'шурупы': 3040,
#     'саморезы': 2000
# }
#
# big_storage = {
#     'доски': 1000,
#     'балки': 150,
#     'рейки': 600
# }
#
# Магазин решил сократить аренду и скинуть все товары в большой склад (big_storage). После этого нас попросили реализовать поиск по товарам.
# Напишите программу, которая объединяет оба словаря в один (в big_storage), затем запрашивает у пользователя название товара и выводит
# на экран его количество. Если такого товара нет, то выводит об этом ошибку. Для получения значения используйте метод get.

small_storage = {
    'гвозди': 5000,
    'шурупы': 3040,
    'саморезы': 2000
}

big_storage = {
    'доски': 1000,
    'балки': 150,
    'рейки': 600
}

big_storage.update(small_storage)

while True:
    input_item = input('Введите название товара: ')
    for item in big_storage.keys():
        if item == input_item:
            print('Количество товара', item, '-', big_storage.get(item))
            break
    else:
        print('Ошибка! Такого товара в базе нет!')


# решение от курса:
# big_storage.update(small_storage)
#
# user_item = input("Введите название нужного товара: ")
# if big_storage.get(user_item, None):
#     print(big_storage[user_item])
# else:
#     print("Такого товара нет!")

****************************************
# На вход программе поступает целое число num. Напишите программу создания словаря,
# который включает в себя ключи от 1 до num, а значениями соответствующего ключа будет значение ключа в квадрате.
#
# Пример:
# Введите целое число: 5
#
# Результат: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

num = int(input('Введите целое число: '))

num_dict = dict()

for numb in range(1, num + 1):
    num_dict[numb] = numb ** 2

print(num_dict)

****************************************
# Дана структура, которая содержит описание одного из членов семьи (имя, фамилия, хобби, сколько лет и дети):
# family_member = {
#     "name": "Jane",
#     "surname": "Doe",
#     "hobbies": ["running", "sky diving", "singing"],
#     "age": 35,
#     "children": [
#         {
#             "name": "Alice",
#             "age": 6
#         },
#         {
#             "name": "Bob",
#             "age": 8
#         }
#     ]
# }
# # Напишите программу, которая реализует такую структуру: имя, фамилия, хобби, кол-во лет и дети.
# Затем, с помощью метода get и установки значения по умолчанию, проверьте есть ли ребёнок с именем Bob.
# Затем в отдельную переменную получите фамилию этого ребёнка и выведите её на экран. Если у него нет фамилии, то получите значение ‘Nosurname’.

family_member = {
    "name": "Jane",
    "surname": "Doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "name": "Alice",
            "age": 6
        },
        {
            "name": "Bob",
            "age": 8
        }
    ]
}


children_dict = dict()
for child in family_member['children']:
    children_dict[child['name']] = child['age']

search_bob = children_dict.get('Bob', {})
if search_bob:
    print('Bob найден')
else:
    print('Bob-a нет!')

surname = children_dict.get('surname', {})
if surname:
    print(surname)
else:
    print('Nosurname')

****************************************
# Есть готовый словарь игроков, у каждого игрока есть имя, команда, в которой он играет, а также его текущий статус,
# в котором указано, отдыхает он, тренируется или путешествует:
#
# players_dict = {
#     1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
#     2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
#     3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
#     4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
#     5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
#     6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
#     7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
#     8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
# }
#
# Напишите программу, которая выводит на экран вот такие данные в разных строчках:
# Все члены команды из команды А, которые отдыхают.
# Все члены команды из группы B, которые тренируются.
# Все члены команды из команды C, которые путешествуют.

players_dict = {
    1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
    2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
    3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
    4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
    5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
    6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
    7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
    8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
}

rest_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'A' and player['status'] == 'Rest'
]

traning_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'B' and player['status'] == 'Training'
]

travel_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'C' and player['status'] == 'Travel'
]

print(rest_players)
print(traning_players)
print(travel_players)

****************************************
# Мы работаем в одной небольшой торговой компании, где все данные о продажах фруктов за год сохранены в словаре в виде пар «название фрукта — доход»:
#
# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'grapefruit': 300.40,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,
# }
#
# В компании наступил небольшой кризис, и нам поручено провести небольшой анализ дохода.
# Напишите программу, которая находит общий доход, затем выводит фрукт с минимальным доходом и удаляет его из словаря. Выведите итоговый словарь на экран.
# Результат работы программы:
# Общий доход за год составил 35419.34 рублей
# Самый маленький доход у grapefruit. Он составляет 300.4 рублей
# Итоговый словарь: {'apple': 5600.2, 'orange': 3500.45, 'banana': 5000.0, 'bergamot': 3700.56, 'durian': 5987.23, 'peach': 10000.5, 'pear': 1020.0, 'persimmon': 310.0}

incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'grapefruit': 300.40,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00,
}

min_value = min(incomes.values())
min_key = ''
for val in incomes:
    if incomes[val] == min_value:
        min_key = val

print('Оющий доход за год составил', sum(incomes.values()), 'рублей')
incomes.pop(min_key)
print('Самый маленький доход у', min_key, '. Он составляет', min_value, 'рублей')
print('Итоговый словарь:', incomes)

****************************************
# На одном семинаре по теории множеств нужно показать наглядный пример, как эти множества работают. Для начала было сгенерировано два набора чисел:
# nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
# nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]
#
# Вас попросили написать программу, которая будет наглядно демонстрировать работу со множествами с помощью этих чисел.
# Напишите программу, которая преобразует списки во множества и убирает повторяющиеся элементы.
# Затем удаляет минимальный элемент из каждого множества и добавляет туда случайное число в диапазоне от 100 до 200. Затем выполните следующие действия со множествами:
#
# Вывести все элементы множеств (объединение).
# Вывести только общие элементы (пересечение).
# Вывести элементы, входящие в nums_2, но не входящие в nums_1.
#
# Пример результата:
# 1-е множество: {1, 2, 3, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 26, 27, 29}
# 2-е множество: {1, 5, 7, 8, 9, 11, 12, 13, 15, 16, 19, 21, 22, 23, 24, 29, 30}
#
# Минимальный элемент 1-го множества: 1
# Минимальный элемент 2-го множества: 1
#
# Случайное число для 1-го множества: 126
# Случайное число для 2-го множества: 169
#
# Объединение множеств: {2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 169, 126}
# Пересечение множеств: {7, 8, 11, 12, 13, 15, 16, 19, 21, 22, 24, 29}
# Элементы, входящие в nums_2, но не входящие в nums_1: {5, 9, 169, 23, 30}
import random

nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]

nums_1 = set(nums_1)
nums_2 = set(nums_2)
min_nums_1 = min(nums_1)
min_nums_2 = min(nums_2)
random_min_nums_1 = random.randint(100, 200)
random_min_nums_2 = random.randint(100, 200)

print('Первое множество:', nums_1)
print('Второе множество:', nums_2)
print()
print('Минимальный элемент 1-го множества:', min_nums_1)
print('Минимальный элемент 2-го множества:', min_nums_2)
print()
print('Случайное число для 1-го множества:', random_min_nums_1)
print('Случайное число для 2го множества:', random_min_nums_2)

nums_1.remove(min_nums_1)
nums_2.remove(min_nums_2)
nums_1.add(random_min_nums_1)
nums_2.add(random_min_nums_2)
print('Объединение множеств:', nums_1 | nums_2)
print('Пересечение множеств:', nums_1 & nums_2)
print('Элементы, входящие в nums_2, но не входящие в nums_1:', nums_2 - nums_1)

****************************************
# Пользователь вводит фамилию, имя студента, город проживания, вуз, в котором он учится, и все его оценки.
# Всё вводится в одну строку через пробел. Напишите программу, которая по этой информации составит словарь и выведет его на экран.
#
# Пример:
# Введите информацию о студенте через пробел (имя, фамилия, город, место учёбы, оценки): Илья Иванов Москва МГУ 5 4 4 4 5
#
# Результат:
# Имя - Илья
# Фамилия - Иванов
# Город - Москва
# Место учёбы - МГУ
# Оценки - [5, 4, 4, 4, 5]

student = input(
    'Введите информацию о студенте через пробел\n'
    '(имя, фамилия, город, место учебы, оценки): '
)

student_list = student.split()

student_dict = dict()

for i_list in student_list:
    student_dict['Имя'] = student_list[0]
    student_dict['Фамилия'] = student_list[1]
    student_dict['Город'] = student_list[2]
    student_dict['Место учебы'] = student_list[3]
    student_dict['Оценки'] = []
for i_grade in student_list[4:]:
    student_dict['Оценки'].append(int(i_grade))

for i_info in student_dict:
    print(i_info, '-', student_dict[i_info])

****************************************
# Лингвистам нужно собрать данные о частоте букв в тексте, исходя из этих данных будет строиться гистограмма частоты букв.
# Напишите программу, которая получает сам текст и считает, сколько раз в строке встречается каждый символ.
# На экран нужно вывести содержимое в виде таблицы, отсортированное по алфавиту, а также максимальное значение частоты.
#
# Пример:
# Введите текст: Здесь что-то написано
#   : 2
# - : 1
# З : 1
# а : 2
# д : 1
# е : 1
# и : 1
# н : 2
# о : 3
# п : 1
# с : 2
# т : 2
# ч : 1
# ь : 1
# Максимальная частота: 3

def histograme(string):
    text_dict = dict()
    for symbol in string:
        if symbol in text_dict.keys():
            text_dict[symbol] += 1
        else:
            text_dict[symbol] = 1

    return text_dict


text = input('Введите текст: ').lower()
hist = histograme(text)

for key in sorted(hist.keys()):
    print(key, ':', hist[key])

print('Максимальная частота', max(hist.values()))  # метод


****************************************
# Энтузиаст Степан, купив новый телефон, решил написать для него свою собственную операционную систему.
# И, конечно же, первое, что он захотел в ней реализовать, — это телефонная книга.
#
# Напишите программу, которая запрашивает у пользователя имя контакта и номер телефона, добавляет их в словарь и выводит
# на экран текущий словарь контактов. Запрос на добавление идёт бесконечно (но можно задать своё условие для завершения программы).
# Обеспечьте контроль ввода: если это имя уже есть в словаре, то выведите соответствующее сообщение.
#
# Пример:
# Текущие контакты на телефоне:
# <Пусто>
#
# Введите имя: Иван
# Введите номер телефона: 100200300
# # Текущие контакты на телефоне:
# Иван  100200300
#
# Введите имя: Лена
# Введите номер телефона: 8005555522
# # Текущие контакты на телефоне:
# Иван  100200300
# Лена  8005555522
#
# Введите имя: Иван
# Ошибка: такое имя уже существует.
# ...


contacts_dict = {}

while True:
    print('Текущие контакты на телефоне:')
    for i_cont in contacts_dict:
        print(i_cont, contacts_dict[i_cont])
    input_name = input('\nВведите имя: ')
    if input_name in contacts_dict:
        print('Ошибка: такое имя уже существует.')
    else:
        input_number = int(input('Введите номер телефона: '))
        contacts_dict[input_name] = input_number


****************************************
# Напишите программу, которая находит все различные цифры в символьной строке.
# Для решения используйте множество (цифры будут различные, и поиск во множестве намного быстрее, чем в списке).
# Подсказка: можно использовать вот такое сравнение '0'<=x<='9'
#
# Пример:
# Введите строку: ab1n32kz2
# Различные цифры строки: 123

user_input = set(input('Введите строку: '))
numbers = set()

for symb in user_input:
    if '0'<= symb <='9':
        numbers.add(symb)

print(''.join(numbers))

****************************************
# Заполните один кортеж десятью случайными целыми числами от 0 до 5 включительно.
# Также заполните второй кортеж числами от −5 до 0. Объедините два кортежа, создав тем самым третий кортеж.
# С помощью метода кортежа определите в нём количество нулей. Выведите на экран третий кортеж и количество нулей в нём.
words = ('нулей', 'ноль', 'нуля', 'нуля', 'нуля', 'нулей', 'нулей', 'нулей', 'нулей', 'нулей', 'нулей')

import random

numbers = (0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5)
negative_numbers = (-5, -4, -3, -2, -1, 0, -5, -4, -3, -2, -1, 0,)
one_tuple = tuple(random.sample(numbers, 10))
two_tuple = tuple(random.sample(negative_numbers, 10))
result_tuple = one_tuple + two_tuple

print('Первый кортеж', one_tuple)
print('Второй кортеж', two_tuple)
print('Третий кортеж {} \nв нем: {} {}'.format(result_tuple, result_tuple.count(0), words[result_tuple.count(0)]))

****************************************
# Какой-то нехороший человек решил подпортить жизнь frontend-разработчикам и добавил в код сайта символ ~ (тильда).
# Но программисты быстро решили эту проблему, пройдясь по всему коду маленькой программой.
#
# Пользователь вводит строку. Напишите программу, которая проходит по строке и выводит в консоль индексы символа ~.
# Для решения этой задачи (и остальных тоже) используйте функцию enumerate.
#
# Пример:
# Строка: so~mec~od~e
# Ответ: 2 6 9

str_input = input('Строка:')

for i_sym, sym in enumerate(str_input):
    if sym == '~':
        print(i_sym, end=' ')

# решение с list comprehension
result = [str(i_sym) for i_sym, sym in enumerate(str_input) if sym == '~']
print(('Ответ:'), ' '.join(result))

# решение с использованием функции (выводим индекс необходимого символа)
def get_indexes(where_to_search, what_to_search):
    return [str(index) for index, letter in enumerate(where_to_search) if letter == what_to_search]

# генератор кортежа из случайных чисел
def create_random_tuple(a, b, n):
    return tuple([random.randint(a, b) for _ in range(n)])
#  first = create_random_tuple(0, 5, 10) - создать кортеж из 10 случайных чисел от 0 до 5

print(('Ответ:'), ' '.join(get_indexes(str_input, '~')))

****************************************
# Задача 1. Кризис миновал
# Закупки грейпфрутов прекратились, и кризис в торговой компании закончился. И теперь можно вернуться к обыденным делам.
# Однако внезапно вы обнаружили, что старый скрипт, который выводит данные о фруктах, куда-то потерялся.
# Необходимо его восстановить.
#
# Дан словарь с парами «название фрукта — цена»:
# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,
# }
#
# Вывести на экран словарь в следующем виде:
# apple -- 5600.2
# orange -- 3500.45
# banana -- 5000.0
# bergamot -- 3700.56
# durian -- 5987.23
# peach -- 10000.5
# pear -- 1020.0
# persimmon -- 310.0
# Не используйте обращение по ключу словаря.

incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00,
}

for i_name, i_price in incomes.items():
   print('{name} -- {price}'.format(name=i_name, price=i_price))

****************************************
# В базе данных поликлиники хранятся паспортные данные людей. Хранение реализовано с помощью словаря,
# состоящего из пар «Серия и номер паспорта — фамилия и имя». Серия и номер — составной ключ,
# а фамилия и имя — составное значение.
#
# data = {
#     (5000, 123456): ('Иванов', 'Василий'),
#     (6000, 111111): ('Иванов', 'Петр'),
#     (7000, 222222): ('Медведев', 'Алексей'),
#     (8000, 333333): ('Алексеев', 'Георгий'),
#     (9000, 444444): ('Георгиева', 'Мария')
# }
#
# Реализуйте функцию, которая по номеру и серии паспорта выдаёт имя и фамилию человека.

data = {
    (5000, 123456): ('Иванов', 'Василий'),
    (6000, 111111): ('Иванов', 'Петр'),
    (7000, 222222): ('Медведев', 'Алексей'),
    (8000, 333333): ('Алексеев', 'Георгий'),
    (9000, 444444): ('Георгиева', 'Мария')
}

serial = int(input('Введите серию: '))
number = int(input('Введите номер: '))

passport = (serial, number)

if passport in data:
    print(data[passport])
else:
    print('Такого человека нет')

****************************************
# Андрей однажды уже писал функции для расчёта площади сферы и объёма шара.
# И теперь для своей курсовой работы ему пришлось связаться с цилиндрами.
#
# Пользователь вводит два значения: радиус и высоту. Напишите функцию для расчёта площади
# боковой поверхности цилиндра и его полной площади. Функция должна возвращать два эти значения.
# После этого в основной программе выводятся оба ответа в две строки.
#
# Площадь боковой поверхности (r — радиус, h — высота):
# side = 2pi * r * h
# Полная площадь (S — площадь круга):
# full = side + 2 * S
import math

def cylinder_s (r, h):
    r_side = 2 * math.pi * r * h
    r_full = r + 2 * math.pi * r ** 2

    return r_side, r_full


radius = float(input('Введите радиус: '))
height = float(input('Введите высоту: '))

r_side, r_full = cylinder_s(radius, height)

print('Площадь боковой поверхности:', round(r_side, 2))
print('Полная площадь:', round(r_full, 2))

****************************************
# Создайте два списка, в каждом из которых лежит 10 случайных букв алфавита (могут повторяться).
# Затем для каждого списка создайте словарь из пар «индекс — значение» и выведите оба словаря на экран.
#
# Подсказка: random
#
# Пример:
# Первый список: ['й', 'р', 'с', 'г', 'а', 'а', 'т', 'ж', 'е', 'к']
# Второй список: ['д', 'а', 'а', 'в', 'т', 'ж', 'р', 'б', 'й', 'р']
#
# Первый словарь: {0: 'й', 1: 'р', 2: 'с', 3: 'г', 4: 'а', 5: 'а', 6: 'т', 7: 'ж', 8: 'е', 9: 'к'}
# Второй словарь: {0: 'д', 1: 'а', 2: 'а', 3: 'в', 4: 'т', 5: 'ж', 6: 'р', 7: 'б', 8: 'й', 9: 'р'}

import random

def random_generator (symb, how_symb):
    result = list()
    for i in range(how_symb):
        result.append(random.choice(symb))
    return result


def get_index(text):
    result = dict()
    for index, sym in enumerate(text):
        result.update({index: sym})
    return result


symb = (
    'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о',
    'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я'
)

first_list = random_generator(symb, 10)
second_list = random_generator(symb, 10)
first_tuple = get_index(first_list)
second_tuple = get_index(second_list)

print('Первый список:', first_list)
print('Второй список:', second_list)
print('\nПервый словарь:', first_tuple)
print('Второй словарь:', second_tuple)

****************************************
# Задача 2. Сервер
# У вас есть данные о сервере, которые хранятся в виде вот такого словаря:
## server_data = {
#     "server": {
#         "host": "127.0.0.1",
#         "port": "10"
#     },
#     "configuration": {
#         "access": "true",
#         "login": "Ivan",
#         "password": "qwerty"
#     }
# }
## Напишите программу, которая выводит для пользователя эти данные так же красиво и понятно, как они представлены в словаре.
# Результат работы программы:
# server:
#     host: 127.0.0.1
#     port: 10
# configuration:
#     access: true
#     login: Ivan
#     password: qwerty

server_data = {
    "server": {
        "host": "127.0.0.1",
        "port": "10"
    },
    "configuration": {
        "access": "true",
        "login": "Ivan",
        "password": "qwerty"
    }
}

for i_keys, i_values in server_data.items():
    print('{key}:'.format(key=i_keys), end='\n')
    for j_keys, j_values in i_values.items():  # вместо "server_data[i_keys].items()" можно обратится напрямую к значению
        print('\t{j_keys}: {j_values}'.format(j_keys=j_keys, j_values=j_values))


****************************************
# Мы уже реализовывали телефонную книгу для Степана, однако её проблема была в том,
# что туда нельзя было добавить людей с одинаковыми именами. Надо это исправить.
#
# Напишите программу, которая запрашивает у пользователя имя контакта, фамилию и номер телефона,
# добавляет их в словарь и выводит на экран текущий словарь контактов. Словарь состоит из пар «Ф. И. — телефон»,
# где Ф. И. — это составной ключ. Запрос на добавление идёт бесконечно
# (но можно задать своё условие для завершения программы).
# Обеспечьте контроль ввода: если этот человек уже есть в словаре, то выведите соответствующее сообщение.

def print_phonebook(data):
    print('\nТелефонная книга:')
    for user in data:
        print(f'{user[0]} {user[1]}: {data[user]}')

phonebook = dict()
while True:
    first_name = input('\nВведите фамилию ("выход" чтобы закончить): ')
    if first_name != 'выход':
        second_name = input('Введите имя: ')
        contact = (first_name, second_name)
        user_number = int(input('Введите номер телефона: '))
        if contact not in phonebook:
            phonebook.update({contact: user_number})
            print_phonebook(phonebook)
        else:
            print('Такой контакт уже есть!')
    else:
        break

# решение от курса:
# contacts = {}
#
# while True:
#     name = input("Введите имя: ")
#     surname = input("Введите фамилию: ")
#     name_n_surname = (name, surname)
#     if name_n_surname not in contacts:
#         contacts[name_n_surname] = int(input("Введите номер телефона: "))
#     else:
#         print("Такой контакт уже есть!")
#     print(contacts)

****************************************
# Дан код, в котором должно происходить следующее: изначально есть кортеж из пяти чисел.
# Затем вызывается функция, которая получает на вход кортеж чисел, генерирует случайный индекс и случайное значение,
# а затем по этим индексу и значению меняет сам кортеж. Функция должна возвращать кортеж и случайное значение.
#
# В основном коде функция используется два раза, и на экран два раза выводится новый кортеж и случайное значение.
# Причём второй раз выводится сумма первого случайного значения и второго.
## Однако код, который вам дали, оказался нерабочим. Исправьте его в соответствии с описанием.
import random

def change(nums):
    index = random.randint(0, 4)
    value = random.randint(100, 1000)
    nums = list(nums)
    nums[index] = value
    return tuple(nums), value


my_nums = (1, 2, 3, 4, 5)
my_nums, rand_val = change(my_nums)
new_nums, new_rand_val = change(my_nums)

print(my_nums, rand_val)
print(new_nums, new_rand_val + rand_val)


****************************************
# Нашему другу дали задачу: «Есть словарь, в котором ключи — это числа от 0 до 4,
# а значения ключей — числа 0, 100, 144, 20 и 19 соответственно.
# Нужно написать программу, которая выводит список тех значений, # у которых ключ делится на 2.
# Причём программа должна быть в одну строчку.» Программа у друга работает,
# но её не приняли, так как в ней не используется правило «не повторяйся» — это когда части кода не повторяются.
# Помогите другу исправить решение задачи так, чтобы код в строчке не повторялся.
#
# Решение друга:
# print([{0: 0, 1: 100, 2: 144, 3: 20, 4: 19}[i_key] for i_key in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19} if i_key % 2 == 0])
# [0, 144, 19]

print([i_value for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items() if i_key % 2 == 0])

# result = list()
# for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items():
#     if i_key % 2 == 0:
#         result.append(i_value)
# print(result)

****************************************
# Один заказчик попросил нас написать небольшой скрипт для своих криптографических нужд.
# При этом он заранее предупредил, что скрипт должен уметь работать с любым итерируемым типом данных.
# Напишите функцию, которая возвращает список из элементов итерируемого объекта
# (кортежа, строки, списка, словаря), у которых индекс чётный.
#
# Пример 1:
# Допустим, есть такая строка: 'О Дивный Новый мир!'
# Результат: ['О', 'Д', 'в', 'ы', ' ', 'о', 'ы', ' ', 'и', '!']
#
# Пример 2:
# Допустим, есть такой список: [100, 200, 300, 'буква', 0, 2, 'а']
# Результат: [100, 300, 0, 'а']
#
# Примечание: для проверки типа можно использовать функцию isinstance(<элемент>, <тип данных>),
# которая возвращает True, если элемент принадлежит к этому типу данных, и возвращает False в противном случае.

def even_index(object):
    result = [symb for index, symb in enumerate(object) if index % 2 == 0]
    return result


text_list = ['О', 'Дивный', 'Новый мир!']  # список
text_set = {'дрыхнуть', 'спать', 'кемарить', 'тусить', 'гонять'}  # множество
text_dict = {'веселиться: грустить', 'стоять: сидеть', 'моргать: зевать', 'идти: бежать'}  # словарь
text = 'О дивный новый мир'  # строка
text_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)  # кортеж


print('Такой список: ', text_list)
print('Результат: ', even_index(text_list))

print('\nТакое множество: ', text_set)
print('Результат: ', even_index(text_set))

print('\nТакой словарь: ', text_dict)
print('Результат: ', even_index(text_dict))

print('\nТакая строка: ', text)
print('Результат: ', even_index(text))

print('\nТакой кортеж: ', text_tuple)
print('Результат: ', even_index(text_tuple))




****************************************
site = {
    'html': {
        'head': {
            'title': 'Куплю/продам телефон недорого'
        },
        'body': {
            'h2': 'У нас самая низкая цена на iphone',
            'div': 'Купить',
            'p': 'продать'
        }
    }
}

# TODO здесь писать код
import copy


def display_struct(struct, spaces=1):
    for key, value in struct.items():
        if isinstance(value, dict):
            print(' ' * spaces, key)
            display_struct(value, spaces + 3)
        else:
            print('{}{} : {}'.format(' ' * spaces, key, value))


def create_site(site, total, phone=None, copy_site={}):
    if total == 0:
        return
    phone = input('Введите название продукта для нового сайта: ')
    total -= 1

    site['html']['head']['title'] = 'Куплю/продам {} недорого'.format(phone)
    site['html']['body']['h2'] = 'У нас самая низкая цена на {}'.format(phone)
    new_site = copy.deepcopy(site)
    copy_site.update({'\nСайт для {}:'.format(phone): site})
    display_struct(copy_site)
    create_site(new_site, total)
    return


total_site = int(input('Сколько сайтов: '))
create_site(site, total_site)
# задача оказалась для меня сложной, с выводом как в примере так и не справился...
****************************************
# Обычно программисты любят, когда всё просто и понятно. Но Антон не из таких.
# Он любит устраивать себе челлендж, развиваться и сразу применять на практике то, что только что узнал.
# И в этот раз он подумал реализовать подсчёт факториала без использования циклов.
#
# Напишите функцию, которая считает факториал числа с помощью рекурсии.
#
# Кстати, в Python есть ограничение на количество рекурсивных вызовов.
# Попробуйте передать своей функции, например, число 1000 и посмотрите, что будет.
def factorial(num):
    if num == 1:
        return num
    return num * factorial(num - 1)


print(factorial(5))

****************************************
# В одном проекте на 10 000 строк кода произошла критическая ошибка.
# Хорошо, что старший разработчик быстро её нашёл и исправил. Он решил проверить, смогли бы вы её исправить,
# если бы его не было на месте. Поэтому он написал для вас код с аналогичной ошибкой:

import random

def change_dict(dct):
    num = random.randint(1, 100)
    for i_key, i_value in dct.items():
        if isinstance(i_value, list):
            i_value.append(num)
        if isinstance(i_value, dict):
            i_value[num] = i_key
        if isinstance(i_value, set):
            i_value.add(num)


nums_list = [1, 2, 3]
some_dict = {1: 'text', 2: 'another text'}
uniq_nums = {1, 2, 3}
common_dict = {1: nums_list.copy(), 2: some_dict.copy(), 3: uniq_nums.copy(), 4: (10, 20, 30)}

change_dict(common_dict)
print(common_dict)
# Суть кода в том, что у вас есть общий словарь из нескольких ключей, значения которых равны ранее объявленным переменным.
# Затем вызывается функция, которая должна изменять значения словаря, добавляя к значениям случайное число,
# в зависимости от типа данных. Но при этом меняются и ранее объявленные переменные.
# Исправьте эту ошибку и убедитесь, что nums_list, some_dict и uniq_nums не меняются.
print(nums_list, some_dict, uniq_nums)

# Либо мы можем применить вспомогательную функцию, которая сделает это за нас:
import copy

common_dict = {1: nums_list, 2: some_dict, 3: uniq_nums, 4: (10, 20, 30)}
common_dict_2 = copy.deepcopy(common_dict)  # Она будет особенно полезна в структурах, в которых множество вложенных переменных
change_dict(common_dict_2)
print(common_dict_2)
print(nums_list, some_dict, uniq_nums)

****************************************
# Вы пишете небольшое приложение для работы с файлами. Реализуйте функцию, которая может принимать на вход три аргумента:
# вопрос пользователю (на который нужно ответить да или нет), сообщение о неправильном вводе и количество попыток.
# Вопрос — обязательный позиционный аргумент, остальные — со значениями по умолчанию.
# При корректном ответе функция может возвращать что угодно — например, число 1 при ответе «да» или 0 при ответе «нет».
#
# В основной программе вызовите функцию минимум три раза:
# только с вопросом, с вопросом и сообщением об ошибке, с вопросом и количеством попыток.
#
# Пример работы программы:
# Вы действительно хотите выйти? что
# Неверный ввод. Пожалуйста, введите 'да' или 'нет'.
# Осталось попыток: 3
# Вы действительно хотите выйти? да
# Удалить файл? не знаю
# Так удалить или нет?
# Осталось попыток: 3
# Удалить файл? нет
# Записать файл? ага
# Неверный ввод. Пожалуйста, введите 'да' или 'нет'.
# Осталось попыток: 1
# Записать файл? да

def func(question,
         message='Неверный ввод. Пожалуйста введите "да" или "нет".',
         count=4):
    while True:
        user_input = input(question).lower()
        if user_input == 'да':
            return 1
        if user_input == 'нет':
            return 0
        count -= 1
        if count == 0:
            print('Попытки закончились!')
            break
        print(message)
        print('Осталось попыток:', count)


print(func('Сохранить файл? '))
print(func('Удалить файл? ', 'Да или нет?'))
print(func('Удалить файл? ', message='Так удалить или нет?'))
print(func('Записать файл? ', count=2))

****************************************
# На одном из форумов, посвящённых программированию, пользователь выложил такой код
# для расчёта степени числа без использования циклов, ** и функции math.pow():

def power(num, degree):
    if degree <= 0:
        return 1
    return num * power(num, degree - 1)

float_num = float(input('Введите вещественное число: '))
int_num = int(input('Введите степень числа: '))
print(float_num, '**', int_num, '=', power(float_num, int_num))

# Другие пользователи отметили, что это решение нерабочее и в нём есть ошибки. Исправьте это решение,
# не используя циклы, возведение в степень через ** и функцию math.pow()
#
# Правильный результат:
# Введите вещественное число: 1.5
# Введите степень числа: 5
# 1.5 ** 5 = 7.59375
****************************************
# Друг никак не может понять эту тему с изменяемыми и неизменяемыми типами, ссылками, объектами и их id.
# Видя, как он мучается, вы решили помочь ему и объяснить эту тему наглядно.
# Пользователь вводит любой объект. Напишите программу, которая выводит на экран тип введённых данных,
# информацию о его изменяемости, а также id этого объекта.
#
# Пример 1:
# Введите данные: привет
#
# Тип данных: str (строка)
# Неизменяемый (immutable)
# Id объекта: 1705156583984
#
# Пример 2:
# Введите данные: {‘a’: 10, ‘b’: 20}
#
# Тип данных: dict (словарь)
# Изменяемый (mutable)
# Id объекта: 1705205308536

# if type(data) in (int, float, str, tuple, bool):
#     print('Неизменяемый (immutable)')
# elif type(data) in (str, set, dict):
#     print('Изменяемый (mutable)')

data_names_dict = {
    "<class 'str'>": "строка",
    "<class 'dict'>": "словарь",
    "<class 'list'>": "список",
    "<class 'set'>": "множество",
    "<class 'int'>": 'число',
    "<class 'bool'>": 'булево'
}

mutable_check_helper = {
    "mutable": ("словарь(dict)", "список(list)", "множество(set)"),
    "immutable": ("число(int)", "число с плавающей точкой(float)", "строка(str)", "кортеж(tuple)", "булево(bool)")
}


def check_info(data):
    type_of_data = type(data)
    name_of_data = ""
    if str(type_of_data) in data_names_dict:
        name_of_data = data_names_dict[str(type_of_data)]

    if name_of_data in mutable_check_helper["mutable"]:
        property_of_data = "Изменяемый (mutable)"
    else:
        property_of_data = "Неизменяемый (immutable)"

    print(f"Тип данных: {type_of_data} ({name_of_data})")
    print(property_of_data)
    print("Id объекта:", id(data))


data_in = True
check_info(data_in)

****************************************
# При работе со значениями по умолчанию и изменяемыми типами данных нужно знать и остерегаться ещё одной интересной штуки.
# Напишите функцию с двумя аргументами: первый — число num, позиционный аргумент;
# второй — список lst, по умолчанию он пустой.
# В теле функции в список добавляется число num и сам список выводится на экран.
#
# В основной программе вызовите функции три раза только с одним аргументом (числом), например так:
# add_num(5)
# add_num(10)
# add_num(15)
#
# И посмотрите, что произойдёт.
# После этого сделайте значение lst по умолчанию None и поправьте функцию, чтобы она работала правильно.

def add_num(num, lst=None):
    lst = lst or []
    if not lst:
        lst = []
    lst.append(num)
    print(lst)


add_num(5)
add_num(10)
add_num(15)

****************************************
# Когда мы работаем с большой многоуровневой структурой, нам нередко необходимо пройтись по ней и найти нужный элемент.
# Для этого в программировании используются специальные алгоритмы поиска.
# Напишите функцию, которая находит заданный пользователем ключ в словаре и выдаёт значение этого ключа на экран.
# В качестве примера можно использовать такой словарь:
#
# site = {
#     'html': {
#         'head': {
#             'title': 'Мой сайт'
#         },
#         'body': {
#             'h2': 'Здесь будет мой заголовок',
#             'div': 'Тут, наверное, какой-то блок',
#             'p': 'А вот здесь новый абзац'
#         }
#     }
# }
#
# Пример 1:
# Искомый ключ: h2
# Значение: Здесь будет мой заголовок
#
# Пример 2:
# Искомый ключ: abc
# Такого ключа в структуре сайта нет.
site = {
    'html': {
        'head': {
            'title': 'Мой сайт'
        },
        'body': {
            'h2': 'Здесь будет мой заголовок',
            'div': 'Тут, наверное, какой-то блок',
            'p': 'А вот здесь новый абзац'
        }
    }
}

def find_key(key, data):
    if key in data:
        return data[key]

    for i_key in data.values():
        if isinstance(i_key, dict):
            result = find_key(key, i_key)
            if result:
                break
    else:
        result = None

    return result



user_input = (input('Искомый ключ: '))
value = find_key(user_input, site)
if value:
    print('Значение:', value)
else:
    print('Такого ключа нет')


****************************************
# Нашего друга попросили написать функцию, которая на вход принимает список всякого мусора.
# Ему нужно подготовить из этого списка список словарей, чтобы его коллеги смогли дальше продолжить обработку данных.
# Вот список правил, что нужно сделать с изначальным списком:
#
# Если в списке встретился словарь, то оставляем его.
# Если в списке встретилась строка, то из неё нужно сделать словарь и положить его в итоговый список,
# например  “abc” → {“abc”: “abc”}.
#
# С числами нужно сделать то же самое, что и со строками.
# Всё остальное выкидываем из нашего списка.
# Друг написал программу, но в ней ошибка, так как она что-то не то выводит :( Нужна ваша помощь, вот сама программа:

# def create_dict(data, template=dict()):
#     if isinstance(data, dict):
#         return data
#     if isinstance(data, int) or isinstance(data, float) or isinstance(data, str):
#         return template[data] = data
#
#
# def data_preparation(old_list):
#     new_list = []
#     for i_element in old_list:
#         new_list.append(create_dict(i_element))
#     return new_list
#
#
# data = [“sad”, {“sds”: 23}, {43}, [12, 42, 1], 2323]
# data = data_preparation(data)
# print(data)
# Исправьте программу и убедитесь, что всё работает верно.


def create_dict(data, template=None):
    if isinstance(data, dict):
        return data
    elif isinstance(data, (int, float, str)):
        template = template or dict()
        template[data] = data
        return template


def data_preparation(old_list):
    new_list = []
    for i_element in old_list:
        new_elem = (create_dict(i_element))
        if new_elem:
            new_list.append(new_elem)  # если есть новый элемент - добавляем его в список
    return new_list


data = ['sad', {'sds': 23}, {43}, [12, 42, 1], 2323]
print(data_preparation(data))

****************************************
# Вы работаете системным администратором в одной компании. На диске каждого сотрудника компании
# в специальной папке access лежит файл admin.bat. Этот файл предназначен для вас, и вам нужен путь до этого файла,
# причём как относительный, так и абсолютный. Недолго думая, вы решили написать небольшой скрипт,
# который закинете по сети к этому файлу.
# Напишите программу, которая выводит на экран относительный и абсолютный пути до файла admin.bat.
#
# Пример результата:
# Абсолютный путь до файла: C:\Users\Roman\PycharmProjects\Skillbox\access\admin.bat
# Относительный путь до файла: Skillbox\access\admin.bat
import os


folder_name = 'access'
file_name = 'admin.bat'
rel_path = os.path.join('..', folder_name, file_name)
abs_path = os.path.abspath(rel_path)

print('Относительный путь до файла:', rel_path)
print('Абсолютный путь до файла:', abs_path)

****************************************
# Андрей для себя хочет сделать экспериментальный сайт, где будет красиво отображаться вся структура его диска:
# папки одними иконками, файлы — другими. Поэтому ему нужен код, который поможет определить, какой тип иконки вставить.
#
# Напишите программу, которая по заданному абсолютному пути определяет, на что указывает этот путь
# (на директорию, файл, или же путь является ссылкой), и выведите соответствующее сообщение.
# Если путь указывает на файл, то также выведите его размер (сколько он весит в байтах).
# Обеспечьте контроль ввода: проверка пути на существование.
# Подсказка: для вывода размера файла поищите соответствующий метод.
#
# Пример 1:
# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py
# Это файл
# Размер файла: 605 байт
#
# Пример 2:
# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py
# Указанного пути не существует
import os

def find_file(file):
    print('Путь:', file)
    if os.path.exists(file):
        if os.path.isfile(file):
            print('Это файл')
            print('Размер файла:', os.path.getsize(file), 'байт')
        if os.path.isdir(file):
            print('Это папка')
            for i_elem in os.listdir(file):
                path = os.path.join(file, i_elem)
                print('Содержимое папки:', path)
    else:
        print('Указанного пути не существует')


file = 'Отряды.py'  # название файла

abs_path = os.path.abspath(os.path.join('..', 'lesson17', file))  # указываем правильный путь

find_file(abs_path)

****************************************
# Одному программисту дали задачу для обработки неких результатов тестирования двух групп людей.
# Файл первой группы (group_1.txt) находится в папке task, файл второй группы (group_2.txt) — в папке Additional_info.
# Содержимое файла group_1.txt
# Бобровский Игорь 10
# Дронов Александр 20
# Жуков Виктор 30
#
# Содержимое файла group_2.txt
# Павленко Геннадий 20
# Щербаков Владимир 35
# Marley Bob 15
#
# На экран нужно было вывести сумму очков первой группы, затем разность очков опять же первой группы
# и напоследок — произведение очков уже второй группы.
# Программист оказался не очень опытным, писал код наобум и даже не стал его проверять. И оказалось,
# этот код просто не работает. Вот что он написал:
# file = open('E:\task\group_1.txt', 'read')
# summa = 0
# for i_line in file:
#     info = i_line.split()
#     summa += info[2]
# file = open('E:\task\group_1.txt', 'read')
# diff = 0
# for i_line in file:
#     info = i_line.split()
#     diff -= info[2]
# file_2 = open('E:\task\group_2.txt', 'read')
# compose = 0
# for i_line in file:
#     info = i_line.split()
#     compose *= info[2]
# print(summa)
# print(diff)
# print(compose)
#
# Исправьте код для решения поставленной задачи. Для проверки результата создайте необходимые папки
# (task, Additional_info, Dont touch me) на своём диске в соответствии с картинкой и также добавьте файлы
# group_1.txt и group_2.txt.
import os

print(os.listdir())
file = open('F:\\task\\group_1.txt', 'r', encoding='utf-8')

summa = 0
diff = 0
for i_line in file:
    info = i_line.split('\n')
    info = info[0].split(' ')
    summa += int(info[2])
    diff -= int(info[2])
file.close()

file_2 = open('F:\\task\\Additional_info\\group_2.txt', 'r', encoding='utf-8')
compose = 1
for i_line_2 in file_2:
    info_2 = i_line_2.split('\n')
    info_2 = info_2[0].split(' ')
    compose *= int(info_2[2])
    print(info_2[2])
file_2.close()

print(summa)
print(diff)
print(compose)

****************************************
# Во входном файле numbers.txt записано N целых чисел, каждое в отдельной строке.
# Напишите программу, которая выводит их сумму в выходной файл answer.txt.
#
# Пример:
# Содержимое файла numbers.txt:
# 1
# 2
# 3
# 4
# 10
#
# Содержимое файла answer.txt
# 20

numbers = open('numbers.txt', 'r')
count = 0
for strin in numbers:
    count += int(strin)
print(count)
numbers.close()
result = open('answer.txt', 'a')
result.write(str(count))
result.write(', ')
result.close()

****************************************
# Выберите любую директорию на своём диске и затем напишите программу,
# выводящую на экран абсолютные пути к файлам и папкам, которые находятся внутри этой директории.
#
# Результат программы на примере директории проекта python_basic:
# Содержимое каталога G:\PycharmProjects\python_basic
#     G:\PycharmProjects\python_basic\.git
#     G:\PycharmProjects\python_basic\.idea
#     G:\PycharmProjects\python_basic\Module14
import os


def print_dirs(project):
    print('Содержимое директории', project)
    if os.path.exists(project):
        for i_elem in os.listdir(project):
            path = os.path.join(project, i_elem)
            print('    ', path)
    else:
        print('Каталога проекта не существует.')

folder_name = 'lesson18'

abs_path = os.path.abspath(os.path.join('..', folder_name))


print_dirs(abs_path)



# решение от курса:
# for path in os.listdir('..'):
#     print(os.path.join(os.path.abspath('..'), path))
****************************************
# В уроке мы написали функцию, которая ищет нужный нам файл во всех подкаталогах указанной директории.
# Однако, как мы понимаем, файлов с таким названием может быть несколько.
# Напишите функцию, которая принимает на вход абсолютный путь до директории и имя файла,
# проходит по всем вложенным файлам и папкам и выводит на экран все абсолютные пути с этим именем.
#
# Пример:
# Ищем в: C:/Users/Roman/PycharmProjects/Skillbox
# Имя файла: lesson2
#
# Найдены следующие пути:
# C:/Users/Roman/PycharmProjects/Skillbox\Module15\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module16\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module17\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module18\lesson2.py
import os

def search_file(dir, file):
    print('переходим', dir)
    for i_elem in os.listdir(dir):
        path = os.path.join(dir, i_elem)
        # print(path)
        if i_elem == file:
            print(os.path.abspath(path))

        if os.path.isdir(path):
            result = search_file(path, file)
            if result:
                break



file_name = 'Задача 1. Склады.py'  # что ищем
abs_path = os.path.abspath(os.path.join('..'))  # где ищем

print('Найдены следующие пути:')
search_file(abs_path, file_name)

****************************************
# Как мы помним, скрипты — это просто куча строк текста, хоть они и понятны только программисту.
# Таким образом, с ними можно работать точно так же, как и с обычными текстовыми файлами.
#
# Используя функцию поиска файла из предыдущего урока, реализуйте программу, которая находит внутри
# указанного пути все файлы с искомым названием и выводит на экран текст одного из них
# (выбор можно сгенерировать случайно).
#
# Подсказка: можно использовать, например, список для сохранения найденного пути.
import os
import random


def find_file(cur_path, file_name):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if file_name == i_elem:
            print('Найде файл')
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                all_paths.extend(result)

    return all_paths

def chek_file(path_to_file):
    file = open(path_to_file, 'r', encoding='utf8')
    for line in file:
        print(line)
    file.close()


all_paths = find_file('..', 'Задача 2. Кризис фруктов.py')
chek_file(random.choice(all_paths))


****************************************
# Ваш друг, который тоже проходит курс Python Basic, поехал с ноутбуком в другой город, и там у него случилась беда:
# его диск пришлось отформатировать, а доступ в интернет отсутствует. Остался только телефон с мобильным интернетом.
# Так как со связью (и с памятью) проблемы, друг попросил вас скинуть одним файлом все решения и скрипты,
# которые у вас сейчас есть.
# Напишите программу, которая копирует код каждого скрипта в папке проекта python_basic в файл scripts.txt,
# разделяя код строкой из 40 символов *.
#
# Пример содержимого файла scripts.txt:
# import platform
# import sys
#
# info = 'OS info is \n{}\n\nPython version is {} {}'.format(
#     platform.uname(),
#     sys.version,
#     platform.architecture(),
# )
# print(info)
#
# with open('os_info.txt', 'w', encoding='utf8') as file:
#     file.write(info)
# ****************************************
# print("Введите первую точку")
# x1 = float(input('X: '))
# y1 = float(input('Y: '))
# print("\nВведите вторую точку")
# x2 = float(input('X: '))
# y2 = float(input('Y: '))
#
# print("Уравнение прямой, проходящей через эти точки:")
# x_diff = x1 - x2
# y_diff = y1 - y2
# if x_diff == 0:
#     print("x = ", x1)
# elif y_diff == 0:
#     print("y = ", y1)
# else:
#     k = y_diff / x_diff
#     b = y2 - k * x2
#     print("y = ", k, " * x + ", b)
# ****************************************
import os


def find_file(cur_path, file_name):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if i_elem.endswith(file_name):
            # print('Найден файл', i_elem)
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                all_paths.extend(result)

    return all_paths

def chek_file(path_to_file):
    for file in path_to_file:
        files = open(file, 'r', encoding='utf8')
        new_file = open('scripts.txt', 'a', encoding='utf8')
        for line in files:
            new_file.write(str(line))
        new_file.write('\n' + '*'*40+'\n')
        files.close()
        new_file.close()



all_path = find_file('..', '.py')

files_list = chek_file(all_path)
print(files_list)

# решение курса
# def find_file(cur_path, ending):
#     all_paths = []
#     for i_elem in os.listdir(cur_path):
#         path = os.path.join(cur_path, i_elem)
#         if i_elem.endswith(ending):
#             all_paths.append(os.path.abspath(path))
#         elif os.path.isdir(path):
#             result = find_file(path, ending)
#             if result:
#                 all_paths.extend(result)
#
#     return all_paths
#
#
# def get_text_from_file(path_to_file):
#     file = open(path_to_file, "r", encoding="utf8")
#     result = ""
#     for line in file:
#         result += line
#     return result
#
#
# all_py_files = find_file('..', '.py')  # вместо ".." можно вставить путь до папки python_basic
#
# file_result = open("scripts.txt", "w", encoding="utf8")
#
# for file_path in all_py_files:
#     file_result.write(get_text_from_file(file_path))
#     file_result.write("\n" * 2 + "*" * 80 + "\n" * 2)

****************************************
# Напишите программу, которая выводит на экран только корень диска, на котором запущен скрипт.
# Учтите, что скрипт может быть запущен где угодно и при любой вложенности папок.
#
# Результат программы на примере диска G:
# Корень диска: G:\\

import os


def print_dirs(project):
    for i_elem in os.listdir(project):
        path = os.path.join(project, i_elem)
        print(' ', path)

abs_path = os.path.abspath(os.path.join(os.path.sep))
print('Содержимое каталога', abs_path)
print_dirs(abs_path)


****************************************
import random
def get_random_letter(n):
    return random.choices([chr(i) for i in range(ord('а'), ord('я'))], k=n)


print(get_random_letter(int(input('Сколько случайных букв желаешь: '))))

****************************************
# Программисты постоянно гуглят ошибки и ищут уже готовый код, который можно использовать
# для своей программы, чтобы не изобретать велосипед.
# Андрей поступил также и нашёл для своего проекта код,
# который должен находить минимальное и максимальное числа в списке.
# Вот этот код:

nums_list = []
N = int(input('Кол-во чисел в списке: '))

for _ in range(N):
    num = int(input('Очередное число: '))
    nums_list.append(num)

maximum = -1
minimum = 1

for i in nums_list:
    if maximum < i:
        maximum = i
    if minimum > i:
        minimum = i

print('Максимальное число в списке:', maximum)
print('Минимальное число в списке:', minimum)
****************************************
worker = int(input('Кол-во сотрудников в офисе: '))
worker_ID = []

for _ in range(worker):
    id = int(input('ID сотрудника: '))
    worker_ID.append(id)
search_ID = int(input('Какой ID ищем? '))

if search_ID in worker_ID:
    print('Сотрудник на месте')
else:
    print('Сотрудник не работает!')
****************************************
# Пользователь вводит список из N чисел и число K.
# Напишите код, выводящий на экран сумму индексов элементов списка, которые кратны K.

numbers_count = int(input('Введите кол-во чисел: '))
numbers = []

for number in range(numbers_count):
    print('Введите', number + 1, 'число: ', end = '')
    number_input = int(input())
    numbers.append(number_input)

divider = int(input('Введите делитель: '))

sum_index = 0
for n in numbers:
    if n % divider == 0:
        print('Индекс числа', n, ':', numbers.index(n) )
        sum_index += numbers.index(n)
print('Сумма индексов:', sum_index)





****************************************
numbers = []
for n in range(101):
    numbers.append(n)
print(numbers)

****************************************
# В собачьих бегах участвует N собак, у каждой из них есть определённое количество очков за сезон.
# На огромном табло выводятся очки каждой собаки.
# Однако при выводе был обнаружен баг: собаки с наибольшим и наименьшим количеством очков поменялись местами!
# Нужно это исправить.
#
# Дан список очков из N собак. Напишите программу, которая меняет местами наибольший и наименьший элементы в списке.

total_dogs = int(input('Введите кол-во собак: '))
dogs_list = []
for dog in range(total_dogs):
    print('Сколько очков у', dog + 1, 'собаки:', end=' ')
    dog_score = int(input())
    dogs_list.append(dog_score)

min = dogs_list[0]
max = dogs_list[0]

min_index = 0
max_index = 0


for i_dogs in range(total_dogs):
    if dogs_list[i_dogs] < min:
        min = dogs_list[i_dogs]
        min_index = i_dogs

    if dogs_list[i_dogs] > max:
        max = dogs_list[i_dogs]
        max_index = i_dogs

print('мин число:', min)
print('макс число:', max)
print(dogs_list)
dogs_list[min_index], dogs_list[max_index] = dogs_list[max_index], dogs_list[min_index]
print(dogs_list)
****************************************
# Дана строка S и номер позиции символа в строке.
# Напишите программу, которая выводит соседей этого символа и сообщение о количестве таких же символов
# среди этих соседей: их нет, есть ровно один или есть два таких же.

user_str = input('Введите строку: ') # abcd
user_index = int(input('Номер символа: ')) - 1

user_str = list(user_str)
count = 0
if user_index > 0:
    print('Символ слева:', user_str[user_index - 1])
    if user_str[user_index - 1] == user_str[user_index]:
        count += 1
if user_index < len(user_str)-1:
    print('Символ справа:', user_str[user_index + 1])
    if user_str[user_index + 1] == user_str[user_index]:
        count += 1

if count == 2:
     print('Рядом есть два таких же символа')
elif count == 1:
    print('Рядом есть такойже символ')
elif count == 0:
    print('Рядом таких же символов нет')

****************************************
numbers = [3, 7, 5]

while True:
    number = int(input('Новое число: '))
    numbers.append(number)
    print('Текущий список чисел:', numbers)

    for i in numbers:
        print(i ** 2, i ** 3, i ** 4)

print()

****************************************
# Мы продолжаем участвовать в разработке нового текстового редактора и делать жизнь обычных пользователей чуть лучше.
# В этот раз у нас стоит задача сделать фишку с поиском и заменой символов в выделенной строчке.
# Например, человек что-то перечислял в тексте, но ошибся и вместо точек с запятой использовал двоеточия.
# Лингвисты негодуют.
#
# Пользователь вводит строку S.
# Напишите программу, которая заменяет в строке все двоеточия (:) на точки с запятой (;).
# Также подсчитайте количество замен и выведите ответ на экран (и новую строку тоже).
# Для решения используйте список.
#
# Пример:
# Введите строку: гвозди:шурупы: гайки
# Исправленная строка: гвозди; шурупы; гайки
# Кол - во замен: 2

words = input('Введите строку: ')
words_list = list(words)
count = 0
for index, letter in enumerate(words_list):
    if letter == ':':
        words_list[index] = ';'
        count += 1
print('Измененная строка:', end=' ')
for i in words_list:
    print(i, end='')

print('\nКоличество замен:', count)

****************************************
# Мы уже писали программу для лингвистов, которая считала количество определённых букв в тексте.
# Теперь эту программу нужно улучшить. Есть список из трёх слов, которые вводит пользователь.
# Затем вводится сам текст произведения строго по словам. Текст вводится до тех пор, пока не встретится слово end.
# Напишите программу, которая посчитает, сколько раз слова пользователя встречаются в тексте.

words_list = []
count = [0, 0, 0]
for i in range(3):
    print('Введите', i + 1, 'слово:', end=' ')
    word = input()
    words_list.append(word)

user_word = input('Слово из текста: ')
while user_word != 'end':
    for index in range(3):
        if words_list[index] == user_word:
            count[index] += 1
    user_word = input('Слово из текста: ')

print('Подсчет слов в тексте:\n')
for i in range(3):
    print(words_list[i], ':', count[i])

****************************************
# Гера решил попрактиковаться в программировании и захотел написать небольшой скрипт,
# который после двух сообщений отправляет ещё одно на основе первых двух.
# Пользователь вводит две строки. В каждой из них есть какое-то количество специальных символов ! и ?.
# Напишите программу, которая считает количество этих символов отдельно в первой строке и отдельно во второй.
# Если в первой строке их больше, чем во второй, то на экран выводится первая строчка, объединённая со второй, а иначе — вторая с первой.
# При равном количестве символов в строках выводится «Ой».


first_question = input('Первое сообщение: ')
second_question = input('Второе сообщение: ')

first_count = first_question.count('!') + first_question.count('?')
second_count = second_question.count('!') + second_question.count('?')

if first_count > second_count:
    print('Третье сообщение:', first_question, second_question)
elif second_count > first_count:
    print('Третье сообщение:', second_question, first_question)
else:
    print('Ой!')

****************************************
# Одна IT-компания решила расшириться и взяла под своё крыло ещё три таких же, но поменьше.
# Конечно же, все выполненные и невыполненные задачи этих компаний перетекли в основную компанию.
# Даны четыре списка компаний, в которых для каждой задачи написано, выполнена (1) она или нет (0):
#
# main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
# first_company = [0, 0, 0]
# second_company = [1, 0, 0, 1, 1]
# third_company = [1, 1, 1, 0, 1]
#
# Напишите программу, которая расширяет список main элементами остальных списков, выведите итоговый список, а также выведите количество невыполненных задач.

main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
first_company = [0, 0, 0]
second_company = [1, 0, 0, 1, 1]
third_company = [1, 1, 1, 0, 1]

main.extend(first_company)
main.extend(second_company)
main.extend(third_company)

print('Общий список задач:', main)
print('Кол-во невыполненных задач:', main.count(0))

****************************************
# В маленьком зоопарке каждое животное сидит в отдельной клетке, всего этих животных четверо: лев, кенгуру, слон и обезьяна.
# В базе данных они хранятся в виде вот такого списка:
#
# zoo = ['lion', 'kangaroo', 'elephant', 'monkey']
#
# Сегодня в зоопарк завезли медведя (bear) и посадили его между львом и кенгуру.В итоге животных стало пять.
# А через неделю слона перевезли в другое место и в списке снова стало четверо животных.
# Реализуйте эти действия в коде программы и выведите в консоль итоговый список животных, а также покажите,
# в какой клетке сидят лев и обезьяна. Для этого используйте методы списков.
#
# Результат работы программы:
# # Зоопарк: ['lion', 'bear', 'kangaroo', 'monkey']
# # Лев сидит в клетке номер 1
# Обезьяна сидит в клетке номер 4

zoo = ['lion', 'kangaroo', 'elephant', 'monkey']

zoo.insert(1, 'bear')
zoo.remove('elephant')

print('Зоопарк:', zoo)
print('Лев сидит в клетке номер', zoo.index('lion') + 1)
print('Обезьяна сидит в клетке номер', zoo.index('monkey') + 1)

****************************************
# Мы поддерживаем свой киносайт и хотим сделать так, чтобы пользователи после регистрации могли создать
# собственный рейтинг фильмов из тех, которые есть на сайте.

def chek_film(film, films):
    for i_film in films:
        if i_film == film:
            return True
    else:
        return False


films = [
    'Крепкий орешек', 'Назад в будущее', 'Таксист',
    'Леон', 'Богемская рапсодия', 'Город грехов',
    'Мементо', 'Отступники', 'Деревня',
    'Проклятый остров', 'Начало', 'Матрица', 'Не грози южному централу'
]
user_films = []

while True:
# Программисты постоянно гуглят ошибки и ищут уже готовый код, который можно использовать
# для своей программы, чтобы не изобретать велосипед.
# Андрей поступил также и нашёл для своего проекта код,
# который должен находить минимальное и максимальное числа в списке.
# Вот этот код:

nums_list = []
N = int(input('Кол-во чисел в списке: '))

for _ in range(N):
    num = int(input('Очередное число: '))
    nums_list.append(num)

maximum = -1
minimum = 1

for i in nums_list:
    if maximum < i:
        maximum = i
    if minimum > i:
        minimum = i

print('Максимальное число в списке:', maximum)
print('Минимальное число в списке:', minimum)
****************************************
worker = int(input('Кол-во сотрудников в офисе: '))
worker_ID = []

for _ in range(worker):
    id = int(input('ID сотрудника: '))
    worker_ID.append(id)
search_ID = int(input('Какой ID ищем? '))

if search_ID in worker_ID:
    print('Сотрудник на месте')
else:
    print('Сотрудник не работает!')
****************************************
# Пользователь вводит список из N чисел и число K.
# Напишите код, выводящий на экран сумму индексов элементов списка, которые кратны K.

numbers_count = int(input('Введите кол-во чисел: '))
numbers = []

for number in range(numbers_count):
    print('Введите', number + 1, 'число: ', end = '')
    number_input = int(input())
    numbers.append(number_input)

divider = int(input('Введите делитель: '))

sum_index = 0
for n in numbers:
    if n % divider == 0:
        print('Индекс числа', n, ':', numbers.index(n) )
        sum_index += numbers.index(n)
print('Сумма индексов:', sum_index)





****************************************
numbers = []
for n in range(101):
    numbers.append(n)
print(numbers)

****************************************
# В собачьих бегах участвует N собак, у каждой из них есть определённое количество очков за сезон.
# На огромном табло выводятся очки каждой собаки.
# Однако при выводе был обнаружен баг: собаки с наибольшим и наименьшим количеством очков поменялись местами!
# Нужно это исправить.
#
# Дан список очков из N собак. Напишите программу, которая меняет местами наибольший и наименьший элементы в списке.

total_dogs = int(input('Введите кол-во собак: '))
dogs_list = []
for dog in range(total_dogs):
    print('Сколько очков у', dog + 1, 'собаки:', end=' ')
    dog_score = int(input())
    dogs_list.append(dog_score)

min = dogs_list[0]
max = dogs_list[0]

min_index = 0
max_index = 0


for i_dogs in range(total_dogs):
    if dogs_list[i_dogs] < min:
        min = dogs_list[i_dogs]
        min_index = i_dogs

    if dogs_list[i_dogs] > max:
        max = dogs_list[i_dogs]
        max_index = i_dogs

print('мин число:', min)
print('макс число:', max)
print(dogs_list)
dogs_list[min_index], dogs_list[max_index] = dogs_list[max_index], dogs_list[min_index]
print(dogs_list)
****************************************
# Дана строка S и номер позиции символа в строке.
# Напишите программу, которая выводит соседей этого символа и сообщение о количестве таких же символов
# среди этих соседей: их нет, есть ровно один или есть два таких же.

user_str = input('Введите строку: ') # abcd
user_index = int(input('Номер символа: ')) - 1

user_str = list(user_str)
count = 0
if user_index > 0:
    print('Символ слева:', user_str[user_index - 1])
    if user_str[user_index - 1] == user_str[user_index]:
        count += 1
if user_index < len(user_str)-1:
    print('Символ справа:', user_str[user_index + 1])
    if user_str[user_index + 1] == user_str[user_index]:
        count += 1

if count == 2:
     print('Рядом есть два таких же символа')
elif count == 1:
    print('Рядом есть такойже символ')
elif count == 0:
    print('Рядом таких же символов нет')

****************************************
numbers = [3, 7, 5]

while True:
    number = int(input('Новое число: '))
    numbers.append(number)
    print('Текущий список чисел:', numbers)

    for i in numbers:
        print(i ** 2, i ** 3, i ** 4)

print()

****************************************
# Мы продолжаем участвовать в разработке нового текстового редактора и делать жизнь обычных пользователей чуть лучше.
# В этот раз у нас стоит задача сделать фишку с поиском и заменой символов в выделенной строчке.
# Например, человек что-то перечислял в тексте, но ошибся и вместо точек с запятой использовал двоеточия.
# Лингвисты негодуют.
#
# Пользователь вводит строку S.
# Напишите программу, которая заменяет в строке все двоеточия (:) на точки с запятой (;).
# Также подсчитайте количество замен и выведите ответ на экран (и новую строку тоже).
# Для решения используйте список.
#
# Пример:
# Введите строку: гвозди:шурупы: гайки
# Исправленная строка: гвозди; шурупы; гайки
# Кол - во замен: 2

words = input('Введите строку: ')
words_list = list(words)
count = 0
for index, letter in enumerate(words_list):
    if letter == ':':
        words_list[index] = ';'
        count += 1
print('Измененная строка:', end=' ')
for i in words_list:
    print(i, end='')

print('\nКоличество замен:', count)

****************************************
# Мы уже писали программу для лингвистов, которая считала количество определённых букв в тексте.
# Теперь эту программу нужно улучшить. Есть список из трёх слов, которые вводит пользователь.
# Затем вводится сам текст произведения строго по словам. Текст вводится до тех пор, пока не встретится слово end.
# Напишите программу, которая посчитает, сколько раз слова пользователя встречаются в тексте.

words_list = []
count = [0, 0, 0]
for i in range(3):
    print('Введите', i + 1, 'слово:', end=' ')
    word = input()
    words_list.append(word)

user_word = input('Слово из текста: ')
while user_word != 'end':
    for index in range(3):
        if words_list[index] == user_word:
            count[index] += 1
    user_word = input('Слово из текста: ')

print('Подсчет слов в тексте:\n')
for i in range(3):
    print(words_list[i], ':', count[i])

****************************************
# Гера решил попрактиковаться в программировании и захотел написать небольшой скрипт,
# который после двух сообщений отправляет ещё одно на основе первых двух.
# Пользователь вводит две строки. В каждой из них есть какое-то количество специальных символов ! и ?.
# Напишите программу, которая считает количество этих символов отдельно в первой строке и отдельно во второй.
# Если в первой строке их больше, чем во второй, то на экран выводится первая строчка, объединённая со второй, а иначе — вторая с первой.
# При равном количестве символов в строках выводится «Ой».


first_question = input('Первое сообщение: ')
second_question = input('Второе сообщение: ')

first_count = first_question.count('!') + first_question.count('?')
second_count = second_question.count('!') + second_question.count('?')

if first_count > second_count:
    print('Третье сообщение:', first_question, second_question)
elif second_count > first_count:
    print('Третье сообщение:', second_question, first_question)
else:
    print('Ой!')

****************************************
# Одна IT-компания решила расшириться и взяла под своё крыло ещё три таких же, но поменьше.
# Конечно же, все выполненные и невыполненные задачи этих компаний перетекли в основную компанию.
# Даны четыре списка компаний, в которых для каждой задачи написано, выполнена (1) она или нет (0):
#
# main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
# first_company = [0, 0, 0]
# second_company = [1, 0, 0, 1, 1]
# third_company = [1, 1, 1, 0, 1]
#
# Напишите программу, которая расширяет список main элементами остальных списков, выведите итоговый список, а также выведите количество невыполненных задач.

main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
first_company = [0, 0, 0]
second_company = [1, 0, 0, 1, 1]
third_company = [1, 1, 1, 0, 1]

main.extend(first_company)
main.extend(second_company)
main.extend(third_company)

print('Общий список задач:', main)
print('Кол-во невыполненных задач:', main.count(0))

****************************************
# В маленьком зоопарке каждое животное сидит в отдельной клетке, всего этих животных четверо: лев, кенгуру, слон и обезьяна.
# В базе данных они хранятся в виде вот такого списка:
#
# zoo = ['lion', 'kangaroo', 'elephant', 'monkey']
#
# Сегодня в зоопарк завезли медведя (bear) и посадили его между львом и кенгуру.В итоге животных стало пять.
# А через неделю слона перевезли в другое место и в списке снова стало четверо животных.
# Реализуйте эти действия в коде программы и выведите в консоль итоговый список животных, а также покажите,
# в какой клетке сидят лев и обезьяна. Для этого используйте методы списков.
#
# Результат работы программы:
# # Зоопарк: ['lion', 'bear', 'kangaroo', 'monkey']
# # Лев сидит в клетке номер 1
# Обезьяна сидит в клетке номер 4

zoo = ['lion', 'kangaroo', 'elephant', 'monkey']

zoo.insert(1, 'bear')
zoo.remove('elephant')

print('Зоопарк:', zoo)
print('Лев сидит в клетке номер', zoo.index('lion') + 1)
print('Обезьяна сидит в клетке номер', zoo.index('monkey') + 1)

****************************************
# Мы поддерживаем свой киносайт и хотим сделать так, чтобы пользователи после регистрации могли создать
# собственный рейтинг фильмов из тех, которые есть на сайте.

def chek_film(film, films):
    for i_film in films:
        if i_film == film:
            return True
    else:
        return False


films = [
    'Крепкий орешек', 'Назад в будущее', 'Таксист',
    'Леон', 'Богемская рапсодия', 'Город грехов',
    'Мементо', 'Отступники', 'Деревня',
    'Проклятый остров', 'Начало', 'Матрица', 'Не грози южному централу'
]
user_films = []

while True:
    print('Ваш текущий топ фильмов:', user_films)
    print('\nНазвание фильма: ', end='')
    film = input()
    if chek_film(film, films):
        print('Команды: добавить, вставить, удалить')
        user_comand = input('Введите команду: ')
        if user_comand == 'добавить':
            if chek_film(film, user_films):
                print('Этот фильм уже есть в вашем списке.')
            else:
                user_films.append(film)
        if user_comand == 'вставить':
            if chek_film(film, user_films):
                print('Этот фильм уже есть в вашем списке.')
            else:
                user_index = int(input('На какое место: '))
                user_films.insert(user_index - 1, film)
        if user_comand == 'удалить':
            user_films.remove(film)
        else:
            print('Вы ввели неверную команду!')
    else:
        print('Такого фильма на сайте нет')

****************************************
# В небольшой фруктовой лавке у каждого фрукта есть название и цена. Эта информация хранится в одном большом списке, вот так:
#
# goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]
#
# Недавно в лавку привезли новый fruit_name по цене price, а после этого случилось ужасное:
# повысили налоги. А значит, повысились и цены на фрукты, на целых 8%!
#
# Реализуйте код, который добавляет в список goods ещё один список с новым фруктом и ценой (это запрашивается у пользователя),
# а затем увеличивает цены всех фруктов на 8%.

goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]

fruit_name = input('Новый фрукт: ')
price = int(input('Цена: '))

goods.append([fruit_name, price])
print('Новый ассортимент:', goods)

for good in goods:
    good[1] = round(good[1] * 1.08, 2)

print('Новый ассортимент с увеличенной ценой:', goods)



****************************************
# Дан вот такой список со списками:
# matrix = [[1, 2 ,3], [4, 5, 6], [7, 8, 9]]
# Реализуйте программу, которая выводит элементы этого списка в виде привычной нам матрицы.
#
# Результат работы программы:
#
# 1 2 3
# 4 5 6
# 7 8 9

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
for i in matrix:
    for num in i:
        print(num, end=' ')
    print()

****************************************
# В олимпиаде по программированию участвует N человек, в списке участников они обозначаются под номерами 1, 2, 3, 4
# и так далее до N.Эти участники поделены на команды по  K человек. Напишите программу, которая принимает
# на вход количество участников и количество человек в каждой команде, затем генерирует список таких команд и
# выводит его на экран.
# Обеспечьте контроль ввода: в каждой команде должно быть ровно по K человек.
#
# Пример 1:
# Кол - во участников: 12
# Кол - во человек в команде: 4
#
# Общий список команд: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
#
# Пример 2:
# Кол - во участников: 12
# Кол - во человек в команде: 5
#
# 12 участников невозможно поделить на команды по 5 человек!

all_members = int(input('Кол-во участников: '))
team_members = int(input('Кол-во человек в команде: '))
team_list = []
teams = all_members % team_members

if teams == 0:
    flag = True
else:
    print(all_members, 'участников невозможно поделить на команды по', team_members, 'человек!')


if flag:
    num = 1
    for _ in range(all_members // team_members):
        team_list.append(list(range(num, team_members + num)))
        num += team_members
    print('Общий список команд: ', team_list)

****************************************
# При работе с сервером мы кодируем сообщение и отправляем его в виде пакетов информации.
# Их количество равно N. Допустим, каждый пакет содержит четыре числа, каждое из которых равно нулю или единице.
# Эти числа называются битами. Иногда в кодировке сообщения встречаются ошибки, и в пакете эта ошибка обозначается числом -1.
# Если таких ошибок не больше одной, то этот пакет мы целиком добавляем в список для декодирования, а иначе отбрасываем.
#
# Напишите программу, которая будет обрабатывать полученные пакеты и выведет на экран итоговое сообщение для декодирования,
# а также количество ошибок в нём и количество необработанных пакетов.

all_packets = int(input('Количество пакетов: '))

packets_list = []
lost_packets = 0
for packet in range(all_packets):
    temp = []
    print('\nПакет номер', packet + 1)
    for byte in range(4):
        print(byte + 1, 'бит: ', end='')
        byte_input = int(input())
        temp.append(byte_input)
    if temp.count(-1) <= 1:
        packets_list.extend(temp)
    else:
        print('Много ошибок в пакете!')
        lost_packets += 1

print('Полученное сообщение:', packets_list)
print('Количество ошибок в сообщении:', packets_list.count(-1))
print('Количество потерянных пакетов:', lost_packets)

****************************************
# В одной компании наступили «тёмные времена», и сотрудников стали сокращать.
# Зарплаты сотрудников хранятся в списке из N этих самых зарплат.
# Зарплаты уже уволенных сотрудников обозначаются в списке числом 0.
#
# Напишите программу, которая запрашивает у пользователя количество сотрудников и их зарплаты,
# затем удаляет все элементы списка со значением 0 и выводит в консоль, сколько сотрудников осталось, а также их зарплаты.
# Дополнительный список использовать нельзя.

workers = int(input('Количество сотрудников: '))
salary_list = []

for worker in range(1, workers + 1):
    print('Зарплата', worker, 'сотрудника: ', end='')
    salary = int(input())
    salary_list.append(salary)

salary_list.remove(0)
print('Осталось сотрудников:', len(salary_list), '\nЗарплаты:', salary_list)
print('Максимальная зарплата:', max(salary_list))
print('Минимальная зарплата:', min(salary_list))

****************************************
nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]],
             [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

result = [j for i_num in range(len(nice_list))
              for i in range(len(nice_list[i_num]))
              for j in nice_list[i_num][i]]

print('Ответ:', result)

****************************************
# Нашему другу заказали написать программу, которая анализирует цены на бирже.
# Она получает этот пакет данных, но делать что-либо с ним нельзя.
# Для нормальной работы аналитической программы берётся новый список, который равен тому, что пришло.
# Затем идёт работа с новым списком: если есть отрицательные цены, то программа их зануляет и в конце выводит на экран,
# сколько денег мы по итогу потеряли. Получился вот такой код:
#
# original_prices = [-12, 3, 5, -2, 1]
# new_prices = original_prices
# for i in range(len(original_prices)):
#     if new_prices[i] < 0:
#         new_prices[i] = 0
#
# print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))
#
# Однако при таких входных данных программа почему-то работает неправильно: она выводит ответ 0, когда правильный ответ 14.
# Помогите другу исправить программу, а также сделайте так, чтобы список цен генерировался случайно (диапазон можно выбрать любой).

import random

original_prices = [random.randint(-5, 5) for _ in range(random.randint(1, 10))]
# original_prices = [-12, 3, 5, -2, 1]

new_prices = original_prices[:]
for i in range(len(original_prices)):
    if new_prices[i] < 0:
        new_prices[i] = 0

print('Оригинальные цены', original_prices)
print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))

****************************************
# вытащить вложенные списки в один общий список

nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

# списковая сборка:
output = [j for each_list in nice_list for each_list2 in each_list for j in each_list2]

# обычный цикл:
# for i_num in range(len(nice_list)):
#     for i in range(len(nice_list[i_num])):
#         for j in nice_list[i_num][i]:
#             nice_list3.append(j)


print('Итог:', output)


****************************************
# Задача 1. Гласные буквы
# Что нужно сделать
#
# Команде лингвистов понравилось качество ваших программ, и они решили заказать у вас функцию для анализатора текста,
# которая создавала бы список гласных букв текста, а заодно считала бы их количество.
# Напишите программу, которая запрашивает у пользователя текст и генерирует список из гласных букв этого текста
# (сама строка вводится на русском языке). Выведите в консоль сам список и его длину.
#
# Пример:
# Введите текст: Нужно отнести кольцо в Мордор!
#
# Список гласных букв: ['у', 'о', 'о', 'е', 'и', 'о', 'о', 'о', 'о']
# Длина списка: 9

def vowels(words):
    words_list = ['а', 'у', 'о', 'ы', 'и', 'э', 'я', 'ю', 'ё', 'е', 'А', 'У', 'О', 'Ы', 'И', 'Э', 'Я', 'Ю', 'Ё', 'Е']
    result = [i_words for i_words in words if i_words in words_list] #  символ для символа в тексте (words) если
                                                                     # символ встречается в списке (words_list) то добавить в список result
    return result


words = [word for word in input('Введите текст: ')]
print(vowels(words))

****************************************
# Пользователь вводит целое число N. Напишите программу, которая генерирует список из N чисел,
# на чётных местах в нём стоят единицы, а на нечётных — числа, равные остатку от деления своего номера на 5.
#
# Пример:
# Введите длину списка: 10
# Результат: [1, 1, 1, 3, 1, 0, 1, 2, 1, 4]
# numbers = [1 if num % 2 == 0 else num % 5 for num in range(len_numbers)]
#  если индекс числа четный, то равен 1, иначе индекс числа % 5 в длине списка 1, 10

len_numbers = int(input('Введите длину списка: '))
numbers = [1 if num % 2 == 0
           else num % 5
           for num in range(len_numbers)]

print(numbers)

****************************************
# Пользователь вводит числа A и B. Напишите программу, которая генерирует два списка:
# в первом лежат кубы чисел в диапазоне от А до В, во втором — квадраты чисел в этом же диапазоне.
# Выведите списки на экран. Для генерации используйте list comprehensions (как и в следующих задачах).
#
# Пример:
#
# Левая граница: 5
# Правая граница: 10
#
# Список кубов чисел в диапазоне от 5 до 10: [125, 216, 343, 512, 729, 1000]
# Список квадратов чисел в диапазоне от 5 до 10: [25, 36, 49, 64, 81, 100]

start = int(input('Левая граница: '))
stop = int(input('Правая граница: '))

cube_list = [x ** 3 for x in range(start, stop + 1)]
square_list = [x ** 2 for x in range(start, stop + 1)]

print('Список кубов чисел в диапазоне от', start, 'до', stop, cube_list)
print('Список квадратов чисел в диапазоне от', start, 'до', stop, square_list)

****************************************
# У нас есть вот такой список цен на некоторые товары из магазина:
# original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
#
# В этом списке также хранятся цены на товары, которые уже давно не продаются.
# По какой-то причине система, вместо того чтобы их занулить, просто приписала к ним минус. Нам нужно это исправить.
# Напишите программу, которая генерирует новый список из первого списка, заменяя все отрицательные числа на ноль.
#
# Результат:
# [1.25, 0, 10.22, 3.78, 0, 1.16]

original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]

new_prices = [(i_num if i_num > 0 else 0)
              for i_num in original_prices]

print(new_prices)

****************************************
# как найти индекс символа из списка!

result = input('Введите строку: ')

# result = ['g', 'h', 'b', 'd', 'h', 'n', 'h']
answer = [i_words for i_words in range(len(result)) if result[i_words] == 'h']

print('Развернутая последовательность между первым и последним h:', result[max(answer) - 1:min(answer):-1])

****************************************
# Мы продолжаем пробовать себя в качестве разработчика игр. Теперь нужно написать небольшую логику поведения некоторых отрядов,
# а также их урон. Есть два отряда, в каждом по 10 монстров. В первом отряде у каждого монстра урон абсолютно случайный
# и колеблется от 50 до 80, а во втором — от 30 до 60. Оба отряда вместе напали на третий, также из 10 юнитов.
# Юнит третьего отряда погибает, если сумма урона от двух монстров больше 100.
#
# Напишите программу, которая генерирует случайные значения в первых двух списках в заданных диапазонах,
# а также генерирует список, состоящий из фраз «Погиб» или «Выжил». Выведите все списки на экран.
#
# Пример:
#
# Урон первого отряда: [77, 75, 76, 77, 76, 73, 57, 67, 76, 52]
# Урон второго отряда: [53, 51, 31, 60, 49, 37, 31, 60, 37, 47]
# Состояние третьего отряда: ['Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Выжил', 'Погиб', 'Погиб', 'Выжил']

import random

units_1 = [random.randint(50, 80) for _ in range(10)]
units_2 = [random.randint(30, 60) for _ in range(10)]
units_3_condition = [('Погиб' if units_1[i_damage] + units_2[i_damage] > 100
                      else 'Выжил')
                     for i_damage in range(10)]


print('Урон первого отряда:', units_1)
print('Урон Второго отряда:', units_2)
print('Состояние третьего отряда:', units_3_condition)
****************************************
# Дан список цен на пять товаров с точностью до копейки. Так как экономика даёт о себе знать, мы спрогнозировали,
# что через год придётся повышать цены на X процентов, а ещё через один год — ещё на Y процентов.
# Напишите программу, которая получает на вход список цен на товары (вещественные числа,
# список генерируется также с помощью list comprehensions) и выводит в одну строку общую сумму стоимости товаров за каждый год.
#
# Пример:
# Цена на товар: 1.09
# Цена на товар: 23.56
# Цена на товар: 57.84
# Цена на товар: 4.56
# Цена на товар: 6.78
# Повышение на первый год: 0
# Повышение на второй год: 10
# Сумма цен за каждый год: 93.83 93.83 103.22

def get_percent_price(percent, price):
    return round(price * (1 + percent / 100), 2)


price_now = [float(input('Цена на товар:')) for _ in range(5)]

first_percent = int(input('Повышение на первый год: '))
second_percent = int(input('Повышение на второй год: '))

price_first = [get_percent_price(first_percent, i_price) for i_price in price_now]
price_second = [get_percent_price(second_percent, i_price) for i_price in price_first]

print('Сумма цен за каждый год:', round(sum(price_now), 2), round(sum(price_first), 2), round(sum(price_second), 2))

****************************************
# улучшение кода

def is_palindrome(num_list):
    reverse_list = num_list[::-1]
    if num_list == reverse_list:
        return True
    else:
        return False

total_num = int(input('Кол-во чисел: '))
number_list = []
answer = []

for num in range(total_num):
    num = int(input('Число: '))
    number_list.append(num)

for i_num in range(0, len(number_list)):
    if is_palindrome(number_list[i_num:len(number_list)]):
        answer = number_list[:i_num]
        answer.reverse()
        print('Последовательность:', number_list)
        if len(answer) == 0:
            print('Уже является палиндромом!')
            break
        print('Нужно приписать чисел:', len(answer))
        print('Сами числа:', answer)
        break

****************************************
# Илья решил безобидно подшутить над другом и написал программу для смартфона,
# которая при отправке сообщения удваивает каждый символ строки и заодно к каждому удвоенному добавляет ещё один дополнительный.
#
# Пользователь вводит строку и дополнительный символ. Напишите программу, которая генерирует два списка:
# в первом списке каждый элемент — удвоенная буква первой строки, во втором списке каждый элемент —
# конкатенация элемента первого списка и дополнительного символа.
#
# Пример:
# Введите строку: привет
# Введите дополнительный символ: !
#
# Список удвоенных символов: ['пп', 'рр', 'ии', 'вв', 'ее', 'тт']
# Склейка с дополнительным символом: ['пп!', 'рр!', 'ии!', 'вв!', 'ее!', 'тт!']

user_input = input('Введите строку: ')
new_symb = input('Введите дополнительный символ: ')

user_list = [x * 2 for x in user_input]
new_user_list = [x + new_symb for x in user_list]

print('Список удвоенных символов:', user_list)
print('Склейка с дополнительным символом:', new_user_list)

****************************************
# user_list = [int(input('Введи число: ')) for _ in range(2)]

start = int(input('Левая граница: '))
stop = int(input('Правая граница: '))

result = [i_num for i_num in range(start, stop + 1) if i_num % 2 == 0]

print(result)

****************************************
# Дан список чисел:
# nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]
#
# Напишите программу, которая выводит на экран шесть ответов:
# В первой строке выведите первые пять элементов списка.
# Во второй строке выведите весь список, кроме последних двух элементов.
# В третьей строке выведите все элементы с чётными индексами.
# В четвёртой строке выведите все элементы с нечётными индексами.
# В пятой строке выведите все элементы в обратном порядке.
# В шестой строке выведите все элементы списка через один в обратном порядке, начиная с последнего.
# Для решения используйте только срезы (и без функции len).
#
# Результат:
# [48, -10, 9, 38, 17]
# [48, -10, 9, 38, 17, 50, -5, 43]
# [48, 9, 17, -5, 46]
# [-10, 38, 50, 43, 12]
# [12, 46, 43, -5, 50, 17, 38, 9, -10, 48]
# [12, 43, 50, 38, -10]

nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]

print('Исходный список:', nums, '\n')
print('Первые пять элементов списка:', nums[:5])
print('Список без последних двух элементов:', nums[0:8])
print('Элементы с четными индексами', nums[::2])
print('Элементы с нечетными индексами', nums[1::2])
print('Элементы в обратном порядке:', nums[::-1])
print('Элементы в обратном порядке через один:', nums[::-2])

****************************************
# Дан список из N чисел, а также числа А и В (можно сгенерировать случайно, при этом А < B).
# Напишите программу, которая удаляет элементы списка с индексами от А до В.
# Не используйте дополнительные переменные и методы списков.

import random

numbers = [random.randint(1, 10) for _ in range(random.randint(5, 10))]
a = random.randint(0, len(numbers) - 2)
b = random.randint(a + 1, len(numbers) - 1)

print('Список', numbers, 'Удаляем элементы с индексами от', a, 'до', b)
numbers[a:b + 1] = []

print(numbers)

****************************************
def caesar_cipher(string, shift):
    char_list = [(alphabet[(alphabet.index(sym) + shift) % 33] if sym != ' ' else ' ') for sym in string]
    new_str = ''
    for i_char in char_list:
        new_str += i_char
    return new_str


alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
user_list = input('Введите сообщение: ')
shift = int(input('Введите сдвиг: '))

result = caesar_cipher(user_list, shift)
print('Зашифрованное сообщение:', result)

****************************************
# Задача 1. Заказ
# После того, как человек сделал заказ в интернет-магазине, ему на почту приходит оповещение с его именем и номером заказа.
# Напишите программу, которая получает на вход имя и код заказа, а затем выводит на экран соответствующее сообщение.
# Для решения используйте строковый метод format.
#
# Пример:
# Имя: Иван
# Номер заказа: 10948
#
# Здравствуйте, Иван! Ваш номер заказа: 10948. Приятного дня!

user_name = input('Имя клиента: ')
order_number = int(input('Номер заказа: '))

print('Здравствуйте, {name}! Ваш номер заказа: {order}. Приятного дня!'.format(name=user_name, order=order_number))
# или
print('Здравствуйте, {0}! Ваш номер заказа: {1}. Приятного дня!'.format(user_name, order_number))

****************************************
# Задача 1. Улучшенная лингвистика 2
# Усовершенствуйте старую программу:
# У нас есть список из трёх слов, которые вводит пользователь. Затем вводится сам текст произведения,
# который вводится уже в одну строку. Напишите программу, которая посчитает,
# сколько раз слова пользователя встречаются в тексте.

# count = [0, 0, 0]
# user_input = input('Введите три слова через пробел: ')
# user_words = user_input.split()
# words = input('Введите текст произведения: ')
# words_list = words.split()
#
# for index in range(3):
#     for word in words_list:
#         if user_words[index] == word:
#             count[index] += 1
#
# print('Подсчет слов в тексте:\n')
# for i in range(3):
#     print(user_words[i], ':', count[i])

# как надо было сделать
words = [input("Введите слово: ") for _ in range(3)]
text = input("Введите текст: ")
words_count = [text.count(word) for word in words]

print(words_count)

****************************************
# Задача 1. Шифр Цезаря 2
# Мы уже писали программу, которая шифрует строку с помощью шифра Цезаря.
# Напомним, что в таком способе шифрования каждая буква заменяется на следующую по алфавиту через K позиций по кругу.
# Напишите (модифицируйте) программу, которая реализует этот алгоритм шифрования. Не используйте конкатенацию и сделайте так,
# чтобы текст был в одном регистре.

def caesar_cipher(string, shift):
    char_list = [(alphabet[(alphabet.index(sym) + shift) % 33] if sym != ' ' else ' ') for sym in string]
    new_str = ''.join(char_list)
    return new_str


alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
user_list = input('Введите сообщение: ').lower()
shift = int(input('Введите сдвиг: '))

result = caesar_cipher(user_list, shift)
print('Зашифрованное сообщение:', result)


# print(ord("а"), ord("я"), ord("ё"), chr(1104))
#
# text = input("Введите текст: ")
# delta = int(input("Введите сдвиг: "))
# alphabet = [chr(index) for index in range(ord("а"), ord("я") + 1)]  # заполняем список буквами алфавита
# # Думаем над структурой алгоритма: [вариант_1 если условие_1 иначе вариант_2 for буква in текст]
# new_text = [alphabet[(alphabet.index(letter) + delta) % len(alphabet)] if letter in alphabet else letter for letter in text.lower()]
# print(''.join(new_text))

****************************************
# Задача 2. Бабушка
# У одной бабушки, когда та переписывается с внуком, постоянно залипает кнопка пробела.
# В итоге между словами получаются огромные расстояния. Внук не знает как это поправить в самом телефоне, поэтому обратился к вам за помощью.
#
# Пользователь вводит строку. Напишите программу, которая преобразовывает в этой строке все идущие подряд пробелы в один и выводит результат на экран.

grandma_input = input('Введите текст: ').split()

result = ' '.join(grandma_input)
print(result)

****************************************
# Задача 2. Долги
# Один наш друг занял у нас определённую сумму денег и всё никак не может их вернуть.
# А деньги нам нужны. Поэтому мы решили написать небольшой скрипт-напоминалку, который, возможно, разбудит его совесть.
#
# Напишите программу, которая получает на вход имя и долг, а затем выводит на экран сообщение,
# где имя повторяется несколько раз (и долг, возможно, тоже). Используйте числа в названиях ключей.
#
# Пример:
# Введите имя: Том
# Введите долг: 100
# Том! Том, привет! Как дела, Том? Где мои 100 рублей? Том!


user_name = input('Введите имя: ')
user_debt = int(input('Введите долг: '))

print('{0}! {0}, привет! Как дела, {0}? Где мои бабки, '
      '{0}? Когда вернешь {1} рублей, пёс?'.format(user_name, user_debt))

****************************************
# Задача 2. Путь к файлу
# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта
# часто используются абсолютные пути файлов, которые необходимо проверять.
# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные: диск и расширение файла.
# Напишите программу, которая проверяет корректность этого пути.
#
# Пример:
# Путь к файлу: C:/user/docs/folder/new_file.txt
# На каком диске должен лежать файл: C
# Требуемое расширение файла: .txt
# Путь корректен!

path = 'C:/user/docs/folder/new_file.txt'
print('Путь к файлу:', path)
disk_name = input('На каком диске должен лежать файл: ')
file_name = input('Требуемое расширение файла: ')



if not path.endswith(file_name):
    print('Ошибка расширения файла!')
elif not path.startswith(disk_name):
    print('Ошибка. Не верно указан диск!')
else:
    print('Путь корректен!')

****************************************
# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта часто используются
# абсолютные пути файлов, которые необходимо проверять.
# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные:
# диск и расширение файла. Напишите программу, которая проверяет корректность этого пути.
#
# Пример:
# Путь к файлу: C:/user/docs/folder/new_file.txt
# На каком диске должен лежать файл: C
# Требуемое расширение файла: .txt
# Путь корректен!

user_name = input('Введите имя пользователя: ')
file_name = input('Введите имя файла: ')

path = 'C:/{user}/docs/folder/{new_file}'.format(
    user=user_name,
    new_file=file_name
)

if not path.endswith('.txt'):
    print('Ошибка расширения файла!')
elif not path.startswith('C:/'):
    print('Ошибка. Не верно указан диск!')
else:
    print('Путь к файлу:', path)

****************************************
# Задача 3. IP-адрес
# IP-адрес компьютера состоит из 4 чисел, разделённых точкой. Каждое число находится в диапазоне от 0 до 255 (включительно).
#
# Пример правильного адреса: 192.168.1.0
# Пример неправильного адреса: 192.168.300.0
#
# Напишите программу, которая получает на вход 4 числа и выводит на экран IP-адрес.
# Используйте переменную ip_address в качестве шаблона. Обеспечьте контроль ввода.

# for num in range(4):
#     ip_address = ''
#     print('Ведите число: ')
#     num1 = int(input())
#     if num1 > 255:
#         print('Число не может быть больше "255"')
#         num = int(input())
#
#     num += 1
# print(ip_address)

ip_address = '{0}.{1}.{2}.{3}'
count = 0
numbers = []
while count < 4:
    new_number = int(input('Введите число:'))
    if 0 < new_number <= 255:
        numbers.append(new_number)
        count += 1
    else:
        print('Ошибка ввода! Цифра не может быть больше "255"')

print(ip_address.format(numbers[0], numbers[1], numbers[2], numbers[3]))

****************************************
# Задача 3. Разделители символов
# Человек хочет сделать рассылку поздравлений для определённого списка людей. Поздравления для разных людей он хочет написать по-разному.
#
# Напишите программу, которая запрашивает у пользователя:
# Шаблон поздравления (туда вставляется ФИ и возраст)
# ФИ людей (в одну строку, разделяются запятой)
# Возраст каждого человека (в одну строку через пробел)
# В конце  программа выводит поздравления и всех именинников в одну строку вместе с их возрастом.
#
# Пример:
# Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: С днём рождения, {name}! С {age}-летием тебя!
# Список людей через запятую: Иван Иванов, Петя Петров, Лена Ленова
# Возраст людей через пробел: 20 30 18
#
# С днём рождения, Иван Иванов! С 20-летием тебя!
# С днём рождения, Петя Петров! С 30-летием тебя!
# С днём рождения, Лена Ленова! С 18-летием тебя!
## Именинники: Иван Иванов 20, Петя Петров 30, Лена Ленова 18

while True:
    greetings = input('Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: ')
    if '{name}' and '{age}' in greetings:
        break
    print('Отсутствует одна или две конструкции')

guests = input('Список людей через запятую: ').split(', ')
age = input('Возраст людей через пробел: ')
age_list = age.split()

for i_man in range(len(guests)):
    print(greetings.format(name=guests[i_man], age=age_list[i_man]))

# для вывода именинников в одну строку
people = [
    ' '.join([guests[i_man], age_list[i_man]])
    for i_man in range(len(guests))
]

people_str = ', '.join(people)
print('Именинники:', people_str)

****************************************
# Дана структура, которая содержит описание одного из членов семьи (имя, фамилия, хобби, сколько лет и дети):
# family_member = {
#     "name": "Jane",
#     "surname": "Doe",
#     "hobbies": ["running", "sky diving", "singing"],
#     "age": 35,
#     "children": [
#         {
#             "name": "Alice",
#             "age": 6
#         },
#         {
#             "name": "Bob",
#             "age": 8
#         }
#     ]
# }
# # Напишите программу, которая реализует такую структуру: имя, фамилия, хобби, кол-во лет и дети.
# Затем, с помощью метода get и установки значения по умолчанию, проверьте есть ли ребёнок с именем Bob.
# Затем в отдельную переменную получите фамилию этого ребёнка и выведите её на экран. Если у него нет фамилии, то получите значение ‘Nosurname’.

family_member = {
    "name": "Jane",
    "surname": "Doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "name": "Alice",
            "age": 6
        },
        {
            "name": "Bob",
            "age": 8
        }
    ]
}


children_dict = dict()
for child in family_member['children']:
    children_dict[child['name']] = child['age']

search_bob = children_dict.get('Bob', {})
if search_bob:
    print('Bob найден')
else:
    print('Bob-a нет!')

surname = children_dict.get('surname', {})
if surname:
    print(surname)
else:
    print('Nosurname')

****************************************
a = [[1, 2, [3]], [1], 3]
l = [x for lst in a for x in lst]
print(l)
****************************************
# Напишите программу, которая считает количество знаков пунктуации в символьной строке.
# К знакам пунктуации относятся символы из набора ".,;:!?". Набор должен храниться в виде множества.
#
# Пример:
# Введите строку: Я! Есть. Грут?! Я, Грут и Есть.
# Количество знаков пунктуации: 6

text = input('Введите строку: ')
punct = set(".,;:!?")

count = 0
for i in text:
    if i in punct:
        count += 1
print('Количество знаков пунктуации:', count)
print(punct)
****************************************
# У мебельного магазина есть два склада, на которых хранятся разные категории товаров по парам «название — количество»:
#
# small_storage = {
#     'гвозди': 5000,
#     'шурупы': 3040,
#     'саморезы': 2000
# }
#
# big_storage = {
#     'доски': 1000,
#     'балки': 150,
#     'рейки': 600
# }
#
# Магазин решил сократить аренду и скинуть все товары в большой склад (big_storage). После этого нас попросили реализовать поиск по товарам.
# Напишите программу, которая объединяет оба словаря в один (в big_storage), затем запрашивает у пользователя название товара и выводит
# на экран его количество. Если такого товара нет, то выводит об этом ошибку. Для получения значения используйте метод get.

small_storage = {
    'гвозди': 5000,
    'шурупы': 3040,
    'саморезы': 2000
}

big_storage = {
    'доски': 1000,
    'балки': 150,
    'рейки': 600
}

big_storage.update(small_storage)

while True:
    input_item = input('Введите название товара: ')
    for item in big_storage.keys():
        if item == input_item:
            print('Количество товара', item, '-', big_storage.get(item))
            break
    else:
        print('Ошибка! Такого товара в базе нет!')


# решение от курса:
# big_storage.update(small_storage)
#
# user_item = input("Введите название нужного товара: ")
# if big_storage.get(user_item, None):
#     print(big_storage[user_item])
# else:
#     print("Такого товара нет!")

****************************************
# На вход программе поступает целое число num. Напишите программу создания словаря,
# который включает в себя ключи от 1 до num, а значениями соответствующего ключа будет значение ключа в квадрате.
#
# Пример:
# Введите целое число: 5
#
# Результат: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

num = int(input('Введите целое число: '))

num_dict = dict()

for numb in range(1, num + 1):
    num_dict[numb] = numb ** 2

print(num_dict)

****************************************
# Дана структура, которая содержит описание одного из членов семьи (имя, фамилия, хобби, сколько лет и дети):
# family_member = {
#     "name": "Jane",
#     "surname": "Doe",
#     "hobbies": ["running", "sky diving", "singing"],
#     "age": 35,
#     "children": [
#         {
#             "name": "Alice",
#             "age": 6
#         },
#         {
#             "name": "Bob",
#             "age": 8
#         }
#     ]
# }
# # Напишите программу, которая реализует такую структуру: имя, фамилия, хобби, кол-во лет и дети.
# Затем, с помощью метода get и установки значения по умолчанию, проверьте есть ли ребёнок с именем Bob.
# Затем в отдельную переменную получите фамилию этого ребёнка и выведите её на экран. Если у него нет фамилии, то получите значение ‘Nosurname’.

family_member = {
    "name": "Jane",
    "surname": "Doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "name": "Alice",
            "age": 6
        },
        {
            "name": "Bob",
            "age": 8
        }
    ]
}


children_dict = dict()
for child in family_member['children']:
    children_dict[child['name']] = child['age']

search_bob = children_dict.get('Bob', {})
if search_bob:
    print('Bob найден')
else:
    print('Bob-a нет!')

surname = children_dict.get('surname', {})
if surname:
    print(surname)
else:
    print('Nosurname')

****************************************
# Есть готовый словарь игроков, у каждого игрока есть имя, команда, в которой он играет, а также его текущий статус,
# в котором указано, отдыхает он, тренируется или путешествует:
#
# players_dict = {
#     1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
#     2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
#     3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
#     4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
#     5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
#     6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
#     7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
#     8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
# }
#
# Напишите программу, которая выводит на экран вот такие данные в разных строчках:
# Все члены команды из команды А, которые отдыхают.
# Все члены команды из группы B, которые тренируются.
# Все члены команды из команды C, которые путешествуют.

players_dict = {
    1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
    2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
    3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
    4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
    5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
    6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
    7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
    8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
}

rest_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'A' and player['status'] == 'Rest'
]

traning_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'B' and player['status'] == 'Training'
]

travel_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'C' and player['status'] == 'Travel'
]

print(rest_players)
print(traning_players)
print(travel_players)

****************************************
# Мы работаем в одной небольшой торговой компании, где все данные о продажах фруктов за год сохранены в словаре в виде пар «название фрукта — доход»:
#
# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'grapefruit': 300.40,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,
# }
#
# В компании наступил небольшой кризис, и нам поручено провести небольшой анализ дохода.
# Напишите программу, которая находит общий доход, затем выводит фрукт с минимальным доходом и удаляет его из словаря. Выведите итоговый словарь на экран.
# Результат работы программы:
# Общий доход за год составил 35419.34 рублей
# Самый маленький доход у grapefruit. Он составляет 300.4 рублей
# Итоговый словарь: {'apple': 5600.2, 'orange': 3500.45, 'banana': 5000.0, 'bergamot': 3700.56, 'durian': 5987.23, 'peach': 10000.5, 'pear': 1020.0, 'persimmon': 310.0}

incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'grapefruit': 300.40,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00,
}

min_value = min(incomes.values())
min_key = ''
for val in incomes:
    if incomes[val] == min_value:
        min_key = val

print('Оющий доход за год составил', sum(incomes.values()), 'рублей')
incomes.pop(min_key)
print('Самый маленький доход у', min_key, '. Он составляет', min_value, 'рублей')
print('Итоговый словарь:', incomes)

****************************************
# На одном семинаре по теории множеств нужно показать наглядный пример, как эти множества работают. Для начала было сгенерировано два набора чисел:
# nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
# nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]
#
# Вас попросили написать программу, которая будет наглядно демонстрировать работу со множествами с помощью этих чисел.
# Напишите программу, которая преобразует списки во множества и убирает повторяющиеся элементы.
# Затем удаляет минимальный элемент из каждого множества и добавляет туда случайное число в диапазоне от 100 до 200. Затем выполните следующие действия со множествами:
#
# Вывести все элементы множеств (объединение).
# Вывести только общие элементы (пересечение).
# Вывести элементы, входящие в nums_2, но не входящие в nums_1.
#
# Пример результата:
# 1-е множество: {1, 2, 3, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 26, 27, 29}
# 2-е множество: {1, 5, 7, 8, 9, 11, 12, 13, 15, 16, 19, 21, 22, 23, 24, 29, 30}
#
# Минимальный элемент 1-го множества: 1
# Минимальный элемент 2-го множества: 1
#
# Случайное число для 1-го множества: 126
# Случайное число для 2-го множества: 169
#
# Объединение множеств: {2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 169, 126}
# Пересечение множеств: {7, 8, 11, 12, 13, 15, 16, 19, 21, 22, 24, 29}
# Элементы, входящие в nums_2, но не входящие в nums_1: {5, 9, 169, 23, 30}
import random

nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]

nums_1 = set(nums_1)
nums_2 = set(nums_2)
min_nums_1 = min(nums_1)
min_nums_2 = min(nums_2)
random_min_nums_1 = random.randint(100, 200)
random_min_nums_2 = random.randint(100, 200)

print('Первое множество:', nums_1)
print('Второе множество:', nums_2)
print()
print('Минимальный элемент 1-го множества:', min_nums_1)
print('Минимальный элемент 2-го множества:', min_nums_2)
print()
print('Случайное число для 1-го множества:', random_min_nums_1)
print('Случайное число для 2го множества:', random_min_nums_2)

nums_1.remove(min_nums_1)
nums_2.remove(min_nums_2)
nums_1.add(random_min_nums_1)
nums_2.add(random_min_nums_2)
print('Объединение множеств:', nums_1 | nums_2)
print('Пересечение множеств:', nums_1 & nums_2)
print('Элементы, входящие в nums_2, но не входящие в nums_1:', nums_2 - nums_1)

****************************************
# Пользователь вводит фамилию, имя студента, город проживания, вуз, в котором он учится, и все его оценки.
# Всё вводится в одну строку через пробел. Напишите программу, которая по этой информации составит словарь и выведет его на экран.
#
# Пример:
# Введите информацию о студенте через пробел (имя, фамилия, город, место учёбы, оценки): Илья Иванов Москва МГУ 5 4 4 4 5
#
# Результат:
# Имя - Илья
# Фамилия - Иванов
# Город - Москва
# Место учёбы - МГУ
# Оценки - [5, 4, 4, 4, 5]

student = input(
    'Введите информацию о студенте через пробел\n'
    '(имя, фамилия, город, место учебы, оценки): '
)

student_list = student.split()

student_dict = dict()

for i_list in student_list:
    student_dict['Имя'] = student_list[0]
    student_dict['Фамилия'] = student_list[1]
    student_dict['Город'] = student_list[2]
    student_dict['Место учебы'] = student_list[3]
    student_dict['Оценки'] = []
for i_grade in student_list[4:]:
    student_dict['Оценки'].append(int(i_grade))

for i_info in student_dict:
    print(i_info, '-', student_dict[i_info])

****************************************
# Лингвистам нужно собрать данные о частоте букв в тексте, исходя из этих данных будет строиться гистограмма частоты букв.
# Напишите программу, которая получает сам текст и считает, сколько раз в строке встречается каждый символ.
# На экран нужно вывести содержимое в виде таблицы, отсортированное по алфавиту, а также максимальное значение частоты.
#
# Пример:
# Введите текст: Здесь что-то написано
#   : 2
# - : 1
# З : 1
# а : 2
# д : 1
# е : 1
# и : 1
# н : 2
# о : 3
# п : 1
# с : 2
# т : 2
# ч : 1
# ь : 1
# Максимальная частота: 3

def histograme(string):
    text_dict = dict()
    for symbol in string:
        if symbol in text_dict.keys():
            text_dict[symbol] += 1
        else:
            text_dict[symbol] = 1

    return text_dict


text = input('Введите текст: ').lower()
hist = histograme(text)

for key in sorted(hist.keys()):
    print(key, ':', hist[key])

print('Максимальная частота', max(hist.values()))  # метод


****************************************
# Энтузиаст Степан, купив новый телефон, решил написать для него свою собственную операционную систему.
# И, конечно же, первое, что он захотел в ней реализовать, — это телефонная книга.
#
# Напишите программу, которая запрашивает у пользователя имя контакта и номер телефона, добавляет их в словарь и выводит
# на экран текущий словарь контактов. Запрос на добавление идёт бесконечно (но можно задать своё условие для завершения программы).
# Обеспечьте контроль ввода: если это имя уже есть в словаре, то выведите соответствующее сообщение.
#
# Пример:
# Текущие контакты на телефоне:
# <Пусто>
#
# Введите имя: Иван
# Введите номер телефона: 100200300
# # Текущие контакты на телефоне:
# Иван  100200300
#
# Введите имя: Лена
# Введите номер телефона: 8005555522
# # Текущие контакты на телефоне:
# Иван  100200300
# Лена  8005555522
#
# Введите имя: Иван
# Ошибка: такое имя уже существует.
# ...


contacts_dict = {}

while True:
    print('Текущие контакты на телефоне:')
    for i_cont in contacts_dict:
        print(i_cont, contacts_dict[i_cont])
    input_name = input('\nВведите имя: ')
    if input_name in contacts_dict:
        print('Ошибка: такое имя уже существует.')
    else:
        input_number = int(input('Введите номер телефона: '))
        contacts_dict[input_name] = input_number


****************************************
# Напишите программу, которая находит все различные цифры в символьной строке.
# Для решения используйте множество (цифры будут различные, и поиск во множестве намного быстрее, чем в списке).
# Подсказка: можно использовать вот такое сравнение '0'<=x<='9'
#
# Пример:
# Введите строку: ab1n32kz2
# Различные цифры строки: 123

user_input = set(input('Введите строку: '))
numbers = set()

for symb in user_input:
    if '0'<= symb <='9':
        numbers.add(symb)

print(''.join(numbers))

****************************************
# Заполните один кортеж десятью случайными целыми числами от 0 до 5 включительно.
# Также заполните второй кортеж числами от −5 до 0. Объедините два кортежа, создав тем самым третий кортеж.
# С помощью метода кортежа определите в нём количество нулей. Выведите на экран третий кортеж и количество нулей в нём.
words = ('нулей', 'ноль', 'нуля', 'нуля', 'нуля', 'нулей', 'нулей', 'нулей', 'нулей', 'нулей', 'нулей')

import random

numbers = (0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5)
negative_numbers = (-5, -4, -3, -2, -1, 0, -5, -4, -3, -2, -1, 0,)
one_tuple = tuple(random.sample(numbers, 10))
two_tuple = tuple(random.sample(negative_numbers, 10))
result_tuple = one_tuple + two_tuple

print('Первый кортеж', one_tuple)
print('Второй кортеж', two_tuple)
print('Третий кортеж {} \nв нем: {} {}'.format(result_tuple, result_tuple.count(0), words[result_tuple.count(0)]))

****************************************
# Какой-то нехороший человек решил подпортить жизнь frontend-разработчикам и добавил в код сайта символ ~ (тильда).
# Но программисты быстро решили эту проблему, пройдясь по всему коду маленькой программой.
#
# Пользователь вводит строку. Напишите программу, которая проходит по строке и выводит в консоль индексы символа ~.
# Для решения этой задачи (и остальных тоже) используйте функцию enumerate.
#
# Пример:
# Строка: so~mec~od~e
# Ответ: 2 6 9

str_input = input('Строка:')

for i_sym, sym in enumerate(str_input):
    if sym == '~':
        print(i_sym, end=' ')

# решение с list comprehension
result = [str(i_sym) for i_sym, sym in enumerate(str_input) if sym == '~']
print(('Ответ:'), ' '.join(result))

# решение с использованием функции (выводим индекс необходимого символа)
def get_indexes(where_to_search, what_to_search):
    return [str(index) for index, letter in enumerate(where_to_search) if letter == what_to_search]

# генератор кортежа из случайных чисел
def create_random_tuple(a, b, n):
    return tuple([random.randint(a, b) for _ in range(n)])
#  first = create_random_tuple(0, 5, 10) - создать кортеж из 10 случайных чисел от 0 до 5

print(('Ответ:'), ' '.join(get_indexes(str_input, '~')))

****************************************
# Задача 1. Кризис миновал
# Закупки грейпфрутов прекратились, и кризис в торговой компании закончился. И теперь можно вернуться к обыденным делам.
# Однако внезапно вы обнаружили, что старый скрипт, который выводит данные о фруктах, куда-то потерялся.
# Необходимо его восстановить.
#
# Дан словарь с парами «название фрукта — цена»:
# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,
# }
#
# Вывести на экран словарь в следующем виде:
# apple -- 5600.2
# orange -- 3500.45
# banana -- 5000.0
# bergamot -- 3700.56
# durian -- 5987.23
# peach -- 10000.5
# pear -- 1020.0
# persimmon -- 310.0
# Не используйте обращение по ключу словаря.

incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00,
}

for i_name, i_price in incomes.items():
   print('{name} -- {price}'.format(name=i_name, price=i_price))

****************************************
# В базе данных поликлиники хранятся паспортные данные людей. Хранение реализовано с помощью словаря,
# состоящего из пар «Серия и номер паспорта — фамилия и имя». Серия и номер — составной ключ,
# а фамилия и имя — составное значение.
#
# data = {
#     (5000, 123456): ('Иванов', 'Василий'),
#     (6000, 111111): ('Иванов', 'Петр'),
#     (7000, 222222): ('Медведев', 'Алексей'),
#     (8000, 333333): ('Алексеев', 'Георгий'),
#     (9000, 444444): ('Георгиева', 'Мария')
# }
#
# Реализуйте функцию, которая по номеру и серии паспорта выдаёт имя и фамилию человека.

data = {
    (5000, 123456): ('Иванов', 'Василий'),
    (6000, 111111): ('Иванов', 'Петр'),
    (7000, 222222): ('Медведев', 'Алексей'),
    (8000, 333333): ('Алексеев', 'Георгий'),
    (9000, 444444): ('Георгиева', 'Мария')
}

serial = int(input('Введите серию: '))
number = int(input('Введите номер: '))

passport = (serial, number)

if passport in data:
    print(data[passport])
else:
    print('Такого человека нет')

****************************************
# Андрей однажды уже писал функции для расчёта площади сферы и объёма шара.
# И теперь для своей курсовой работы ему пришлось связаться с цилиндрами.
#
# Пользователь вводит два значения: радиус и высоту. Напишите функцию для расчёта площади
# боковой поверхности цилиндра и его полной площади. Функция должна возвращать два эти значения.
# После этого в основной программе выводятся оба ответа в две строки.
#
# Площадь боковой поверхности (r — радиус, h — высота):
# side = 2pi * r * h
# Полная площадь (S — площадь круга):
# full = side + 2 * S
import math

def cylinder_s (r, h):
    r_side = 2 * math.pi * r * h
    r_full = r + 2 * math.pi * r ** 2

    return r_side, r_full


radius = float(input('Введите радиус: '))
height = float(input('Введите высоту: '))

r_side, r_full = cylinder_s(radius, height)

print('Площадь боковой поверхности:', round(r_side, 2))
print('Полная площадь:', round(r_full, 2))

****************************************
# Создайте два списка, в каждом из которых лежит 10 случайных букв алфавита (могут повторяться).
# Затем для каждого списка создайте словарь из пар «индекс — значение» и выведите оба словаря на экран.
#
# Подсказка: random
#
# Пример:
# Первый список: ['й', 'р', 'с', 'г', 'а', 'а', 'т', 'ж', 'е', 'к']
# Второй список: ['д', 'а', 'а', 'в', 'т', 'ж', 'р', 'б', 'й', 'р']
#
# Первый словарь: {0: 'й', 1: 'р', 2: 'с', 3: 'г', 4: 'а', 5: 'а', 6: 'т', 7: 'ж', 8: 'е', 9: 'к'}
# Второй словарь: {0: 'д', 1: 'а', 2: 'а', 3: 'в', 4: 'т', 5: 'ж', 6: 'р', 7: 'б', 8: 'й', 9: 'р'}

import random

def random_generator (symb, how_symb):
    result = list()
    for i in range(how_symb):
        result.append(random.choice(symb))
    return result


def get_index(text):
    result = dict()
    for index, sym in enumerate(text):
        result.update({index: sym})
    return result


symb = (
    'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о',
    'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я'
)

first_list = random_generator(symb, 10)
second_list = random_generator(symb, 10)
first_tuple = get_index(first_list)
second_tuple = get_index(second_list)

print('Первый список:', first_list)
print('Второй список:', second_list)
print('\nПервый словарь:', first_tuple)
print('Второй словарь:', second_tuple)

****************************************
# Задача 2. Сервер
# У вас есть данные о сервере, которые хранятся в виде вот такого словаря:
## server_data = {
#     "server": {
#         "host": "127.0.0.1",
#         "port": "10"
#     },
#     "configuration": {
#         "access": "true",
#         "login": "Ivan",
#         "password": "qwerty"
#     }
# }
## Напишите программу, которая выводит для пользователя эти данные так же красиво и понятно, как они представлены в словаре.
# Результат работы программы:
# server:
#     host: 127.0.0.1
#     port: 10
# configuration:
#     access: true
#     login: Ivan
#     password: qwerty

server_data = {
    "server": {
        "host": "127.0.0.1",
        "port": "10"
    },
    "configuration": {
        "access": "true",
        "login": "Ivan",
        "password": "qwerty"
    }
}

for i_keys, i_values in server_data.items():
    print('{key}:'.format(key=i_keys), end='\n')
    for j_keys, j_values in i_values.items():  # вместо "server_data[i_keys].items()" можно обратится напрямую к значению
        print('\t{j_keys}: {j_values}'.format(j_keys=j_keys, j_values=j_values))


****************************************
# Мы уже реализовывали телефонную книгу для Степана, однако её проблема была в том,
# что туда нельзя было добавить людей с одинаковыми именами. Надо это исправить.
#
# Напишите программу, которая запрашивает у пользователя имя контакта, фамилию и номер телефона,
# добавляет их в словарь и выводит на экран текущий словарь контактов. Словарь состоит из пар «Ф. И. — телефон»,
# где Ф. И. — это составной ключ. Запрос на добавление идёт бесконечно
# (но можно задать своё условие для завершения программы).
# Обеспечьте контроль ввода: если этот человек уже есть в словаре, то выведите соответствующее сообщение.

def print_phonebook(data):
    print('\nТелефонная книга:')
    for user in data:
        print(f'{user[0]} {user[1]}: {data[user]}')

phonebook = dict()
while True:
    first_name = input('\nВведите фамилию ("выход" чтобы закончить): ')
    if first_name != 'выход':
        second_name = input('Введите имя: ')
        contact = (first_name, second_name)
        user_number = int(input('Введите номер телефона: '))
        if contact not in phonebook:
            phonebook.update({contact: user_number})
            print_phonebook(phonebook)
        else:
            print('Такой контакт уже есть!')
    else:
        break

# решение от курса:
# contacts = {}
#
# while True:
#     name = input("Введите имя: ")
#     surname = input("Введите фамилию: ")
#     name_n_surname = (name, surname)
#     if name_n_surname not in contacts:
#         contacts[name_n_surname] = int(input("Введите номер телефона: "))
#     else:
#         print("Такой контакт уже есть!")
#     print(contacts)

****************************************
# Дан код, в котором должно происходить следующее: изначально есть кортеж из пяти чисел.
# Затем вызывается функция, которая получает на вход кортеж чисел, генерирует случайный индекс и случайное значение,
# а затем по этим индексу и значению меняет сам кортеж. Функция должна возвращать кортеж и случайное значение.
#
# В основном коде функция используется два раза, и на экран два раза выводится новый кортеж и случайное значение.
# Причём второй раз выводится сумма первого случайного значения и второго.
## Однако код, который вам дали, оказался нерабочим. Исправьте его в соответствии с описанием.
import random

def change(nums):
    index = random.randint(0, 4)
    value = random.randint(100, 1000)
    nums = list(nums)
    nums[index] = value
    return tuple(nums), value


my_nums = (1, 2, 3, 4, 5)
my_nums, rand_val = change(my_nums)
new_nums, new_rand_val = change(my_nums)

print(my_nums, rand_val)
print(new_nums, new_rand_val + rand_val)


****************************************
# Нашему другу дали задачу: «Есть словарь, в котором ключи — это числа от 0 до 4,
# а значения ключей — числа 0, 100, 144, 20 и 19 соответственно.
# Нужно написать программу, которая выводит список тех значений, # у которых ключ делится на 2.
# Причём программа должна быть в одну строчку.» Программа у друга работает,
# но её не приняли, так как в ней не используется правило «не повторяйся» — это когда части кода не повторяются.
# Помогите другу исправить решение задачи так, чтобы код в строчке не повторялся.
#
# Решение друга:
# print([{0: 0, 1: 100, 2: 144, 3: 20, 4: 19}[i_key] for i_key in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19} if i_key % 2 == 0])
# [0, 144, 19]

print([i_value for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items() if i_key % 2 == 0])

# result = list()
# for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items():
#     if i_key % 2 == 0:
#         result.append(i_value)
# print(result)

****************************************
# Один заказчик попросил нас написать небольшой скрипт для своих криптографических нужд.
# При этом он заранее предупредил, что скрипт должен уметь работать с любым итерируемым типом данных.
# Напишите функцию, которая возвращает список из элементов итерируемого объекта
# (кортежа, строки, списка, словаря), у которых индекс чётный.
#
# Пример 1:
# Допустим, есть такая строка: 'О Дивный Новый мир!'
# Результат: ['О', 'Д', 'в', 'ы', ' ', 'о', 'ы', ' ', 'и', '!']
#
# Пример 2:
# Допустим, есть такой список: [100, 200, 300, 'буква', 0, 2, 'а']
# Результат: [100, 300, 0, 'а']
#
# Примечание: для проверки типа можно использовать функцию isinstance(<элемент>, <тип данных>),
# которая возвращает True, если элемент принадлежит к этому типу данных, и возвращает False в противном случае.

def even_index(object):
    result = [symb for index, symb in enumerate(object) if index % 2 == 0]
    return result


text_list = ['О', 'Дивный', 'Новый мир!']  # список
text_set = {'дрыхнуть', 'спать', 'кемарить', 'тусить', 'гонять'}  # множество
text_dict = {'веселиться: грустить', 'стоять: сидеть', 'моргать: зевать', 'идти: бежать'}  # словарь
text = 'О дивный новый мир'  # строка
text_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)  # кортеж


print('Такой список: ', text_list)
print('Результат: ', even_index(text_list))

print('\nТакое множество: ', text_set)
print('Результат: ', even_index(text_set))

print('\nТакой словарь: ', text_dict)
print('Результат: ', even_index(text_dict))

print('\nТакая строка: ', text)
print('Результат: ', even_index(text))

print('\nТакой кортеж: ', text_tuple)
print('Результат: ', even_index(text_tuple))




****************************************
site = {
    'html': {
        'head': {
            'title': 'Куплю/продам телефон недорого'
        },
        'body': {
            'h2': 'У нас самая низкая цена на iphone',
            'div': 'Купить',
            'p': 'продать'
        }
    }
}

# TODO здесь писать код
import copy


def display_struct(struct, spaces=1):
    for key, value in struct.items():
        if isinstance(value, dict):
            print(' ' * spaces, key)
            display_struct(value, spaces + 3)
        else:
            print('{}{} : {}'.format(' ' * spaces, key, value))


def create_site(site, total, phone=None, copy_site={}):
    if total == 0:
        return
    phone = input('Введите название продукта для нового сайта: ')
    total -= 1

    site['html']['head']['title'] = 'Куплю/продам {} недорого'.format(phone)
    site['html']['body']['h2'] = 'У нас самая низкая цена на {}'.format(phone)
    new_site = copy.deepcopy(site)
    copy_site.update({'\nСайт для {}:'.format(phone): site})
    display_struct(copy_site)
    create_site(new_site, total)
    return


total_site = int(input('Сколько сайтов: '))
create_site(site, total_site)
# задача оказалась для меня сложной, с выводом как в примере так и не справился...
****************************************
# Обычно программисты любят, когда всё просто и понятно. Но Антон не из таких.
# Он любит устраивать себе челлендж, развиваться и сразу применять на практике то, что только что узнал.
# И в этот раз он подумал реализовать подсчёт факториала без использования циклов.
#
# Напишите функцию, которая считает факториал числа с помощью рекурсии.
#
# Кстати, в Python есть ограничение на количество рекурсивных вызовов.
# Попробуйте передать своей функции, например, число 1000 и посмотрите, что будет.
def factorial(num):
    if num == 1:
        return num
    return num * factorial(num - 1)


print(factorial(5))

****************************************
# В одном проекте на 10 000 строк кода произошла критическая ошибка.
# Хорошо, что старший разработчик быстро её нашёл и исправил. Он решил проверить, смогли бы вы её исправить,
# если бы его не было на месте. Поэтому он написал для вас код с аналогичной ошибкой:

import random

def change_dict(dct):
    num = random.randint(1, 100)
    for i_key, i_value in dct.items():
        if isinstance(i_value, list):
            i_value.append(num)
        if isinstance(i_value, dict):
            i_value[num] = i_key
        if isinstance(i_value, set):
            i_value.add(num)


nums_list = [1, 2, 3]
some_dict = {1: 'text', 2: 'another text'}
uniq_nums = {1, 2, 3}
common_dict = {1: nums_list.copy(), 2: some_dict.copy(), 3: uniq_nums.copy(), 4: (10, 20, 30)}

change_dict(common_dict)
print(common_dict)
# Суть кода в том, что у вас есть общий словарь из нескольких ключей, значения которых равны ранее объявленным переменным.
# Затем вызывается функция, которая должна изменять значения словаря, добавляя к значениям случайное число,
# в зависимости от типа данных. Но при этом меняются и ранее объявленные переменные.
# Исправьте эту ошибку и убедитесь, что nums_list, some_dict и uniq_nums не меняются.
print(nums_list, some_dict, uniq_nums)

# Либо мы можем применить вспомогательную функцию, которая сделает это за нас:
import copy

common_dict = {1: nums_list, 2: some_dict, 3: uniq_nums, 4: (10, 20, 30)}
common_dict_2 = copy.deepcopy(common_dict)  # Она будет особенно полезна в структурах, в которых множество вложенных переменных
change_dict(common_dict_2)
print(common_dict_2)
print(nums_list, some_dict, uniq_nums)

****************************************
# Вы пишете небольшое приложение для работы с файлами. Реализуйте функцию, которая может принимать на вход три аргумента:
# вопрос пользователю (на который нужно ответить да или нет), сообщение о неправильном вводе и количество попыток.
# Вопрос — обязательный позиционный аргумент, остальные — со значениями по умолчанию.
# При корректном ответе функция может возвращать что угодно — например, число 1 при ответе «да» или 0 при ответе «нет».
#
# В основной программе вызовите функцию минимум три раза:
# только с вопросом, с вопросом и сообщением об ошибке, с вопросом и количеством попыток.
#
# Пример работы программы:
# Вы действительно хотите выйти? что
# Неверный ввод. Пожалуйста, введите 'да' или 'нет'.
# Осталось попыток: 3
# Вы действительно хотите выйти? да
# Удалить файл? не знаю
# Так удалить или нет?
# Осталось попыток: 3
# Удалить файл? нет
# Записать файл? ага
# Неверный ввод. Пожалуйста, введите 'да' или 'нет'.
# Осталось попыток: 1
# Записать файл? да

def func(question,
         message='Неверный ввод. Пожалуйста введите "да" или "нет".',
         count=4):
    while True:
        user_input = input(question).lower()
        if user_input == 'да':
            return 1
        if user_input == 'нет':
            return 0
        count -= 1
        if count == 0:
            print('Попытки закончились!')
            break
        print(message)
        print('Осталось попыток:', count)


print(func('Сохранить файл? '))
print(func('Удалить файл? ', 'Да или нет?'))
print(func('Удалить файл? ', message='Так удалить или нет?'))
print(func('Записать файл? ', count=2))

****************************************
# На одном из форумов, посвящённых программированию, пользователь выложил такой код
# для расчёта степени числа без использования циклов, ** и функции math.pow():

def power(num, degree):
    if degree <= 0:
        return 1
    return num * power(num, degree - 1)

float_num = float(input('Введите вещественное число: '))
int_num = int(input('Введите степень числа: '))
print(float_num, '**', int_num, '=', power(float_num, int_num))

# Другие пользователи отметили, что это решение нерабочее и в нём есть ошибки. Исправьте это решение,
# не используя циклы, возведение в степень через ** и функцию math.pow()
#
# Правильный результат:
# Введите вещественное число: 1.5
# Введите степень числа: 5
# 1.5 ** 5 = 7.59375
****************************************
# Друг никак не может понять эту тему с изменяемыми и неизменяемыми типами, ссылками, объектами и их id.
# Видя, как он мучается, вы решили помочь ему и объяснить эту тему наглядно.
# Пользователь вводит любой объект. Напишите программу, которая выводит на экран тип введённых данных,
# информацию о его изменяемости, а также id этого объекта.
#
# Пример 1:
# Введите данные: привет
#
# Тип данных: str (строка)
# Неизменяемый (immutable)
# Id объекта: 1705156583984
#
# Пример 2:
# Введите данные: {‘a’: 10, ‘b’: 20}
#
# Тип данных: dict (словарь)
# Изменяемый (mutable)
# Id объекта: 1705205308536

# if type(data) in (int, float, str, tuple, bool):
#     print('Неизменяемый (immutable)')
# elif type(data) in (str, set, dict):
#     print('Изменяемый (mutable)')

data_names_dict = {
    "<class 'str'>": "строка",
    "<class 'dict'>": "словарь",
    "<class 'list'>": "список",
    "<class 'set'>": "множество",
    "<class 'int'>": 'число',
    "<class 'bool'>": 'булево'
}

mutable_check_helper = {
    "mutable": ("словарь(dict)", "список(list)", "множество(set)"),
    "immutable": ("число(int)", "число с плавающей точкой(float)", "строка(str)", "кортеж(tuple)", "булево(bool)")
}


def check_info(data):
    type_of_data = type(data)
    name_of_data = ""
    if str(type_of_data) in data_names_dict:
        name_of_data = data_names_dict[str(type_of_data)]

    if name_of_data in mutable_check_helper["mutable"]:
        property_of_data = "Изменяемый (mutable)"
    else:
        property_of_data = "Неизменяемый (immutable)"

    print(f"Тип данных: {type_of_data} ({name_of_data})")
    print(property_of_data)
    print("Id объекта:", id(data))


data_in = True
check_info(data_in)

****************************************
# При работе со значениями по умолчанию и изменяемыми типами данных нужно знать и остерегаться ещё одной интересной штуки.
# Напишите функцию с двумя аргументами: первый — число num, позиционный аргумент;
# второй — список lst, по умолчанию он пустой.
# В теле функции в список добавляется число num и сам список выводится на экран.
#
# В основной программе вызовите функции три раза только с одним аргументом (числом), например так:
# add_num(5)
# add_num(10)
# add_num(15)
#
# И посмотрите, что произойдёт.
# После этого сделайте значение lst по умолчанию None и поправьте функцию, чтобы она работала правильно.

def add_num(num, lst=None):
    lst = lst or []
    if not lst:
        lst = []
    lst.append(num)
    print(lst)


add_num(5)
add_num(10)
add_num(15)

****************************************
# Когда мы работаем с большой многоуровневой структурой, нам нередко необходимо пройтись по ней и найти нужный элемент.
# Для этого в программировании используются специальные алгоритмы поиска.
# Напишите функцию, которая находит заданный пользователем ключ в словаре и выдаёт значение этого ключа на экран.
# В качестве примера можно использовать такой словарь:
#
# site = {
#     'html': {
#         'head': {
#             'title': 'Мой сайт'
#         },
#         'body': {
#             'h2': 'Здесь будет мой заголовок',
#             'div': 'Тут, наверное, какой-то блок',
#             'p': 'А вот здесь новый абзац'
#         }
#     }
# }
#
# Пример 1:
# Искомый ключ: h2
# Значение: Здесь будет мой заголовок
#
# Пример 2:
# Искомый ключ: abc
# Такого ключа в структуре сайта нет.
site = {
    'html': {
        'head': {
            'title': 'Мой сайт'
        },
        'body': {
            'h2': 'Здесь будет мой заголовок',
            'div': 'Тут, наверное, какой-то блок',
            'p': 'А вот здесь новый абзац'
        }
    }
}

def find_key(key, data):
    if key in data:
        return data[key]

    for i_key in data.values():
        if isinstance(i_key, dict):
            result = find_key(key, i_key)
            if result:
                break
    else:
        result = None

    return result



user_input = (input('Искомый ключ: '))
value = find_key(user_input, site)
if value:
    print('Значение:', value)
else:
    print('Такого ключа нет')


****************************************
# Нашего друга попросили написать функцию, которая на вход принимает список всякого мусора.
# Ему нужно подготовить из этого списка список словарей, чтобы его коллеги смогли дальше продолжить обработку данных.
# Вот список правил, что нужно сделать с изначальным списком:
#
# Если в списке встретился словарь, то оставляем его.
# Если в списке встретилась строка, то из неё нужно сделать словарь и положить его в итоговый список,
# например  “abc” → {“abc”: “abc”}.
#
# С числами нужно сделать то же самое, что и со строками.
# Всё остальное выкидываем из нашего списка.
# Друг написал программу, но в ней ошибка, так как она что-то не то выводит :( Нужна ваша помощь, вот сама программа:

# def create_dict(data, template=dict()):
#     if isinstance(data, dict):
#         return data
#     if isinstance(data, int) or isinstance(data, float) or isinstance(data, str):
#         return template[data] = data
#
#
# def data_preparation(old_list):
#     new_list = []
#     for i_element in old_list:
#         new_list.append(create_dict(i_element))
#     return new_list
#
#
# data = [“sad”, {“sds”: 23}, {43}, [12, 42, 1], 2323]
# data = data_preparation(data)
# print(data)
# Исправьте программу и убедитесь, что всё работает верно.


def create_dict(data, template=None):
    if isinstance(data, dict):
        return data
    elif isinstance(data, (int, float, str)):
        template = template or dict()
        template[data] = data
        return template


def data_preparation(old_list):
    new_list = []
    for i_element in old_list:
        new_elem = (create_dict(i_element))
        if new_elem:
            new_list.append(new_elem)  # если есть новый элемент - добавляем его в список
    return new_list


data = ['sad', {'sds': 23}, {43}, [12, 42, 1], 2323]
print(data_preparation(data))

****************************************
# Вы работаете системным администратором в одной компании. На диске каждого сотрудника компании
# в специальной папке access лежит файл admin.bat. Этот файл предназначен для вас, и вам нужен путь до этого файла,
# причём как относительный, так и абсолютный. Недолго думая, вы решили написать небольшой скрипт,
# который закинете по сети к этому файлу.
# Напишите программу, которая выводит на экран относительный и абсолютный пути до файла admin.bat.
#
# Пример результата:
# Абсолютный путь до файла: C:\Users\Roman\PycharmProjects\Skillbox\access\admin.bat
# Относительный путь до файла: Skillbox\access\admin.bat
import os


folder_name = 'access'
file_name = 'admin.bat'
rel_path = os.path.join('..', folder_name, file_name)
abs_path = os.path.abspath(rel_path)

print('Относительный путь до файла:', rel_path)
print('Абсолютный путь до файла:', abs_path)

****************************************
# Андрей для себя хочет сделать экспериментальный сайт, где будет красиво отображаться вся структура его диска:
# папки одними иконками, файлы — другими. Поэтому ему нужен код, который поможет определить, какой тип иконки вставить.
#
# Напишите программу, которая по заданному абсолютному пути определяет, на что указывает этот путь
# (на директорию, файл, или же путь является ссылкой), и выведите соответствующее сообщение.
# Если путь указывает на файл, то также выведите его размер (сколько он весит в байтах).
# Обеспечьте контроль ввода: проверка пути на существование.
# Подсказка: для вывода размера файла поищите соответствующий метод.
#
# Пример 1:
# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py
# Это файл
# Размер файла: 605 байт
#
# Пример 2:
# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py
# Указанного пути не существует
import os

def find_file(file):
    print('Путь:', file)
    if os.path.exists(file):
        if os.path.isfile(file):
            print('Это файл')
            print('Размер файла:', os.path.getsize(file), 'байт')
        if os.path.isdir(file):
            print('Это папка')
            for i_elem in os.listdir(file):
                path = os.path.join(file, i_elem)
                print('Содержимое папки:', path)
    else:
        print('Указанного пути не существует')


file = 'Отряды.py'  # название файла

abs_path = os.path.abspath(os.path.join('..', 'lesson17', file))  # указываем правильный путь

find_file(abs_path)

****************************************
# Одному программисту дали задачу для обработки неких результатов тестирования двух групп людей.
# Файл первой группы (group_1.txt) находится в папке task, файл второй группы (group_2.txt) — в папке Additional_info.
# Содержимое файла group_1.txt
# Бобровский Игорь 10
# Дронов Александр 20
# Жуков Виктор 30
#
# Содержимое файла group_2.txt
# Павленко Геннадий 20
# Щербаков Владимир 35
# Marley Bob 15
#
# На экран нужно было вывести сумму очков первой группы, затем разность очков опять же первой группы
# и напоследок — произведение очков уже второй группы.
# Программист оказался не очень опытным, писал код наобум и даже не стал его проверять. И оказалось,
# этот код просто не работает. Вот что он написал:
# file = open('E:\task\group_1.txt', 'read')
# summa = 0
# for i_line in file:
#     info = i_line.split()
#     summa += info[2]
# file = open('E:\task\group_1.txt', 'read')
# diff = 0
# for i_line in file:
#     info = i_line.split()
#     diff -= info[2]
# file_2 = open('E:\task\group_2.txt', 'read')
# compose = 0
# for i_line in file:
#     info = i_line.split()
#     compose *= info[2]
# print(summa)
# print(diff)
# print(compose)
#
# Исправьте код для решения поставленной задачи. Для проверки результата создайте необходимые папки
# (task, Additional_info, Dont touch me) на своём диске в соответствии с картинкой и также добавьте файлы
# group_1.txt и group_2.txt.
import os

print(os.listdir())
file = open('F:\\task\\group_1.txt', 'r', encoding='utf-8')

summa = 0
diff = 0
for i_line in file:
    info = i_line.split('\n')
    info = info[0].split(' ')
    summa += int(info[2])
    diff -= int(info[2])
file.close()

file_2 = open('F:\\task\\Additional_info\\group_2.txt', 'r', encoding='utf-8')
compose = 1
for i_line_2 in file_2:
    info_2 = i_line_2.split('\n')
    info_2 = info_2[0].split(' ')
    compose *= int(info_2[2])
    print(info_2[2])
file_2.close()

print(summa)
print(diff)
print(compose)

****************************************
# Во входном файле numbers.txt записано N целых чисел, каждое в отдельной строке.
# Напишите программу, которая выводит их сумму в выходной файл answer.txt.
#
# Пример:
# Содержимое файла numbers.txt:
# 1
# 2
# 3
# 4
# 10
#
# Содержимое файла answer.txt
# 20

numbers = open('numbers.txt', 'r')
count = 0
for strin in numbers:
    count += int(strin)
print(count)
numbers.close()
result = open('answer.txt', 'a')
result.write(str(count))
result.write(', ')
result.close()

****************************************
# Выберите любую директорию на своём диске и затем напишите программу,
# выводящую на экран абсолютные пути к файлам и папкам, которые находятся внутри этой директории.
#
# Результат программы на примере директории проекта python_basic:
# Содержимое каталога G:\PycharmProjects\python_basic
#     G:\PycharmProjects\python_basic\.git
#     G:\PycharmProjects\python_basic\.idea
#     G:\PycharmProjects\python_basic\Module14
import os


def print_dirs(project):
    print('Содержимое директории', project)
    if os.path.exists(project):
        for i_elem in os.listdir(project):
            path = os.path.join(project, i_elem)
            print('    ', path)
    else:
        print('Каталога проекта не существует.')

folder_name = 'lesson18'

abs_path = os.path.abspath(os.path.join('..', folder_name))


print_dirs(abs_path)



# решение от курса:
# for path in os.listdir('..'):
#     print(os.path.join(os.path.abspath('..'), path))
****************************************
# В уроке мы написали функцию, которая ищет нужный нам файл во всех подкаталогах указанной директории.
# Однако, как мы понимаем, файлов с таким названием может быть несколько.
# Напишите функцию, которая принимает на вход абсолютный путь до директории и имя файла,
# проходит по всем вложенным файлам и папкам и выводит на экран все абсолютные пути с этим именем.
#
# Пример:
# Ищем в: C:/Users/Roman/PycharmProjects/Skillbox
# Имя файла: lesson2
#
# Найдены следующие пути:
# C:/Users/Roman/PycharmProjects/Skillbox\Module15\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module16\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module17\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module18\lesson2.py
import os

def search_file(dir, file):
    print('переходим', dir)
    for i_elem in os.listdir(dir):
        path = os.path.join(dir, i_elem)
        # print(path)
        if i_elem == file:
            print(os.path.abspath(path))

        if os.path.isdir(path):
            result = search_file(path, file)
            if result:
                break



file_name = 'Задача 1. Склады.py'  # что ищем
abs_path = os.path.abspath(os.path.join('..'))  # где ищем

print('Найдены следующие пути:')
search_file(abs_path, file_name)

****************************************
# Как мы помним, скрипты — это просто куча строк текста, хоть они и понятны только программисту.
# Таким образом, с ними можно работать точно так же, как и с обычными текстовыми файлами.
#
# Используя функцию поиска файла из предыдущего урока, реализуйте программу, которая находит внутри
# указанного пути все файлы с искомым названием и выводит на экран текст одного из них
# (выбор можно сгенерировать случайно).
#
# Подсказка: можно использовать, например, список для сохранения найденного пути.
import os
import random


def find_file(cur_path, file_name):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if file_name == i_elem:
            print('Найде файл')
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                all_paths.extend(result)

    return all_paths

def chek_file(path_to_file):
    file = open(path_to_file, 'r', encoding='utf8')
    for line in file:
        print(line)
    file.close()


all_paths = find_file('..', 'Задача 2. Кризис фруктов.py')
chek_file(random.choice(all_paths))


****************************************
# Ваш друг, который тоже проходит курс Python Basic, поехал с ноутбуком в другой город, и там у него случилась беда:
# его диск пришлось отформатировать, а доступ в интернет отсутствует. Остался только телефон с мобильным интернетом.
# Так как со связью (и с памятью) проблемы, друг попросил вас скинуть одним файлом все решения и скрипты,
# которые у вас сейчас есть.
# Напишите программу, которая копирует код каждого скрипта в папке проекта python_basic в файл scripts.txt,
# разделяя код строкой из 40 символов *.
#
# Пример содержимого файла scripts.txt:
# import platform
# import sys
#
# info = 'OS info is \n{}\n\nPython version is {} {}'.format(
#     platform.uname(),
#     sys.version,
#     platform.architecture(),
# )
# print(info)
#
# with open('os_info.txt', 'w', encoding='utf8') as file:
#     file.write(info)
# ****************************************
# print("Введите первую точку")
# x1 = float(input('X: '))
# y1 = float(input('Y: '))
# print("\nВведите вторую точку")
# x2 = float(input('X: '))
# y2 = float(input('Y: '))
#
# print("Уравнение прямой, проходящей через эти точки:")
# x_diff = x1 - x2
# y_diff = y1 - y2
# if x_diff == 0:
#     print("x = ", x1)
# elif y_diff == 0:
#     print("y = ", y1)
# else:
#     k = y_diff / x_diff
#     b = y2 - k * x2
#     print("y = ", k, " * x + ", b)
# ****************************************
import os


def find_file(cur_path, file_name):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if i_elem.endswith(file_name):
            # print('Найден файл', i_elem)
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                all_paths.extend(result)

    return all_paths

def chek_file(path_to_file):
    for file in path_to_file:
        files = open(file, 'r', encoding='utf8')
        new_file = open('scripts.txt', 'a', encoding='utf8')
        for line in files:
            new_file.write(str(line))
        new_file.write('\n' + '*'*40+'\n')
        files.close()
        new_file.close()



all_path = find_file('..', '.py')

files_list = chek_file(all_path)
print(files_list)

# решение курса
# def find_file(cur_path, ending):
#     all_paths = []
#     for i_elem in os.listdir(cur_path):
#         path = os.path.join(cur_path, i_elem)
#         if i_elem.endswith(ending):
#             all_paths.append(os.path.abspath(path))
#         elif os.path.isdir(path):
#             result = find_file(path, ending)
#             if result:
#                 all_paths.extend(result)
#
#     return all_paths
#
#
# def get_text_from_file(path_to_file):
#     file = open(path_to_file, "r", encoding="utf8")
#     result = ""
#     for line in file:
#         result += line
#     return result
#
#
# all_py_files = find_file('..', '.py')  # вместо ".." можно вставить путь до папки python_basic
#
# file_result = open("scripts.txt", "w", encoding="utf8")
#
# for file_path in all_py_files:
#     file_result.write(get_text_from_file(file_path))
#     file_result.write("\n" * 2 + "*" * 80 + "\n" * 2)

****************************************
# Напишите программу, которая выводит на экран только корень диска, на котором запущен скрипт.
# Учтите, что скрипт может быть запущен где угодно и при любой вложенности папок.
#
# Результат программы на примере диска G:
# Корень диска: G:\\

import os


def print_dirs(project):
    for i_elem in os.listdir(project):
        path = os.path.join(project, i_elem)
        print(' ', path)

abs_path = os.path.abspath(os.path.join(os.path.sep))
print('Содержимое каталога', abs_path)
print_dirs(abs_path)


****************************************
import random
def get_random_letter(n):
    return random.choices([chr(i) for i in range(ord('а'), ord('я'))], k=n)


print(get_random_letter(int(input('Сколько случайных букв желаешь: '))))

****************************************
# Программисты постоянно гуглят ошибки и ищут уже готовый код, который можно использовать
# для своей программы, чтобы не изобретать велосипед.
# Андрей поступил также и нашёл для своего проекта код,
# который должен находить минимальное и максимальное числа в списке.
# Вот этот код:

nums_list = []
N = int(input('Кол-во чисел в списке: '))

for _ in range(N):
    num = int(input('Очередное число: '))
    nums_list.append(num)

maximum = -1
minimum = 1

for i in nums_list:
    if maximum < i:
        maximum = i
    if minimum > i:
        minimum = i

print('Максимальное число в списке:', maximum)
print('Минимальное число в списке:', minimum)
****************************************
worker = int(input('Кол-во сотрудников в офисе: '))
worker_ID = []

for _ in range(worker):
    id = int(input('ID сотрудника: '))
    worker_ID.append(id)
search_ID = int(input('Какой ID ищем? '))

if search_ID in worker_ID:
    print('Сотрудник на месте')
else:
    print('Сотрудник не работает!')
****************************************
# Пользователь вводит список из N чисел и число K.
# Напишите код, выводящий на экран сумму индексов элементов списка, которые кратны K.

numbers_count = int(input('Введите кол-во чисел: '))
numbers = []

for number in range(numbers_count):
    print('Введите', number + 1, 'число: ', end = '')
    number_input = int(input())
    numbers.append(number_input)

divider = int(input('Введите делитель: '))

sum_index = 0
for n in numbers:
    if n % divider == 0:
        print('Индекс числа', n, ':', numbers.index(n) )
        sum_index += numbers.index(n)
print('Сумма индексов:', sum_index)





****************************************
numbers = []
for n in range(101):
    numbers.append(n)
print(numbers)

****************************************
# В собачьих бегах участвует N собак, у каждой из них есть определённое количество очков за сезон.
# На огромном табло выводятся очки каждой собаки.
# Однако при выводе был обнаружен баг: собаки с наибольшим и наименьшим количеством очков поменялись местами!
# Нужно это исправить.
#
# Дан список очков из N собак. Напишите программу, которая меняет местами наибольший и наименьший элементы в списке.

total_dogs = int(input('Введите кол-во собак: '))
dogs_list = []
for dog in range(total_dogs):
    print('Сколько очков у', dog + 1, 'собаки:', end=' ')
    dog_score = int(input())
    dogs_list.append(dog_score)

min = dogs_list[0]
max = dogs_list[0]

min_index = 0
max_index = 0


for i_dogs in range(total_dogs):
    if dogs_list[i_dogs] < min:
        min = dogs_list[i_dogs]
        min_index = i_dogs

    if dogs_list[i_dogs] > max:
        max = dogs_list[i_dogs]
        max_index = i_dogs

print('мин число:', min)
print('макс число:', max)
print(dogs_list)
dogs_list[min_index], dogs_list[max_index] = dogs_list[max_index], dogs_list[min_index]
print(dogs_list)
****************************************
# Дана строка S и номер позиции символа в строке.
# Напишите программу, которая выводит соседей этого символа и сообщение о количестве таких же символов
# среди этих соседей: их нет, есть ровно один или есть два таких же.

user_str = input('Введите строку: ') # abcd
user_index = int(input('Номер символа: ')) - 1

user_str = list(user_str)
count = 0
if user_index > 0:
    print('Символ слева:', user_str[user_index - 1])
    if user_str[user_index - 1] == user_str[user_index]:
        count += 1
if user_index < len(user_str)-1:
    print('Символ справа:', user_str[user_index + 1])
    if user_str[user_index + 1] == user_str[user_index]:
        count += 1

if count == 2:
     print('Рядом есть два таких же символа')
elif count == 1:
    print('Рядом есть такойже символ')
elif count == 0:
    print('Рядом таких же символов нет')

****************************************
numbers = [3, 7, 5]

while True:
    number = int(input('Новое число: '))
    numbers.append(number)
    print('Текущий список чисел:', numbers)

    for i in numbers:
        print(i ** 2, i ** 3, i ** 4)

print()

****************************************
# Мы продолжаем участвовать в разработке нового текстового редактора и делать жизнь обычных пользователей чуть лучше.
# В этот раз у нас стоит задача сделать фишку с поиском и заменой символов в выделенной строчке.
# Например, человек что-то перечислял в тексте, но ошибся и вместо точек с запятой использовал двоеточия.
# Лингвисты негодуют.
#
# Пользователь вводит строку S.
# Напишите программу, которая заменяет в строке все двоеточия (:) на точки с запятой (;).
# Также подсчитайте количество замен и выведите ответ на экран (и новую строку тоже).
# Для решения используйте список.
#
# Пример:
# Введите строку: гвозди:шурупы: гайки
# Исправленная строка: гвозди; шурупы; гайки
# Кол - во замен: 2

words = input('Введите строку: ')
words_list = list(words)
count = 0
for index, letter in enumerate(words_list):
    if letter == ':':
        words_list[index] = ';'
        count += 1
print('Измененная строка:', end=' ')
for i in words_list:
    print(i, end='')

print('\nКоличество замен:', count)

****************************************
# Мы уже писали программу для лингвистов, которая считала количество определённых букв в тексте.
# Теперь эту программу нужно улучшить. Есть список из трёх слов, которые вводит пользователь.
# Затем вводится сам текст произведения строго по словам. Текст вводится до тех пор, пока не встретится слово end.
# Напишите программу, которая посчитает, сколько раз слова пользователя встречаются в тексте.

words_list = []
count = [0, 0, 0]
for i in range(3):
    print('Введите', i + 1, 'слово:', end=' ')
    word = input()
    words_list.append(word)

user_word = input('Слово из текста: ')
while user_word != 'end':
    for index in range(3):
        if words_list[index] == user_word:
            count[index] += 1
    user_word = input('Слово из текста: ')

print('Подсчет слов в тексте:\n')
for i in range(3):
    print(words_list[i], ':', count[i])

****************************************
# Гера решил попрактиковаться в программировании и захотел написать небольшой скрипт,
# который после двух сообщений отправляет ещё одно на основе первых двух.
# Пользователь вводит две строки. В каждой из них есть какое-то количество специальных символов ! и ?.
# Напишите программу, которая считает количество этих символов отдельно в первой строке и отдельно во второй.
# Если в первой строке их больше, чем во второй, то на экран выводится первая строчка, объединённая со второй, а иначе — вторая с первой.
# При равном количестве символов в строках выводится «Ой».


first_question = input('Первое сообщение: ')
second_question = input('Второе сообщение: ')

first_count = first_question.count('!') + first_question.count('?')
second_count = second_question.count('!') + second_question.count('?')

if first_count > second_count:
    print('Третье сообщение:', first_question, second_question)
elif second_count > first_count:
    print('Третье сообщение:', second_question, first_question)
else:
    print('Ой!')

****************************************
# Одна IT-компания решила расшириться и взяла под своё крыло ещё три таких же, но поменьше.
# Конечно же, все выполненные и невыполненные задачи этих компаний перетекли в основную компанию.
# Даны четыре списка компаний, в которых для каждой задачи написано, выполнена (1) она или нет (0):
#
# main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
# first_company = [0, 0, 0]
# second_company = [1, 0, 0, 1, 1]
# third_company = [1, 1, 1, 0, 1]
#
# Напишите программу, которая расширяет список main элементами остальных списков, выведите итоговый список, а также выведите количество невыполненных задач.

main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
first_company = [0, 0, 0]
second_company = [1, 0, 0, 1, 1]
third_company = [1, 1, 1, 0, 1]

main.extend(first_company)
main.extend(second_company)
main.extend(third_company)

print('Общий список задач:', main)
print('Кол-во невыполненных задач:', main.count(0))

****************************************
# В маленьком зоопарке каждое животное сидит в отдельной клетке, всего этих животных четверо: лев, кенгуру, слон и обезьяна.
# В базе данных они хранятся в виде вот такого списка:
#
# zoo = ['lion', 'kangaroo', 'elephant', 'monkey']
#
# Сегодня в зоопарк завезли медведя (bear) и посадили его между львом и кенгуру.В итоге животных стало пять.
# А через неделю слона перевезли в другое место и в списке снова стало четверо животных.
# Реализуйте эти действия в коде программы и выведите в консоль итоговый список животных, а также покажите,
# в какой клетке сидят лев и обезьяна. Для этого используйте методы списков.
#
# Результат работы программы:
# # Зоопарк: ['lion', 'bear', 'kangaroo', 'monkey']
# # Лев сидит в клетке номер 1
# Обезьяна сидит в клетке номер 4

zoo = ['lion', 'kangaroo', 'elephant', 'monkey']

zoo.insert(1, 'bear')
zoo.remove('elephant')

print('Зоопарк:', zoo)
print('Лев сидит в клетке номер', zoo.index('lion') + 1)
print('Обезьяна сидит в клетке номер', zoo.index('monkey') + 1)

****************************************
# Мы поддерживаем свой киносайт и хотим сделать так, чтобы пользователи после регистрации могли создать
# собственный рейтинг фильмов из тех, которые есть на сайте.

def chek_film(film, films):
    for i_film in films:
        if i_film == film:
            return True
    else:
        return False


films = [
    'Крепкий орешек', 'Назад в будущее', 'Таксист',
    'Леон', 'Богемская рапсодия', 'Город грехов',
    'Мементо', 'Отступники', 'Деревня',
    'Проклятый остров', 'Начало', 'Матрица', 'Не грози южному централу'
]
user_films = []

while True:
    print('Ваш текущий топ фильмов:', user_films)
    print('\nНазвание фильма: ', end='')
    film = input()
    if chek_film(film, films):
        print('Команды: добавить, вставить, удалить')
        user_comand = input('Введите команду: ')
        if user_comand == 'добавить':
            if chek_film(film, user_films):
                print('Этот фильм уже есть в вашем списке.')
            else:
                user_films.append(film)
        if user_comand == 'вставить':
            if chek_film(film, user_films):
                print('Этот фильм уже есть в вашем списке.')
            else:
                user_index = int(input('На какое место: '))
                user_films.insert(user_index - 1, film)
        if user_comand == 'удалить':
            user_films.remove(film)
        else:
            print('Вы ввели неверную команду!')
    else:
        print('Такого фильма на сайте нет')

****************************************
# В небольшой фруктовой лавке у каждого фрукта есть название и цена. Эта информация хранится в одном большом списке, вот так:
#
# goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]
#
# Недавно в лавку привезли новый fruit_name по цене price, а после этого случилось ужасное:
# повысили налоги. А значит, повысились и цены на фрукты, на целых 8%!
#
# Реализуйте код, который добавляет в список goods ещё один список с новым фруктом и ценой (это запрашивается у пользователя),
# а затем увеличивает цены всех фруктов на 8%.

goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]

fruit_name = input('Новый фрукт: ')
price = int(input('Цена: '))

goods.append([fruit_name, price])
print('Новый ассортимент:', goods)

for good in goods:
    good[1] = round(good[1] * 1.08, 2)

print('Новый ассортимент с увеличенной ценой:', goods)



****************************************
# Дан вот такой список со списками:
# matrix = [[1, 2 ,3], [4, 5, 6], [7, 8, 9]]
# Реализуйте программу, которая выводит элементы этого списка в виде привычной нам матрицы.
#
# Результат работы программы:
#
# 1 2 3
# 4 5 6
# 7 8 9

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
for i in matrix:
    for num in i:
        print(num, end=' ')
    print()

****************************************
# В олимпиаде по программированию участвует N человек, в списке участников они обозначаются под номерами 1, 2, 3, 4
# и так далее до N.Эти участники поделены на команды по  K человек. Напишите программу, которая принимает
# на вход количество участников и количество человек в каждой команде, затем генерирует список таких команд и
# выводит его на экран.
# Обеспечьте контроль ввода: в каждой команде должно быть ровно по K человек.
#
# Пример 1:
# Кол - во участников: 12
# Кол - во человек в команде: 4
#
# Общий список команд: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
#
# Пример 2:
# Кол - во участников: 12
# Кол - во человек в команде: 5
#
# 12 участников невозможно поделить на команды по 5 человек!

all_members = int(input('Кол-во участников: '))
team_members = int(input('Кол-во человек в команде: '))
team_list = []
teams = all_members % team_members

if teams == 0:
    flag = True
else:
    print(all_members, 'участников невозможно поделить на команды по', team_members, 'человек!')


if flag:
    num = 1
    for _ in range(all_members // team_members):
        team_list.append(list(range(num, team_members + num)))
        num += team_members
    print('Общий список команд: ', team_list)

****************************************
# При работе с сервером мы кодируем сообщение и отправляем его в виде пакетов информации.
# Их количество равно N. Допустим, каждый пакет содержит четыре числа, каждое из которых равно нулю или единице.
# Эти числа называются битами. Иногда в кодировке сообщения встречаются ошибки, и в пакете эта ошибка обозначается числом -1.
# Если таких ошибок не больше одной, то этот пакет мы целиком добавляем в список для декодирования, а иначе отбрасываем.
#
# Напишите программу, которая будет обрабатывать полученные пакеты и выведет на экран итоговое сообщение для декодирования,
# а также количество ошибок в нём и количество необработанных пакетов.

all_packets = int(input('Количество пакетов: '))

packets_list = []
lost_packets = 0
for packet in range(all_packets):
    temp = []
    print('\nПакет номер', packet + 1)
    for byte in range(4):
        print(byte + 1, 'бит: ', end='')
        byte_input = int(input())
        temp.append(byte_input)
    if temp.count(-1) <= 1:
        packets_list.extend(temp)
    else:
        print('Много ошибок в пакете!')
        lost_packets += 1

print('Полученное сообщение:', packets_list)
print('Количество ошибок в сообщении:', packets_list.count(-1))
print('Количество потерянных пакетов:', lost_packets)

****************************************
# В одной компании наступили «тёмные времена», и сотрудников стали сокращать.
# Зарплаты сотрудников хранятся в списке из N этих самых зарплат.
# Зарплаты уже уволенных сотрудников обозначаются в списке числом 0.
#
# Напишите программу, которая запрашивает у пользователя количество сотрудников и их зарплаты,
# затем удаляет все элементы списка со значением 0 и выводит в консоль, сколько сотрудников осталось, а также их зарплаты.
# Дополнительный список использовать нельзя.

workers = int(input('Количество сотрудников: '))
salary_list = []

for worker in range(1, workers + 1):
    print('Зарплата', worker, 'сотрудника: ', end='')
    salary = int(input())
    salary_list.append(salary)

salary_list.remove(0)
print('Осталось сотрудников:', len(salary_list), '\nЗарплаты:', salary_list)
print('Максимальная зарплата:', max(salary_list))
print('Минимальная зарплата:', min(salary_list))

****************************************
nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]],
             [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

result = [j for i_num in range(len(nice_list))
              for i in range(len(nice_list[i_num]))
              for j in nice_list[i_num][i]]

print('Ответ:', result)

****************************************
# Нашему другу заказали написать программу, которая анализирует цены на бирже.
# Она получает этот пакет данных, но делать что-либо с ним нельзя.
# Для нормальной работы аналитической программы берётся новый список, который равен тому, что пришло.
# Затем идёт работа с новым списком: если есть отрицательные цены, то программа их зануляет и в конце выводит на экран,
# сколько денег мы по итогу потеряли. Получился вот такой код:
#
# original_prices = [-12, 3, 5, -2, 1]
# new_prices = original_prices
# for i in range(len(original_prices)):
#     if new_prices[i] < 0:
#         new_prices[i] = 0
#
# print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))
#
# Однако при таких входных данных программа почему-то работает неправильно: она выводит ответ 0, когда правильный ответ 14.
# Помогите другу исправить программу, а также сделайте так, чтобы список цен генерировался случайно (диапазон можно выбрать любой).

import random

original_prices = [random.randint(-5, 5) for _ in range(random.randint(1, 10))]
# original_prices = [-12, 3, 5, -2, 1]

new_prices = original_prices[:]
for i in range(len(original_prices)):
    if new_prices[i] < 0:
        new_prices[i] = 0

print('Оригинальные цены', original_prices)
print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))

****************************************
# вытащить вложенные списки в один общий список

nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

# списковая сборка:
output = [j for each_list in nice_list for each_list2 in each_list for j in each_list2]

# обычный цикл:
# for i_num in range(len(nice_list)):
#     for i in range(len(nice_list[i_num])):
#         for j in nice_list[i_num][i]:
#             nice_list3.append(j)


print('Итог:', output)


****************************************
# Задача 1. Гласные буквы
# Что нужно сделать
#
# Команде лингвистов понравилось качество ваших программ, и они решили заказать у вас функцию для анализатора текста,
# которая создавала бы список гласных букв текста, а заодно считала бы их количество.
# Напишите программу, которая запрашивает у пользователя текст и генерирует список из гласных букв этого текста
# (сама строка вводится на русском языке). Выведите в консоль сам список и его длину.
#
# Пример:
# Введите текст: Нужно отнести кольцо в Мордор!
#
# Список гласных букв: ['у', 'о', 'о', 'е', 'и', 'о', 'о', 'о', 'о']
# Длина списка: 9

def vowels(words):
    words_list = ['а', 'у', 'о', 'ы', 'и', 'э', 'я', 'ю', 'ё', 'е', 'А', 'У', 'О', 'Ы', 'И', 'Э', 'Я', 'Ю', 'Ё', 'Е']
    result = [i_words for i_words in words if i_words in words_list] #  символ для символа в тексте (words) если
                                                                     # символ встречается в списке (words_list) то добавить в список result
    return result


words = [word for word in input('Введите текст: ')]
print(vowels(words))

****************************************
# Пользователь вводит целое число N. Напишите программу, которая генерирует список из N чисел,
# на чётных местах в нём стоят единицы, а на нечётных — числа, равные остатку от деления своего номера на 5.
#
# Пример:
# Введите длину списка: 10
# Результат: [1, 1, 1, 3, 1, 0, 1, 2, 1, 4]
# numbers = [1 if num % 2 == 0 else num % 5 for num in range(len_numbers)]
#  если индекс числа четный, то равен 1, иначе индекс числа % 5 в длине списка 1, 10

len_numbers = int(input('Введите длину списка: '))
numbers = [1 if num % 2 == 0
           else num % 5
           for num in range(len_numbers)]

print(numbers)

****************************************
# Пользователь вводит числа A и B. Напишите программу, которая генерирует два списка:
# в первом лежат кубы чисел в диапазоне от А до В, во втором — квадраты чисел в этом же диапазоне.
# Выведите списки на экран. Для генерации используйте list comprehensions (как и в следующих задачах).
#
# Пример:
#
# Левая граница: 5
# Правая граница: 10
#
# Список кубов чисел в диапазоне от 5 до 10: [125, 216, 343, 512, 729, 1000]
# Список квадратов чисел в диапазоне от 5 до 10: [25, 36, 49, 64, 81, 100]

start = int(input('Левая граница: '))
stop = int(input('Правая граница: '))

cube_list = [x ** 3 for x in range(start, stop + 1)]
square_list = [x ** 2 for x in range(start, stop + 1)]

print('Список кубов чисел в диапазоне от', start, 'до', stop, cube_list)
print('Список квадратов чисел в диапазоне от', start, 'до', stop, square_list)

****************************************
# У нас есть вот такой список цен на некоторые товары из магазина:
# original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
#
# В этом списке также хранятся цены на товары, которые уже давно не продаются.
# По какой-то причине система, вместо того чтобы их занулить, просто приписала к ним минус. Нам нужно это исправить.
# Напишите программу, которая генерирует новый список из первого списка, заменяя все отрицательные числа на ноль.
#
# Результат:
# [1.25, 0, 10.22, 3.78, 0, 1.16]

original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]

new_prices = [(i_num if i_num > 0 else 0)
              for i_num in original_prices]

print(new_prices)

****************************************
# как найти индекс символа из списка!

result = input('Введите строку: ')

# result = ['g', 'h', 'b', 'd', 'h', 'n', 'h']
answer = [i_words for i_words in range(len(result)) if result[i_words] == 'h']

print('Развернутая последовательность между первым и последним h:', result[max(answer) - 1:min(answer):-1])

****************************************
# Мы продолжаем пробовать себя в качестве разработчика игр. Теперь нужно написать небольшую логику поведения некоторых отрядов,
# а также их урон. Есть два отряда, в каждом по 10 монстров. В первом отряде у каждого монстра урон абсолютно случайный
# и колеблется от 50 до 80, а во втором — от 30 до 60. Оба отряда вместе напали на третий, также из 10 юнитов.
# Юнит третьего отряда погибает, если сумма урона от двух монстров больше 100.
#
# Напишите программу, которая генерирует случайные значения в первых двух списках в заданных диапазонах,
# а также генерирует список, состоящий из фраз «Погиб» или «Выжил». Выведите все списки на экран.
#
# Пример:
#
# Урон первого отряда: [77, 75, 76, 77, 76, 73, 57, 67, 76, 52]
# Урон второго отряда: [53, 51, 31, 60, 49, 37, 31, 60, 37, 47]
# Состояние третьего отряда: ['Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Выжил', 'Погиб', 'Погиб', 'Выжил']

import random

units_1 = [random.randint(50, 80) for _ in range(10)]
units_2 = [random.randint(30, 60) for _ in range(10)]
units_3_condition = [('Погиб' if units_1[i_damage] + units_2[i_damage] > 100
                      else 'Выжил')
                     for i_damage in range(10)]


print('Урон первого отряда:', units_1)
print('Урон Второго отряда:', units_2)
print('Состояние третьего отряда:', units_3_condition)
****************************************
# Дан список цен на пять товаров с точностью до копейки. Так как экономика даёт о себе знать, мы спрогнозировали,
# что через год придётся повышать цены на X процентов, а ещё через один год — ещё на Y процентов.
# Напишите программу, которая получает на вход список цен на товары (вещественные числа,
# список генерируется также с помощью list comprehensions) и выводит в одну строку общую сумму стоимости товаров за каждый год.
#
# Пример:
# Цена на товар: 1.09
# Цена на товар: 23.56
# Цена на товар: 57.84
# Цена на товар: 4.56
# Цена на товар: 6.78
# Повышение на первый год: 0
# Повышение на второй год: 10
# Сумма цен за каждый год: 93.83 93.83 103.22

def get_percent_price(percent, price):
    return round(price * (1 + percent / 100), 2)


price_now = [float(input('Цена на товар:')) for _ in range(5)]

first_percent = int(input('Повышение на первый год: '))
second_percent = int(input('Повышение на второй год: '))

price_first = [get_percent_price(first_percent, i_price) for i_price in price_now]
price_second = [get_percent_price(second_percent, i_price) for i_price in price_first]

print('Сумма цен за каждый год:', round(sum(price_now), 2), round(sum(price_first), 2), round(sum(price_second), 2))

****************************************
# улучшение кода

def is_palindrome(num_list):
    reverse_list = num_list[::-1]
    if num_list == reverse_list:
        return True
    else:
        return False

total_num = int(input('Кол-во чисел: '))
number_list = []
answer = []

for num in range(total_num):
    num = int(input('Число: '))
    number_list.append(num)

for i_num in range(0, len(number_list)):
    if is_palindrome(number_list[i_num:len(number_list)]):
        answer = number_list[:i_num]
        answer.reverse()
        print('Последовательность:', number_list)
        if len(answer) == 0:
            print('Уже является палиндромом!')
            break
        print('Нужно приписать чисел:', len(answer))
        print('Сами числа:', answer)
        break

****************************************
# Илья решил безобидно подшутить над другом и написал программу для смартфона,
# которая при отправке сообщения удваивает каждый символ строки и заодно к каждому удвоенному добавляет ещё один дополнительный.
#
# Пользователь вводит строку и дополнительный символ. Напишите программу, которая генерирует два списка:
# в первом списке каждый элемент — удвоенная буква первой строки, во втором списке каждый элемент —
# конкатенация элемента первого списка и дополнительного символа.
#
# Пример:
# Введите строку: привет
# Введите дополнительный символ: !
#
# Список удвоенных символов: ['пп', 'рр', 'ии', 'вв', 'ее', 'тт']
# Склейка с дополнительным символом: ['пп!', 'рр!', 'ии!', 'вв!', 'ее!', 'тт!']

user_input = input('Введите строку: ')
new_symb = input('Введите дополнительный символ: ')

user_list = [x * 2 for x in user_input]
new_user_list = [x + new_symb for x in user_list]

print('Список удвоенных символов:', user_list)
print('Склейка с дополнительным символом:', new_user_list)

****************************************
# user_list = [int(input('Введи число: ')) for _ in range(2)]

start = int(input('Левая граница: '))
stop = int(input('Правая граница: '))

result = [i_num for i_num in range(start, stop + 1) if i_num % 2 == 0]

print(result)

****************************************
# Дан список чисел:
# nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]
#
# Напишите программу, которая выводит на экран шесть ответов:
# В первой строке выведите первые пять элементов списка.
# Во второй строке выведите весь список, кроме последних двух элементов.
# В третьей строке выведите все элементы с чётными индексами.
# В четвёртой строке выведите все элементы с нечётными индексами.
# В пятой строке выведите все элементы в обратном порядке.
# В шестой строке выведите все элементы списка через один в обратном порядке, начиная с последнего.
# Для решения используйте только срезы (и без функции len).
#
# Результат:
# [48, -10, 9, 38, 17]
# [48, -10, 9, 38, 17, 50, -5, 43]
# [48, 9, 17, -5, 46]
# [-10, 38, 50, 43, 12]
# [12, 46, 43, -5, 50, 17, 38, 9, -10, 48]
# [12, 43, 50, 38, -10]

nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]

print('Исходный список:', nums, '\n')
print('Первые пять элементов списка:', nums[:5])
print('Список без последних двух элементов:', nums[0:8])
print('Элементы с четными индексами', nums[::2])
print('Элементы с нечетными индексами', nums[1::2])
print('Элементы в обратном порядке:', nums[::-1])
print('Элементы в обратном порядке через один:', nums[::-2])

****************************************
# Дан список из N чисел, а также числа А и В (можно сгенерировать случайно, при этом А < B).
# Напишите программу, которая удаляет элементы списка с индексами от А до В.
# Не используйте дополнительные переменные и методы списков.

import random

numbers = [random.randint(1, 10) for _ in range(random.randint(5, 10))]
a = random.randint(0, len(numbers) - 2)
b = random.randint(a + 1, len(numbers) - 1)

print('Список', numbers, 'Удаляем элементы с индексами от', a, 'до', b)
numbers[a:b + 1] = []

print(numbers)

****************************************
def caesar_cipher(string, shift):
    char_list = [(alphabet[(alphabet.index(sym) + shift) % 33] if sym != ' ' else ' ') for sym in string]
    new_str = ''
    for i_char in char_list:
        new_str += i_char
    return new_str


alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
user_list = input('Введите сообщение: ')
shift = int(input('Введите сдвиг: '))

result = caesar_cipher(user_list, shift)
print('Зашифрованное сообщение:', result)

****************************************
# Задача 1. Заказ
# После того, как человек сделал заказ в интернет-магазине, ему на почту приходит оповещение с его именем и номером заказа.
# Напишите программу, которая получает на вход имя и код заказа, а затем выводит на экран соответствующее сообщение.
# Для решения используйте строковый метод format.
#
# Пример:
# Имя: Иван
# Номер заказа: 10948
#
# Здравствуйте, Иван! Ваш номер заказа: 10948. Приятного дня!

user_name = input('Имя клиента: ')
order_number = int(input('Номер заказа: '))

print('Здравствуйте, {name}! Ваш номер заказа: {order}. Приятного дня!'.format(name=user_name, order=order_number))
# или
print('Здравствуйте, {0}! Ваш номер заказа: {1}. Приятного дня!'.format(user_name, order_number))

****************************************
# Задача 1. Улучшенная лингвистика 2
# Усовершенствуйте старую программу:
# У нас есть список из трёх слов, которые вводит пользователь. Затем вводится сам текст произведения,
# который вводится уже в одну строку. Напишите программу, которая посчитает,
# сколько раз слова пользователя встречаются в тексте.

# count = [0, 0, 0]
# user_input = input('Введите три слова через пробел: ')
# user_words = user_input.split()
# words = input('Введите текст произведения: ')
# words_list = words.split()
#
# for index in range(3):
#     for word in words_list:
#         if user_words[index] == word:
#             count[index] += 1
#
# print('Подсчет слов в тексте:\n')
# for i in range(3):
#     print(user_words[i], ':', count[i])

# как надо было сделать
words = [input("Введите слово: ") for _ in range(3)]
text = input("Введите текст: ")
words_count = [text.count(word) for word in words]

print(words_count)

****************************************
# Задача 1. Шифр Цезаря 2
# Мы уже писали программу, которая шифрует строку с помощью шифра Цезаря.
# Напомним, что в таком способе шифрования каждая буква заменяется на следующую по алфавиту через K позиций по кругу.
# Напишите (модифицируйте) программу, которая реализует этот алгоритм шифрования. Не используйте конкатенацию и сделайте так,
# чтобы текст был в одном регистре.

def caesar_cipher(string, shift):
    char_list = [(alphabet[(alphabet.index(sym) + shift) % 33] if sym != ' ' else ' ') for sym in string]
    new_str = ''.join(char_list)
    return new_str


alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
user_list = input('Введите сообщение: ').lower()
shift = int(input('Введите сдвиг: '))

result = caesar_cipher(user_list, shift)
print('Зашифрованное сообщение:', result)


# print(ord("а"), ord("я"), ord("ё"), chr(1104))
#
# text = input("Введите текст: ")
# delta = int(input("Введите сдвиг: "))
# alphabet = [chr(index) for index in range(ord("а"), ord("я") + 1)]  # заполняем список буквами алфавита
# # Думаем над структурой алгоритма: [вариант_1 если условие_1 иначе вариант_2 for буква in текст]
# new_text = [alphabet[(alphabet.index(letter) + delta) % len(alphabet)] if letter in alphabet else letter for letter in text.lower()]
# print(''.join(new_text))

****************************************
# Задача 2. Бабушка
# У одной бабушки, когда та переписывается с внуком, постоянно залипает кнопка пробела.
# В итоге между словами получаются огромные расстояния. Внук не знает как это поправить в самом телефоне, поэтому обратился к вам за помощью.
#
# Пользователь вводит строку. Напишите программу, которая преобразовывает в этой строке все идущие подряд пробелы в один и выводит результат на экран.

grandma_input = input('Введите текст: ').split()

result = ' '.join(grandma_input)
print(result)

****************************************
# Задача 2. Долги
# Один наш друг занял у нас определённую сумму денег и всё никак не может их вернуть.
# А деньги нам нужны. Поэтому мы решили написать небольшой скрипт-напоминалку, который, возможно, разбудит его совесть.
#
# Напишите программу, которая получает на вход имя и долг, а затем выводит на экран сообщение,
# где имя повторяется несколько раз (и долг, возможно, тоже). Используйте числа в названиях ключей.
#
# Пример:
# Введите имя: Том
# Введите долг: 100
# Том! Том, привет! Как дела, Том? Где мои 100 рублей? Том!


user_name = input('Введите имя: ')
user_debt = int(input('Введите долг: '))

print('{0}! {0}, привет! Как дела, {0}? Где мои бабки, '
      '{0}? Когда вернешь {1} рублей, пёс?'.format(user_name, user_debt))

****************************************
# Задача 2. Путь к файлу
# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта
# часто используются абсолютные пути файлов, которые необходимо проверять.
# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные: диск и расширение файла.
# Напишите программу, которая проверяет корректность этого пути.
#
# Пример:
# Путь к файлу: C:/user/docs/folder/new_file.txt
# На каком диске должен лежать файл: C
# Требуемое расширение файла: .txt
# Путь корректен!

path = 'C:/user/docs/folder/new_file.txt'
print('Путь к файлу:', path)
disk_name = input('На каком диске должен лежать файл: ')
file_name = input('Требуемое расширение файла: ')



if not path.endswith(file_name):
    print('Ошибка расширения файла!')
elif not path.startswith(disk_name):
    print('Ошибка. Не верно указан диск!')
else:
    print('Путь корректен!')

****************************************
# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта часто используются
# абсолютные пути файлов, которые необходимо проверять.
# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные:
# диск и расширение файла. Напишите программу, которая проверяет корректность этого пути.
#
# Пример:
# Путь к файлу: C:/user/docs/folder/new_file.txt
# На каком диске должен лежать файл: C
# Требуемое расширение файла: .txt
# Путь корректен!

user_name = input('Введите имя пользователя: ')
file_name = input('Введите имя файла: ')

path = 'C:/{user}/docs/folder/{new_file}'.format(
    user=user_name,
    new_file=file_name
)

if not path.endswith('.txt'):
    print('Ошибка расширения файла!')
elif not path.startswith('C:/'):
    print('Ошибка. Не верно указан диск!')
else:
    print('Путь к файлу:', path)

****************************************
# Задача 3. IP-адрес
# IP-адрес компьютера состоит из 4 чисел, разделённых точкой. Каждое число находится в диапазоне от 0 до 255 (включительно).
#
# Пример правильного адреса: 192.168.1.0
# Пример неправильного адреса: 192.168.300.0
#
# Напишите программу, которая получает на вход 4 числа и выводит на экран IP-адрес.
# Используйте переменную ip_address в качестве шаблона. Обеспечьте контроль ввода.

# for num in range(4):
#     ip_address = ''
#     print('Ведите число: ')
#     num1 = int(input())
#     if num1 > 255:
#         print('Число не может быть больше "255"')
#         num = int(input())
#
#     num += 1
# print(ip_address)

ip_address = '{0}.{1}.{2}.{3}'
count = 0
numbers = []
while count < 4:
    new_number = int(input('Введите число:'))
    if 0 < new_number <= 255:
        numbers.append(new_number)
        count += 1
    else:
        print('Ошибка ввода! Цифра не может быть больше "255"')

print(ip_address.format(numbers[0], numbers[1], numbers[2], numbers[3]))

****************************************
# Задача 3. Разделители символов
# Человек хочет сделать рассылку поздравлений для определённого списка людей. Поздравления для разных людей он хочет написать по-разному.
#
# Напишите программу, которая запрашивает у пользователя:
# Шаблон поздравления (туда вставляется ФИ и возраст)
# ФИ людей (в одну строку, разделяются запятой)
# Возраст каждого человека (в одну строку через пробел)
# В конце  программа выводит поздравления и всех именинников в одну строку вместе с их возрастом.
#
# Пример:
# Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: С днём рождения, {name}! С {age}-летием тебя!
# Список людей через запятую: Иван Иванов, Петя Петров, Лена Ленова
# Возраст людей через пробел: 20 30 18
#
# С днём рождения, Иван Иванов! С 20-летием тебя!
# С днём рождения, Петя Петров! С 30-летием тебя!
# С днём рождения, Лена Ленова! С 18-летием тебя!
## Именинники: Иван Иванов 20, Петя Петров 30, Лена Ленова 18

while True:
    greetings = input('Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: ')
    if '{name}' and '{age}' in greetings:
        break
    print('Отсутствует одна или две конструкции')

guests = input('Список людей через запятую: ').split(', ')
age = input('Возраст людей через пробел: ')
age_list = age.split()

for i_man in range(len(guests)):
    print(greetings.format(name=guests[i_man], age=age_list[i_man]))

# для вывода именинников в одну строку
people = [
    ' '.join([guests[i_man], age_list[i_man]])
    for i_man in range(len(guests))
]

people_str = ', '.join(people)
print('Именинники:', people_str)

****************************************
# Дана структура, которая содержит описание одного из членов семьи (имя, фамилия, хобби, сколько лет и дети):
# family_member = {
#     "name": "Jane",
#     "surname": "Doe",
#     "hobbies": ["running", "sky diving", "singing"],
#     "age": 35,
#     "children": [
#         {
#             "name": "Alice",
#             "age": 6
#         },
#         {
#             "name": "Bob",
#             "age": 8
#         }
#     ]
# }
# # Напишите программу, которая реализует такую структуру: имя, фамилия, хобби, кол-во лет и дети.
# Затем, с помощью метода get и установки значения по умолчанию, проверьте есть ли ребёнок с именем Bob.
# Затем в отдельную переменную получите фамилию этого ребёнка и выведите её на экран. Если у него нет фамилии, то получите значение ‘Nosurname’.

family_member = {
    "name": "Jane",
    "surname": "Doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "name": "Alice",
            "age": 6
        },
        {
            "name": "Bob",
            "age": 8
        }
    ]
}


children_dict = dict()
for child in family_member['children']:
    children_dict[child['name']] = child['age']

search_bob = children_dict.get('Bob', {})
if search_bob:
    print('Bob найден')
else:
    print('Bob-a нет!')

surname = children_dict.get('surname', {})
if surname:
    print(surname)
else:
    print('Nosurname')

****************************************
a = [[1, 2, [3]], [1], 3]
l = [x for lst in a for x in lst]
print(l)
****************************************
# Напишите программу, которая считает количество знаков пунктуации в символьной строке.
# К знакам пунктуации относятся символы из набора ".,;:!?". Набор должен храниться в виде множества.
#
# Пример:
# Введите строку: Я! Есть. Грут?! Я, Грут и Есть.
# Количество знаков пунктуации: 6

text = input('Введите строку: ')
punct = set(".,;:!?")

count = 0
for i in text:
    if i in punct:
        count += 1
print('Количество знаков пунктуации:', count)
print(punct)
****************************************
# У мебельного магазина есть два склада, на которых хранятся разные категории товаров по парам «название — количество»:
#
# small_storage = {
#     'гвозди': 5000,
#     'шурупы': 3040,
#     'саморезы': 2000
# }
#
# big_storage = {
#     'доски': 1000,
#     'балки': 150,
#     'рейки': 600
# }
#
# Магазин решил сократить аренду и скинуть все товары в большой склад (big_storage). После этого нас попросили реализовать поиск по товарам.
# Напишите программу, которая объединяет оба словаря в один (в big_storage), затем запрашивает у пользователя название товара и выводит
# на экран его количество. Если такого товара нет, то выводит об этом ошибку. Для получения значения используйте метод get.

small_storage = {
    'гвозди': 5000,
    'шурупы': 3040,
    'саморезы': 2000
}

big_storage = {
    'доски': 1000,
    'балки': 150,
    'рейки': 600
}

big_storage.update(small_storage)

while True:
    input_item = input('Введите название товара: ')
    for item in big_storage.keys():
        if item == input_item:
            print('Количество товара', item, '-', big_storage.get(item))
            break
    else:
        print('Ошибка! Такого товара в базе нет!')


# решение от курса:
# big_storage.update(small_storage)
#
# user_item = input("Введите название нужного товара: ")
# if big_storage.get(user_item, None):
#     print(big_storage[user_item])
# else:
#     print("Такого товара нет!")

****************************************
# На вход программе поступает целое число num. Напишите программу создания словаря,
# который включает в себя ключи от 1 до num, а значениями соответствующего ключа будет значение ключа в квадрате.
#
# Пример:
# Введите целое число: 5
#
# Результат: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

num = int(input('Введите целое число: '))

num_dict = dict()

for numb in range(1, num + 1):
    num_dict[numb] = numb ** 2

print(num_dict)

****************************************
# Дана структура, которая содержит описание одного из членов семьи (имя, фамилия, хобби, сколько лет и дети):
# family_member = {
#     "name": "Jane",
#     "surname": "Doe",
#     "hobbies": ["running", "sky diving", "singing"],
#     "age": 35,
#     "children": [
#         {
#             "name": "Alice",
#             "age": 6
#         },
#         {
#             "name": "Bob",
#             "age": 8
#         }
#     ]
# }
# # Напишите программу, которая реализует такую структуру: имя, фамилия, хобби, кол-во лет и дети.
# Затем, с помощью метода get и установки значения по умолчанию, проверьте есть ли ребёнок с именем Bob.
# Затем в отдельную переменную получите фамилию этого ребёнка и выведите её на экран. Если у него нет фамилии, то получите значение ‘Nosurname’.

family_member = {
    "name": "Jane",
    "surname": "Doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "name": "Alice",
            "age": 6
        },
        {
            "name": "Bob",
            "age": 8
        }
    ]
}


children_dict = dict()
for child in family_member['children']:
    children_dict[child['name']] = child['age']

search_bob = children_dict.get('Bob', {})
if search_bob:
    print('Bob найден')
else:
    print('Bob-a нет!')

surname = children_dict.get('surname', {})
if surname:
    print(surname)
else:
    print('Nosurname')

****************************************
# Есть готовый словарь игроков, у каждого игрока есть имя, команда, в которой он играет, а также его текущий статус,
# в котором указано, отдыхает он, тренируется или путешествует:
#
# players_dict = {
#     1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
#     2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
#     3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
#     4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
#     5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
#     6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
#     7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
#     8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
# }
#
# Напишите программу, которая выводит на экран вот такие данные в разных строчках:
# Все члены команды из команды А, которые отдыхают.
# Все члены команды из группы B, которые тренируются.
# Все члены команды из команды C, которые путешествуют.

players_dict = {
    1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
    2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
    3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
    4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
    5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
    6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
    7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
    8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
}

rest_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'A' and player['status'] == 'Rest'
]

traning_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'B' and player['status'] == 'Training'
]

travel_players = [
    player['name']
    for player in players_dict.values()
    if player['team'] == 'C' and player['status'] == 'Travel'
]

print(rest_players)
print(traning_players)
print(travel_players)

****************************************
# Мы работаем в одной небольшой торговой компании, где все данные о продажах фруктов за год сохранены в словаре в виде пар «название фрукта — доход»:
#
# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'grapefruit': 300.40,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,
# }
#
# В компании наступил небольшой кризис, и нам поручено провести небольшой анализ дохода.
# Напишите программу, которая находит общий доход, затем выводит фрукт с минимальным доходом и удаляет его из словаря. Выведите итоговый словарь на экран.
# Результат работы программы:
# Общий доход за год составил 35419.34 рублей
# Самый маленький доход у grapefruit. Он составляет 300.4 рублей
# Итоговый словарь: {'apple': 5600.2, 'orange': 3500.45, 'banana': 5000.0, 'bergamot': 3700.56, 'durian': 5987.23, 'peach': 10000.5, 'pear': 1020.0, 'persimmon': 310.0}

incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'grapefruit': 300.40,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00,
}

min_value = min(incomes.values())
min_key = ''
for val in incomes:
    if incomes[val] == min_value:
        min_key = val

print('Оющий доход за год составил', sum(incomes.values()), 'рублей')
incomes.pop(min_key)
print('Самый маленький доход у', min_key, '. Он составляет', min_value, 'рублей')
print('Итоговый словарь:', incomes)

****************************************
# На одном семинаре по теории множеств нужно показать наглядный пример, как эти множества работают. Для начала было сгенерировано два набора чисел:
# nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
# nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]
#
# Вас попросили написать программу, которая будет наглядно демонстрировать работу со множествами с помощью этих чисел.
# Напишите программу, которая преобразует списки во множества и убирает повторяющиеся элементы.
# Затем удаляет минимальный элемент из каждого множества и добавляет туда случайное число в диапазоне от 100 до 200. Затем выполните следующие действия со множествами:
#
# Вывести все элементы множеств (объединение).
# Вывести только общие элементы (пересечение).
# Вывести элементы, входящие в nums_2, но не входящие в nums_1.
#
# Пример результата:
# 1-е множество: {1, 2, 3, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 26, 27, 29}
# 2-е множество: {1, 5, 7, 8, 9, 11, 12, 13, 15, 16, 19, 21, 22, 23, 24, 29, 30}
#
# Минимальный элемент 1-го множества: 1
# Минимальный элемент 2-го множества: 1
#
# Случайное число для 1-го множества: 126
# Случайное число для 2-го множества: 169
#
# Объединение множеств: {2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 169, 126}
# Пересечение множеств: {7, 8, 11, 12, 13, 15, 16, 19, 21, 22, 24, 29}
# Элементы, входящие в nums_2, но не входящие в nums_1: {5, 9, 169, 23, 30}
import random

nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]

nums_1 = set(nums_1)
nums_2 = set(nums_2)
min_nums_1 = min(nums_1)
min_nums_2 = min(nums_2)
random_min_nums_1 = random.randint(100, 200)
random_min_nums_2 = random.randint(100, 200)

print('Первое множество:', nums_1)
print('Второе множество:', nums_2)
print()
print('Минимальный элемент 1-го множества:', min_nums_1)
print('Минимальный элемент 2-го множества:', min_nums_2)
print()
print('Случайное число для 1-го множества:', random_min_nums_1)
print('Случайное число для 2го множества:', random_min_nums_2)

nums_1.remove(min_nums_1)
nums_2.remove(min_nums_2)
nums_1.add(random_min_nums_1)
nums_2.add(random_min_nums_2)
print('Объединение множеств:', nums_1 | nums_2)
print('Пересечение множеств:', nums_1 & nums_2)
print('Элементы, входящие в nums_2, но не входящие в nums_1:', nums_2 - nums_1)

****************************************
# Пользователь вводит фамилию, имя студента, город проживания, вуз, в котором он учится, и все его оценки.
# Всё вводится в одну строку через пробел. Напишите программу, которая по этой информации составит словарь и выведет его на экран.
#
# Пример:
# Введите информацию о студенте через пробел (имя, фамилия, город, место учёбы, оценки): Илья Иванов Москва МГУ 5 4 4 4 5
#
# Результат:
# Имя - Илья
# Фамилия - Иванов
# Город - Москва
# Место учёбы - МГУ
# Оценки - [5, 4, 4, 4, 5]

student = input(
    'Введите информацию о студенте через пробел\n'
    '(имя, фамилия, город, место учебы, оценки): '
)

student_list = student.split()

student_dict = dict()

for i_list in student_list:
    student_dict['Имя'] = student_list[0]
    student_dict['Фамилия'] = student_list[1]
    student_dict['Город'] = student_list[2]
    student_dict['Место учебы'] = student_list[3]
    student_dict['Оценки'] = []
for i_grade in student_list[4:]:
    student_dict['Оценки'].append(int(i_grade))

for i_info in student_dict:
    print(i_info, '-', student_dict[i_info])

****************************************
# Лингвистам нужно собрать данные о частоте букв в тексте, исходя из этих данных будет строиться гистограмма частоты букв.
# Напишите программу, которая получает сам текст и считает, сколько раз в строке встречается каждый символ.
# На экран нужно вывести содержимое в виде таблицы, отсортированное по алфавиту, а также максимальное значение частоты.
#
# Пример:
# Введите текст: Здесь что-то написано
#   : 2
# - : 1
# З : 1
# а : 2
# д : 1
# е : 1
# и : 1
# н : 2
# о : 3
# п : 1
# с : 2
# т : 2
# ч : 1
# ь : 1
# Максимальная частота: 3

def histograme(string):
    text_dict = dict()
    for symbol in string:
        if symbol in text_dict.keys():
            text_dict[symbol] += 1
        else:
            text_dict[symbol] = 1

    return text_dict


text = input('Введите текст: ').lower()
hist = histograme(text)

for key in sorted(hist.keys()):
    print(key, ':', hist[key])

print('Максимальная частота', max(hist.values()))  # метод


****************************************
# Энтузиаст Степан, купив новый телефон, решил написать для него свою собственную операционную систему.
# И, конечно же, первое, что он захотел в ней реализовать, — это телефонная книга.
#
# Напишите программу, которая запрашивает у пользователя имя контакта и номер телефона, добавляет их в словарь и выводит
# на экран текущий словарь контактов. Запрос на добавление идёт бесконечно (но можно задать своё условие для завершения программы).
# Обеспечьте контроль ввода: если это имя уже есть в словаре, то выведите соответствующее сообщение.
#
# Пример:
# Текущие контакты на телефоне:
# <Пусто>
#
# Введите имя: Иван
# Введите номер телефона: 100200300
# # Текущие контакты на телефоне:
# Иван  100200300
#
# Введите имя: Лена
# Введите номер телефона: 8005555522
# # Текущие контакты на телефоне:
# Иван  100200300
# Лена  8005555522
#
# Введите имя: Иван
# Ошибка: такое имя уже существует.
# ...


contacts_dict = {}

while True:
    print('Текущие контакты на телефоне:')
    for i_cont in contacts_dict:
        print(i_cont, contacts_dict[i_cont])
    input_name = input('\nВведите имя: ')
    if input_name in contacts_dict:
        print('Ошибка: такое имя уже существует.')
    else:
        input_number = int(input('Введите номер телефона: '))
        contacts_dict[input_name] = input_number


****************************************
# Напишите программу, которая находит все различные цифры в символьной строке.
# Для решения используйте множество (цифры будут различные, и поиск во множестве намного быстрее, чем в списке).
# Подсказка: можно использовать вот такое сравнение '0'<=x<='9'
#
# Пример:
# Введите строку: ab1n32kz2
# Различные цифры строки: 123

user_input = set(input('Введите строку: '))
numbers = set()

for symb in user_input:
    if '0'<= symb <='9':
        numbers.add(symb)

print(''.join(numbers))

****************************************
# Заполните один кортеж десятью случайными целыми числами от 0 до 5 включительно.
# Также заполните второй кортеж числами от −5 до 0. Объедините два кортежа, создав тем самым третий кортеж.
# С помощью метода кортежа определите в нём количество нулей. Выведите на экран третий кортеж и количество нулей в нём.
words = ('нулей', 'ноль', 'нуля', 'нуля', 'нуля', 'нулей', 'нулей', 'нулей', 'нулей', 'нулей', 'нулей')

import random

numbers = (0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5)
negative_numbers = (-5, -4, -3, -2, -1, 0, -5, -4, -3, -2, -1, 0,)
one_tuple = tuple(random.sample(numbers, 10))
two_tuple = tuple(random.sample(negative_numbers, 10))
result_tuple = one_tuple + two_tuple

print('Первый кортеж', one_tuple)
print('Второй кортеж', two_tuple)
print('Третий кортеж {} \nв нем: {} {}'.format(result_tuple, result_tuple.count(0), words[result_tuple.count(0)]))

****************************************
# Какой-то нехороший человек решил подпортить жизнь frontend-разработчикам и добавил в код сайта символ ~ (тильда).
# Но программисты быстро решили эту проблему, пройдясь по всему коду маленькой программой.
#
# Пользователь вводит строку. Напишите программу, которая проходит по строке и выводит в консоль индексы символа ~.
# Для решения этой задачи (и остальных тоже) используйте функцию enumerate.
#
# Пример:
# Строка: so~mec~od~e
# Ответ: 2 6 9

str_input = input('Строка:')

for i_sym, sym in enumerate(str_input):
    if sym == '~':
        print(i_sym, end=' ')

# решение с list comprehension
result = [str(i_sym) for i_sym, sym in enumerate(str_input) if sym == '~']
print(('Ответ:'), ' '.join(result))

# решение с использованием функции (выводим индекс необходимого символа)
def get_indexes(where_to_search, what_to_search):
    return [str(index) for index, letter in enumerate(where_to_search) if letter == what_to_search]

# генератор кортежа из случайных чисел
def create_random_tuple(a, b, n):
    return tuple([random.randint(a, b) for _ in range(n)])
#  first = create_random_tuple(0, 5, 10) - создать кортеж из 10 случайных чисел от 0 до 5

print(('Ответ:'), ' '.join(get_indexes(str_input, '~')))

****************************************
# Задача 1. Кризис миновал
# Закупки грейпфрутов прекратились, и кризис в торговой компании закончился. И теперь можно вернуться к обыденным делам.
# Однако внезапно вы обнаружили, что старый скрипт, который выводит данные о фруктах, куда-то потерялся.
# Необходимо его восстановить.
#
# Дан словарь с парами «название фрукта — цена»:
# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,
# }
#
# Вывести на экран словарь в следующем виде:
# apple -- 5600.2
# orange -- 3500.45
# banana -- 5000.0
# bergamot -- 3700.56
# durian -- 5987.23
# peach -- 10000.5
# pear -- 1020.0
# persimmon -- 310.0
# Не используйте обращение по ключу словаря.

incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00,
}

for i_name, i_price in incomes.items():
   print('{name} -- {price}'.format(name=i_name, price=i_price))

****************************************
# В базе данных поликлиники хранятся паспортные данные людей. Хранение реализовано с помощью словаря,
# состоящего из пар «Серия и номер паспорта — фамилия и имя». Серия и номер — составной ключ,
# а фамилия и имя — составное значение.
#
# data = {
#     (5000, 123456): ('Иванов', 'Василий'),
#     (6000, 111111): ('Иванов', 'Петр'),
#     (7000, 222222): ('Медведев', 'Алексей'),
#     (8000, 333333): ('Алексеев', 'Георгий'),
#     (9000, 444444): ('Георгиева', 'Мария')
# }
#
# Реализуйте функцию, которая по номеру и серии паспорта выдаёт имя и фамилию человека.

data = {
    (5000, 123456): ('Иванов', 'Василий'),
    (6000, 111111): ('Иванов', 'Петр'),
    (7000, 222222): ('Медведев', 'Алексей'),
    (8000, 333333): ('Алексеев', 'Георгий'),
    (9000, 444444): ('Георгиева', 'Мария')
}

serial = int(input('Введите серию: '))
number = int(input('Введите номер: '))

passport = (serial, number)

if passport in data:
    print(data[passport])
else:
    print('Такого человека нет')

****************************************
# Андрей однажды уже писал функции для расчёта площади сферы и объёма шара.
# И теперь для своей курсовой работы ему пришлось связаться с цилиндрами.
#
# Пользователь вводит два значения: радиус и высоту. Напишите функцию для расчёта площади
# боковой поверхности цилиндра и его полной площади. Функция должна возвращать два эти значения.
# После этого в основной программе выводятся оба ответа в две строки.
#
# Площадь боковой поверхности (r — радиус, h — высота):
# side = 2pi * r * h
# Полная площадь (S — площадь круга):
# full = side + 2 * S
import math

def cylinder_s (r, h):
    r_side = 2 * math.pi * r * h
    r_full = r + 2 * math.pi * r ** 2

    return r_side, r_full


radius = float(input('Введите радиус: '))
height = float(input('Введите высоту: '))

r_side, r_full = cylinder_s(radius, height)

print('Площадь боковой поверхности:', round(r_side, 2))
print('Полная площадь:', round(r_full, 2))

****************************************
# Создайте два списка, в каждом из которых лежит 10 случайных букв алфавита (могут повторяться).
# Затем для каждого списка создайте словарь из пар «индекс — значение» и выведите оба словаря на экран.
#
# Подсказка: random
#
# Пример:
# Первый список: ['й', 'р', 'с', 'г', 'а', 'а', 'т', 'ж', 'е', 'к']
# Второй список: ['д', 'а', 'а', 'в', 'т', 'ж', 'р', 'б', 'й', 'р']
#
# Первый словарь: {0: 'й', 1: 'р', 2: 'с', 3: 'г', 4: 'а', 5: 'а', 6: 'т', 7: 'ж', 8: 'е', 9: 'к'}
# Второй словарь: {0: 'д', 1: 'а', 2: 'а', 3: 'в', 4: 'т', 5: 'ж', 6: 'р', 7: 'б', 8: 'й', 9: 'р'}

import random

def random_generator (symb, how_symb):
    result = list()
    for i in range(how_symb):
        result.append(random.choice(symb))
    return result


def get_index(text):
    result = dict()
    for index, sym in enumerate(text):
        result.update({index: sym})
    return result


symb = (
    'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о',
    'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я'
)

first_list = random_generator(symb, 10)
second_list = random_generator(symb, 10)
first_tuple = get_index(first_list)
second_tuple = get_index(second_list)

print('Первый список:', first_list)
print('Второй список:', second_list)
print('\nПервый словарь:', first_tuple)
print('Второй словарь:', second_tuple)

****************************************
# Задача 2. Сервер
# У вас есть данные о сервере, которые хранятся в виде вот такого словаря:
## server_data = {
#     "server": {
#         "host": "127.0.0.1",
#         "port": "10"
#     },
#     "configuration": {
#         "access": "true",
#         "login": "Ivan",
#         "password": "qwerty"
#     }
# }
## Напишите программу, которая выводит для пользователя эти данные так же красиво и понятно, как они представлены в словаре.
# Результат работы программы:
# server:
#     host: 127.0.0.1
#     port: 10
# configuration:
#     access: true
#     login: Ivan
#     password: qwerty

server_data = {
    "server": {
        "host": "127.0.0.1",
        "port": "10"
    },
    "configuration": {
        "access": "true",
        "login": "Ivan",
        "password": "qwerty"
    }
}

for i_keys, i_values in server_data.items():
    print('{key}:'.format(key=i_keys), end='\n')
    for j_keys, j_values in i_values.items():  # вместо "server_data[i_keys].items()" можно обратится напрямую к значению
        print('\t{j_keys}: {j_values}'.format(j_keys=j_keys, j_values=j_values))


****************************************
# Мы уже реализовывали телефонную книгу для Степана, однако её проблема была в том,
# что туда нельзя было добавить людей с одинаковыми именами. Надо это исправить.
#
# Напишите программу, которая запрашивает у пользователя имя контакта, фамилию и номер телефона,
# добавляет их в словарь и выводит на экран текущий словарь контактов. Словарь состоит из пар «Ф. И. — телефон»,
# где Ф. И. — это составной ключ. Запрос на добавление идёт бесконечно
# (но можно задать своё условие для завершения программы).
# Обеспечьте контроль ввода: если этот человек уже есть в словаре, то выведите соответствующее сообщение.

def print_phonebook(data):
    print('\nТелефонная книга:')
    for user in data:
        print(f'{user[0]} {user[1]}: {data[user]}')

phonebook = dict()
while True:
    first_name = input('\nВведите фамилию ("выход" чтобы закончить): ')
    if first_name != 'выход':
        second_name = input('Введите имя: ')
        contact = (first_name, second_name)
        user_number = int(input('Введите номер телефона: '))
        if contact not in phonebook:
            phonebook.update({contact: user_number})
            print_phonebook(phonebook)
        else:
            print('Такой контакт уже есть!')
    else:
        break

# решение от курса:
# contacts = {}
#
# while True:
#     name = input("Введите имя: ")
#     surname = input("Введите фамилию: ")
#     name_n_surname = (name, surname)
#     if name_n_surname not in contacts:
#         contacts[name_n_surname] = int(input("Введите номер телефона: "))
#     else:
#         print("Такой контакт уже есть!")
#     print(contacts)

****************************************
# Дан код, в котором должно происходить следующее: изначально есть кортеж из пяти чисел.
# Затем вызывается функция, которая получает на вход кортеж чисел, генерирует случайный индекс и случайное значение,
# а затем по этим индексу и значению меняет сам кортеж. Функция должна возвращать кортеж и случайное значение.
#
# В основном коде функция используется два раза, и на экран два раза выводится новый кортеж и случайное значение.
# Причём второй раз выводится сумма первого случайного значения и второго.
## Однако код, который вам дали, оказался нерабочим. Исправьте его в соответствии с описанием.
import random

def change(nums):
    index = random.randint(0, 4)
    value = random.randint(100, 1000)
    nums = list(nums)
    nums[index] = value
    return tuple(nums), value


my_nums = (1, 2, 3, 4, 5)
my_nums, rand_val = change(my_nums)
new_nums, new_rand_val = change(my_nums)

print(my_nums, rand_val)
print(new_nums, new_rand_val + rand_val)


****************************************
# Нашему другу дали задачу: «Есть словарь, в котором ключи — это числа от 0 до 4,
# а значения ключей — числа 0, 100, 144, 20 и 19 соответственно.
# Нужно написать программу, которая выводит список тех значений, # у которых ключ делится на 2.
# Причём программа должна быть в одну строчку.» Программа у друга работает,
# но её не приняли, так как в ней не используется правило «не повторяйся» — это когда части кода не повторяются.
# Помогите другу исправить решение задачи так, чтобы код в строчке не повторялся.
#
# Решение друга:
# print([{0: 0, 1: 100, 2: 144, 3: 20, 4: 19}[i_key] for i_key in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19} if i_key % 2 == 0])
# [0, 144, 19]

print([i_value for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items() if i_key % 2 == 0])

# result = list()
# for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items():
#     if i_key % 2 == 0:
#         result.append(i_value)
# print(result)

****************************************
# Один заказчик попросил нас написать небольшой скрипт для своих криптографических нужд.
# При этом он заранее предупредил, что скрипт должен уметь работать с любым итерируемым типом данных.
# Напишите функцию, которая возвращает список из элементов итерируемого объекта
# (кортежа, строки, списка, словаря), у которых индекс чётный.
#
# Пример 1:
# Допустим, есть такая строка: 'О Дивный Новый мир!'
# Результат: ['О', 'Д', 'в', 'ы', ' ', 'о', 'ы', ' ', 'и', '!']
#
# Пример 2:
# Допустим, есть такой список: [100, 200, 300, 'буква', 0, 2, 'а']
# Результат: [100, 300, 0, 'а']
#
# Примечание: для проверки типа можно использовать функцию isinstance(<элемент>, <тип данных>),
# которая возвращает True, если элемент принадлежит к этому типу данных, и возвращает False в противном случае.

def even_index(object):
    result = [symb for index, symb in enumerate(object) if index % 2 == 0]
    return result


text_list = ['О', 'Дивный', 'Новый мир!']  # список
text_set = {'дрыхнуть', 'спать', 'кемарить', 'тусить', 'гонять'}  # множество
text_dict = {'веселиться: грустить', 'стоять: сидеть', 'моргать: зевать', 'идти: бежать'}  # словарь
text = 'О дивный новый мир'  # строка
text_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)  # кортеж


print('Такой список: ', text_list)
print('Результат: ', even_index(text_list))

print('\nТакое множество: ', text_set)
print('Результат: ', even_index(text_set))

print('\nТакой словарь: ', text_dict)
print('Результат: ', even_index(text_dict))

print('\nТакая строка: ', text)
print('Результат: ', even_index(text))

print('\nТакой кортеж: ', text_tuple)
print('Результат: ', even_index(text_tuple))




****************************************
site = {
    'html': {
        'head': {
            'title': 'Куплю/продам телефон недорого'
        },
        'body': {
            'h2': 'У нас самая низкая цена на iphone',
            'div': 'Купить',
            'p': 'продать'
        }
    }
}

# TODO здесь писать код
import copy


def display_struct(struct, spaces=1):
    for key, value in struct.items():
        if isinstance(value, dict):
            print(' ' * spaces, key)
            display_struct(value, spaces + 3)
        else:
            print('{}{} : {}'.format(' ' * spaces, key, value))


def create_site(site, total, phone=None, copy_site={}):
    if total == 0:
        return
    phone = input('Введите название продукта для нового сайта: ')
    total -= 1

    site['html']['head']['title'] = 'Куплю/продам {} недорого'.format(phone)
    site['html']['body']['h2'] = 'У нас самая низкая цена на {}'.format(phone)
    new_site = copy.deepcopy(site)
    copy_site.update({'\nСайт для {}:'.format(phone): site})
    display_struct(copy_site)
    create_site(new_site, total)
    return


total_site = int(input('Сколько сайтов: '))
create_site(site, total_site)
# задача оказалась для меня сложной, с выводом как в примере так и не справился...
****************************************
# Обычно программисты любят, когда всё просто и понятно. Но Антон не из таких.
# Он любит устраивать себе челлендж, развиваться и сразу применять на практике то, что только что узнал.
# И в этот раз он подумал реализовать подсчёт факториала без использования циклов.
#
# Напишите функцию, которая считает факториал числа с помощью рекурсии.
#
# Кстати, в Python есть ограничение на количество рекурсивных вызовов.
# Попробуйте передать своей функции, например, число 1000 и посмотрите, что будет.
def factorial(num):
    if num == 1:
        return num
    return num * factorial(num - 1)


print(factorial(5))

****************************************
# В одном проекте на 10 000 строк кода произошла критическая ошибка.
# Хорошо, что старший разработчик быстро её нашёл и исправил. Он решил проверить, смогли бы вы её исправить,
# если бы его не было на месте. Поэтому он написал для вас код с аналогичной ошибкой:

import random

def change_dict(dct):
    num = random.randint(1, 100)
    for i_key, i_value in dct.items():
        if isinstance(i_value, list):
            i_value.append(num)
        if isinstance(i_value, dict):
            i_value[num] = i_key
        if isinstance(i_value, set):
            i_value.add(num)


nums_list = [1, 2, 3]
some_dict = {1: 'text', 2: 'another text'}
uniq_nums = {1, 2, 3}
common_dict = {1: nums_list.copy(), 2: some_dict.copy(), 3: uniq_nums.copy(), 4: (10, 20, 30)}

change_dict(common_dict)
print(common_dict)
# Суть кода в том, что у вас есть общий словарь из нескольких ключей, значения которых равны ранее объявленным переменным.
# Затем вызывается функция, которая должна изменять значения словаря, добавляя к значениям случайное число,
# в зависимости от типа данных. Но при этом меняются и ранее объявленные переменные.
# Исправьте эту ошибку и убедитесь, что nums_list, some_dict и uniq_nums не меняются.
print(nums_list, some_dict, uniq_nums)

# Либо мы можем применить вспомогательную функцию, которая сделает это за нас:
import copy

common_dict = {1: nums_list, 2: some_dict, 3: uniq_nums, 4: (10, 20, 30)}
common_dict_2 = copy.deepcopy(common_dict)  # Она будет особенно полезна в структурах, в которых множество вложенных переменных
change_dict(common_dict_2)
print(common_dict_2)
print(nums_list, some_dict, uniq_nums)

****************************************
# Вы пишете небольшое приложение для работы с файлами. Реализуйте функцию, которая может принимать на вход три аргумента:
# вопрос пользователю (на который нужно ответить да или нет), сообщение о неправильном вводе и количество попыток.
# Вопрос — обязательный позиционный аргумент, остальные — со значениями по умолчанию.
# При корректном ответе функция может возвращать что угодно — например, число 1 при ответе «да» или 0 при ответе «нет».
#
# В основной программе вызовите функцию минимум три раза:
# только с вопросом, с вопросом и сообщением об ошибке, с вопросом и количеством попыток.
#
# Пример работы программы:
# Вы действительно хотите выйти? что
# Неверный ввод. Пожалуйста, введите 'да' или 'нет'.
# Осталось попыток: 3
# Вы действительно хотите выйти? да
# Удалить файл? не знаю
# Так удалить или нет?
# Осталось попыток: 3
# Удалить файл? нет
# Записать файл? ага
# Неверный ввод. Пожалуйста, введите 'да' или 'нет'.
# Осталось попыток: 1
# Записать файл? да

def func(question,
         message='Неверный ввод. Пожалуйста введите "да" или "нет".',
         count=4):
    while True:
        user_input = input(question).lower()
        if user_input == 'да':
            return 1
        if user_input == 'нет':
            return 0
        count -= 1
        if count == 0:
            print('Попытки закончились!')
            break
        print(message)
        print('Осталось попыток:', count)


print(func('Сохранить файл? '))
print(func('Удалить файл? ', 'Да или нет?'))
print(func('Удалить файл? ', message='Так удалить или нет?'))
print(func('Записать файл? ', count=2))

****************************************
# На одном из форумов, посвящённых программированию, пользователь выложил такой код
# для расчёта степени числа без использования циклов, ** и функции math.pow():

def power(num, degree):
    if degree <= 0:
        return 1
    return num * power(num, degree - 1)

float_num = float(input('Введите вещественное число: '))
int_num = int(input('Введите степень числа: '))
print(float_num, '**', int_num, '=', power(float_num, int_num))

# Другие пользователи отметили, что это решение нерабочее и в нём есть ошибки. Исправьте это решение,
# не используя циклы, возведение в степень через ** и функцию math.pow()
#
# Правильный результат:
# Введите вещественное число: 1.5
# Введите степень числа: 5
# 1.5 ** 5 = 7.59375
****************************************
# Друг никак не может понять эту тему с изменяемыми и неизменяемыми типами, ссылками, объектами и их id.
# Видя, как он мучается, вы решили помочь ему и объяснить эту тему наглядно.
# Пользователь вводит любой объект. Напишите программу, которая выводит на экран тип введённых данных,
# информацию о его изменяемости, а также id этого объекта.
#
# Пример 1:
# Введите данные: привет
#
# Тип данных: str (строка)
# Неизменяемый (immutable)
# Id объекта: 1705156583984
#
# Пример 2:
# Введите данные: {‘a’: 10, ‘b’: 20}
#
# Тип данных: dict (словарь)
# Изменяемый (mutable)
# Id объекта: 1705205308536

# if type(data) in (int, float, str, tuple, bool):
#     print('Неизменяемый (immutable)')
# elif type(data) in (str, set, dict):
#     print('Изменяемый (mutable)')

data_names_dict = {
    "<class 'str'>": "строка",
    "<class 'dict'>": "словарь",
    "<class 'list'>": "список",
    "<class 'set'>": "множество",
    "<class 'int'>": 'число',
    "<class 'bool'>": 'булево'
}

mutable_check_helper = {
    "mutable": ("словарь(dict)", "список(list)", "множество(set)"),
    "immutable": ("число(int)", "число с плавающей точкой(float)", "строка(str)", "кортеж(tuple)", "булево(bool)")
}


def check_info(data):
    type_of_data = type(data)
    name_of_data = ""
    if str(type_of_data) in data_names_dict:
        name_of_data = data_names_dict[str(type_of_data)]

    if name_of_data in mutable_check_helper["mutable"]:
        property_of_data = "Изменяемый (mutable)"
    else:
        property_of_data = "Неизменяемый (immutable)"

    print(f"Тип данных: {type_of_data} ({name_of_data})")
    print(property_of_data)
    print("Id объекта:", id(data))


data_in = True
check_info(data_in)

****************************************
# При работе со значениями по умолчанию и изменяемыми типами данных нужно знать и остерегаться ещё одной интересной штуки.
# Напишите функцию с двумя аргументами: первый — число num, позиционный аргумент;
# второй — список lst, по умолчанию он пустой.
# В теле функции в список добавляется число num и сам список выводится на экран.
#
# В основной программе вызовите функции три раза только с одним аргументом (числом), например так:
# add_num(5)
# add_num(10)
# add_num(15)
#
# И посмотрите, что произойдёт.
# После этого сделайте значение lst по умолчанию None и поправьте функцию, чтобы она работала правильно.

def add_num(num, lst=None):
    lst = lst or []
    if not lst:
        lst = []
    lst.append(num)
    print(lst)


add_num(5)
add_num(10)
add_num(15)

****************************************
# Когда мы работаем с большой многоуровневой структурой, нам нередко необходимо пройтись по ней и найти нужный элемент.
# Для этого в программировании используются специальные алгоритмы поиска.
# Напишите функцию, которая находит заданный пользователем ключ в словаре и выдаёт значение этого ключа на экран.
# В качестве примера можно использовать такой словарь:
#
# site = {
#     'html': {
#         'head': {
#             'title': 'Мой сайт'
#         },
#         'body': {
#             'h2': 'Здесь будет мой заголовок',
#             'div': 'Тут, наверное, какой-то блок',
#             'p': 'А вот здесь новый абзац'
#         }
#     }
# }
#
# Пример 1:
# Искомый ключ: h2
# Значение: Здесь будет мой заголовок
#
# Пример 2:
# Искомый ключ: abc
# Такого ключа в структуре сайта нет.
site = {
    'html': {
        'head': {
            'title': 'Мой сайт'
        },
        'body': {
            'h2': 'Здесь будет мой заголовок',
            'div': 'Тут, наверное, какой-то блок',
            'p': 'А вот здесь новый абзац'
        }
    }
}

def find_key(key, data):
    if key in data:
        return data[key]

    for i_key in data.values():
        if isinstance(i_key, dict):
            result = find_key(key, i_key)
            if result:
                break
    else:
        result = None

    return result



user_input = (input('Искомый ключ: '))
value = find_key(user_input, site)
if value:
    print('Значение:', value)
else:
    print('Такого ключа нет')


****************************************
# Нашего друга попросили написать функцию, которая на вход принимает список всякого мусора.
# Ему нужно подготовить из этого списка список словарей, чтобы его коллеги смогли дальше продолжить обработку данных.
# Вот список правил, что нужно сделать с изначальным списком:
#
# Если в списке встретился словарь, то оставляем его.
# Если в списке встретилась строка, то из неё нужно сделать словарь и положить его в итоговый список,
# например  “abc” → {“abc”: “abc”}.
#
# С числами нужно сделать то же самое, что и со строками.
# Всё остальное выкидываем из нашего списка.
# Друг написал программу, но в ней ошибка, так как она что-то не то выводит :( Нужна ваша помощь, вот сама программа:

# def create_dict(data, template=dict()):
#     if isinstance(data, dict):
#         return data
#     if isinstance(data, int) or isinstance(data, float) or isinstance(data, str):
#         return template[data] = data
#
#
# def data_preparation(old_list):
#     new_list = []
#     for i_element in old_list:
#         new_list.append(create_dict(i_element))
#     return new_list
#
#
# data = [“sad”, {“sds”: 23}, {43}, [12, 42, 1], 2323]
# data = data_preparation(data)
# print(data)
# Исправьте программу и убедитесь, что всё работает верно.


def create_dict(data, template=None):
    if isinstance(data, dict):
        return data
    elif isinstance(data, (int, float, str)):
        template = template or dict()
        template[data] = data
        return template


def data_preparation(old_list):
    new_list = []
    for i_element in old_list:
        new_elem = (create_dict(i_element))
        if new_elem:
            new_list.append(new_elem)  # если есть новый элемент - добавляем его в список
    return new_list


data = ['sad', {'sds': 23}, {43}, [12, 42, 1], 2323]
print(data_preparation(data))

****************************************
# Вы работаете системным администратором в одной компании. На диске каждого сотрудника компании
# в специальной папке access лежит файл admin.bat. Этот файл предназначен для вас, и вам нужен путь до этого файла,
# причём как относительный, так и абсолютный. Недолго думая, вы решили написать небольшой скрипт,
# который закинете по сети к этому файлу.
# Напишите программу, которая выводит на экран относительный и абсолютный пути до файла admin.bat.
#
# Пример результата:
# Абсолютный путь до файла: C:\Users\Roman\PycharmProjects\Skillbox\access\admin.bat
# Относительный путь до файла: Skillbox\access\admin.bat
import os


folder_name = 'access'
file_name = 'admin.bat'
rel_path = os.path.join('..', folder_name, file_name)
abs_path = os.path.abspath(rel_path)

print('Относительный путь до файла:', rel_path)
print('Абсолютный путь до файла:', abs_path)

****************************************
# Андрей для себя хочет сделать экспериментальный сайт, где будет красиво отображаться вся структура его диска:
# папки одними иконками, файлы — другими. Поэтому ему нужен код, который поможет определить, какой тип иконки вставить.
#
# Напишите программу, которая по заданному абсолютному пути определяет, на что указывает этот путь
# (на директорию, файл, или же путь является ссылкой), и выведите соответствующее сообщение.
# Если путь указывает на файл, то также выведите его размер (сколько он весит в байтах).
# Обеспечьте контроль ввода: проверка пути на существование.
# Подсказка: для вывода размера файла поищите соответствующий метод.
#
# Пример 1:
# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py
# Это файл
# Размер файла: 605 байт
#
# Пример 2:
# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py
# Указанного пути не существует
import os

def find_file(file):
    print('Путь:', file)
    if os.path.exists(file):
        if os.path.isfile(file):
            print('Это файл')
            print('Размер файла:', os.path.getsize(file), 'байт')
        if os.path.isdir(file):
            print('Это папка')
            for i_elem in os.listdir(file):
                path = os.path.join(file, i_elem)
                print('Содержимое папки:', path)
    else:
        print('Указанного пути не существует')


file = 'Отряды.py'  # название файла

abs_path = os.path.abspath(os.path.join('..', 'lesson17', file))  # указываем правильный путь

find_file(abs_path)

****************************************
# Одному программисту дали задачу для обработки неких результатов тестирования двух групп людей.
# Файл первой группы (group_1.txt) находится в папке task, файл второй группы (group_2.txt) — в папке Additional_info.
# Содержимое файла group_1.txt
# Бобровский Игорь 10
# Дронов Александр 20
# Жуков Виктор 30
#
# Содержимое файла group_2.txt
# Павленко Геннадий 20
# Щербаков Владимир 35
# Marley Bob 15
#
# На экран нужно было вывести сумму очков первой группы, затем разность очков опять же первой группы
# и напоследок — произведение очков уже второй группы.
# Программист оказался не очень опытным, писал код наобум и даже не стал его проверять. И оказалось,
# этот код просто не работает. Вот что он написал:
# file = open('E:\task\group_1.txt', 'read')
# summa = 0
# for i_line in file:
#     info = i_line.split()
#     summa += info[2]
# file = open('E:\task\group_1.txt', 'read')
# diff = 0
# for i_line in file:
#     info = i_line.split()
#     diff -= info[2]
# file_2 = open('E:\task\group_2.txt', 'read')
# compose = 0
# for i_line in file:
#     info = i_line.split()
#     compose *= info[2]
# print(summa)
# print(diff)
# print(compose)
#
# Исправьте код для решения поставленной задачи. Для проверки результата создайте необходимые папки
# (task, Additional_info, Dont touch me) на своём диске в соответствии с картинкой и также добавьте файлы
# group_1.txt и group_2.txt.
import os

print(os.listdir())
file = open('F:\\task\\group_1.txt', 'r', encoding='utf-8')

summa = 0
diff = 0
for i_line in file:
    info = i_line.split('\n')
    info = info[0].split(' ')
    summa += int(info[2])
    diff -= int(info[2])
file.close()

file_2 = open('F:\\task\\Additional_info\\group_2.txt', 'r', encoding='utf-8')
compose = 1
for i_line_2 in file_2:
    info_2 = i_line_2.split('\n')
    info_2 = info_2[0].split(' ')
    compose *= int(info_2[2])
    print(info_2[2])
file_2.close()

print(summa)
print(diff)
print(compose)

****************************************
# Во входном файле numbers.txt записано N целых чисел, каждое в отдельной строке.
# Напишите программу, которая выводит их сумму в выходной файл answer.txt.
#
# Пример:
# Содержимое файла numbers.txt:
# 1
# 2
# 3
# 4
# 10
#
# Содержимое файла answer.txt
# 20

numbers = open('numbers.txt', 'r')
count = 0
for strin in numbers:
    count += int(strin)
print(count)
numbers.close()
result = open('answer.txt', 'a')
result.write(str(count))
result.write(', ')
result.close()

****************************************
# Выберите любую директорию на своём диске и затем напишите программу,
# выводящую на экран абсолютные пути к файлам и папкам, которые находятся внутри этой директории.
#
# Результат программы на примере директории проекта python_basic:
# Содержимое каталога G:\PycharmProjects\python_basic
#     G:\PycharmProjects\python_basic\.git
#     G:\PycharmProjects\python_basic\.idea
#     G:\PycharmProjects\python_basic\Module14
import os


def print_dirs(project):
    print('Содержимое директории', project)
    if os.path.exists(project):
        for i_elem in os.listdir(project):
            path = os.path.join(project, i_elem)
            print('    ', path)
    else:
        print('Каталога проекта не существует.')

folder_name = 'lesson18'

abs_path = os.path.abspath(os.path.join('..', folder_name))


print_dirs(abs_path)



# решение от курса:
# for path in os.listdir('..'):
#     print(os.path.join(os.path.abspath('..'), path))
****************************************
# В уроке мы написали функцию, которая ищет нужный нам файл во всех подкаталогах указанной директории.
# Однако, как мы понимаем, файлов с таким названием может быть несколько.
# Напишите функцию, которая принимает на вход абсолютный путь до директории и имя файла,
# проходит по всем вложенным файлам и папкам и выводит на экран все абсолютные пути с этим именем.
#
# Пример:
# Ищем в: C:/Users/Roman/PycharmProjects/Skillbox
# Имя файла: lesson2
#
# Найдены следующие пути:
# C:/Users/Roman/PycharmProjects/Skillbox\Module15\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module16\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module17\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module18\lesson2.py
import os

def search_file(dir, file):
    print('переходим', dir)
    for i_elem in os.listdir(dir):
        path = os.path.join(dir, i_elem)
        # print(path)
        if i_elem == file:
            print(os.path.abspath(path))

        if os.path.isdir(path):
            result = search_file(path, file)
            if result:
                break



file_name = 'Задача 1. Склады.py'  # что ищем
abs_path = os.path.abspath(os.path.join('..'))  # где ищем

print('Найдены следующие пути:')
search_file(abs_path, file_name)

****************************************
# Как мы помним, скрипты — это просто куча строк текста, хоть они и понятны только программисту.
# Таким образом, с ними можно работать точно так же, как и с обычными текстовыми файлами.
#
# Используя функцию поиска файла из предыдущего урока, реализуйте программу, которая находит внутри
# указанного пути все файлы с искомым названием и выводит на экран текст одного из них
# (выбор можно сгенерировать случайно).
#
# Подсказка: можно использовать, например, список для сохранения найденного пути.
import os
import random


def find_file(cur_path, file_name):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if file_name == i_elem:
            print('Найде файл')
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                all_paths.extend(result)

    return all_paths

def chek_file(path_to_file):
    file = open(path_to_file, 'r', encoding='utf8')
    for line in file:
        print(line)
    file.close()


all_paths = find_file('..', 'Задача 2. Кризис фруктов.py')
chek_file(random.choice(all_paths))


****************************************
# Ваш друг, который тоже проходит курс Python Basic, поехал с ноутбуком в другой город, и там у него случилась беда:
# его диск пришлось отформатировать, а доступ в интернет отсутствует. Остался только телефон с мобильным интернетом.
# Так как со связью (и с памятью) проблемы, друг попросил вас скинуть одним файлом все решения и скрипты,
# которые у вас сейчас есть.
# Напишите программу, которая копирует код каждого скрипта в папке проекта python_basic в файл scripts.txt,
# разделяя код строкой из 40 символов *.
#
# Пример содержимого файла scripts.txt:
# import platform
# import sys
#
# info = 'OS info is \n{}\n\nPython version is {} {}'.format(
#     platform.uname(),
#     sys.version,
#     platform.architecture(),
# )
# print(info)
#
# with open('os_info.txt', 'w', encoding='utf8') as file:
#     file.write(info)
# ****************************************
# print("Введите первую точку")
# x1 = float(input('X: '))
# y1 = float(input('Y: '))
# print("\nВведите вторую точку")
# x2 = float(input('X: '))
# y2 = float(input('Y: '))
#
# print("Уравнение прямой, проходящей через эти точки:")
# x_diff = x1 - x2
# y_diff = y1 - y2
# if x_diff == 0:
#     print("x = ", x1)
# elif y_diff == 0:
#     print("y = ", y1)
# else:
#     k = y_diff / x_diff
#     b = y2 - k * x2
#     print("y = ", k, " * x + ", b)
# ****************************************
import os


def find_file(cur_path, file_name):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if i_elem.endswith(file_name):
            # print('Найден файл', i_elem)
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                all_paths.extend(result)

    return all_paths

def chek_file(path_to_file):
    for file in path_to_file:
        files = open(file, 'r', encoding='utf8')
        new_file = open('scripts.txt', 'a', encoding='utf8')
        for line in files:
            new_file.write(str(line))
        new_file.write('\n' + '*'*40+'\n')
        files.close()
        new_file.close()



all_path = find_file('..', '.py')

files_list = chek_file(all_path)
print(files_list)

# решение курса
# def find_file(cur_path, ending):
#     all_paths = []
#     for i_elem in os.listdir(cur_path):
#         path = os.path.join(cur_path, i_elem)
#         if i_elem.endswith(ending):
#             all_paths.append(os.path.abspath(path))
#         elif os.path.isdir(path):
#             result = find_file(path, ending)
#             if result:
#                 all_paths.extend(result)
#
#     return all_paths
#
#
# def get_text_from_file(path_to_file):
#     file = open(path_to_file, "r", encoding="utf8")
#     result = ""
#     for line in file:
#         result += line
#     return result
#
#
# all_py_files = find_file('..', '.py')  # вместо ".." можно вставить путь до папки python_basic
#
# file_result = open("scripts.txt", "w", encoding="utf8")
#
# for file_path in all_py_files:
#     file_result.write(get_text_from_file(file_path))
#     file_result.write("\n" * 2 + "*" * 80 + "\n" * 2)

****************************************
# Напишите программу, которая выводит на экран только корень диска, на котором запущен скрипт.
# Учтите, что скрипт может быть запущен где угодно и при любой вложенности папок.
#
# Результат программы на примере диска G:
# Корень диска: G:\\

import os


def print_dirs(project):
    for i_elem in os.listdir(project):
        path = os.path.join(project, i_elem)
        print(' ', path)

abs_path = os.path.abspath(os.path.join(os.path.sep))
print('Содержимое каталога', abs_path)
print_dirs(abs_path)


****************************************
import random
def get_random_letter(n):
    return random.choices([chr(i) for i in range(ord('а'), ord('я'))], k=n)


print(get_random_letter(int(input('Сколько случайных букв желаешь: '))))

****************************************
